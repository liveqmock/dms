package com.org.dms.action.service.basicinfomng;import com.org.dms.vo.service.SeBaPreauthorUserVO;import com.org.dms.dao.service.basicinfomng.SeBaPreauthorUserDao;import java.util.HashMap;import org.apache.log4j.Logger;import com.org.dms.common.DicConstant;import com.org.framework.Globals;import com.org.framework.common.User;import com.org.mvc.context.ActionContext;import com.org.framework.common.BaseResultSet;import com.org.framework.common.PageManager;import com.org.framework.common.QuerySet;import com.org.framework.util.Pub;import com.org.framework.util.RequestUtil;import com.org.mvc.context.RequestWrapper;import com.org.framework.log.LogManager;;/** * 预授权人员维护 * <p> * Company: szq * </p> *  * @author baixiaoliang * @version 1.0 2014-7-14 */public class PreauthorUserMngAction {	private Logger logger = com.org.framework.log.log			.getLogger("PreauthorUserMngAction");	private ActionContext atx = ActionContext.getContext();	private SeBaPreauthorUserDao dao = SeBaPreauthorUserDao.getInstance(atx);	/**	 * @auther baixiaoliang 预授权人员维护新增	 * @return void	 */	public void insert() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		try {			SeBaPreauthorUserVO vo = new SeBaPreauthorUserVO();			// SeBaPreauthorUserVO_Ext voExt=new SeBaPreauthorUserVO_Ext();			HashMap<String, String> hm;			hm = RequestUtil.getValues(request);			vo.setValue(hm);/*			// 判断是否已存在			QuerySet qs = dao.check(vo.getUserId());			if (qs.getRowCount() > 0) {				String n = qs.getString(1, 1);				if (Integer.parseInt(n) > 0) {					throw new Exception("预授权人员已存在，保存失败！");				}			}*/			// voExt.setValue(hm);			vo.setCreateUser(user.getAccount());			vo.setCreateTime(Pub.getCurrentDate());			dao.insert(vo);			vo.bindFieldToDic("STATUS", "YXBS");			// voExt.setUserId(vo.getUserId());			// voExt.bindFieldToDic("STATUS","YXBS");			// voExt.bindFieldToDic("USER_TYPE","CLYHLX");			// atx.setOutMsg(voExt.getRowXml(),"预授权人员维护新增成功！");			atx.setOutMsg(vo.getRowXml(), "预授权人员维护新增成功！");		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}	/**	 * @auther baixiaoliang 预授权人员维护新增	 * @return void	 */	public void update() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		try {			SeBaPreauthorUserVO vo = new SeBaPreauthorUserVO();			// SeBaPreauthorUserVO_Ext voExt=new SeBaPreauthorUserVO_Ext();			HashMap<String, String> hm;			hm = RequestUtil.getValues(request);			vo.setValue(hm);			// voExt.setValue(hm);			vo.setUpdateUser(user.getAccount());			vo.setUpdateTime(Pub.getCurrentDate());			dao.update(vo);			// voExt.setUserId(vo.getUserId());			// voExt.bindFieldToDic("STATUS","YXBS");			// voExt.bindFieldToDic("USER_TYPE","CLYHLX");			// atx.setOutMsg(voExt.getRowXml(),"预授权人员维护修改成功！");			atx.setOutMsg(vo.getRowXml(), "预授权人员维护修改成功！");			LogManager.writeUserLog("", "", Globals.OPERATION_TYPE_INSERT,					LogManager.RESULT_SUCCESS, "修改 [" + vo.getUserId() + " 成功",					user);		} catch (Exception e) {			atx.setException(e);			logger.error(e);			LogManager.writeUserLog("", "", Globals.OPERATION_TYPE_INSERT,					LogManager.RESULT_FAILURE, "预授权人员维护失败：" + e.toString(),					user);		}	}	/**	 * @auther baixiaoliang 预授权人员维护删除	 * @return void	 */	public void delete() throws Exception {		RequestWrapper request = atx.getRequest();		String status = Pub.val(request, "status");		String userId = Pub.val(request, "userId");		try {			if (DicConstant.YXBS_02.equals(status)) {				dao.delete(userId);				atx.setOutMsg("", "预授权人员维护额删除成功！");			} else {				atx.setOutMsg("", "只有无效的才可以进行删除操作！");			}		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}	/**	 * @auther baixiaoliang 预授权人员维护查询	 * @return void	 */	public void search() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		PageManager page = new PageManager();		String conditions = RequestUtil.getConditionsWhere(request, page);		try {			BaseResultSet bs = dao.search(page, user, conditions);			atx.setOutData("bs", bs);		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}	/**	 * @auther baixiaoliang 预授权人员维护删除	 * @return void	 */	public void resetStatus() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		String status = Pub.val(request, "status");		String userId = Pub.val(request, "userId");		try {			SeBaPreauthorUserVO vo = new SeBaPreauthorUserVO();			vo.setUserId(userId);			vo.setUpdateUser(user.getAccount());			vo.setUpdateTime(Pub.getCurrentDate());			vo.setStatus(status);			dao.update(vo);			atx.setOutMsg("", "预授权人员维护删除成功！");		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}}