package com.org.dms.action.service.basicinfomng;import com.org.dms.vo.service.SeBaRulePartVO;import com.org.dms.dao.service.basicinfomng.SeBaRulePartDao;import java.util.ArrayList;import java.util.HashMap;import java.util.LinkedList;import java.util.List;import org.apache.log4j.Logger;import com.org.dms.common.DicConstant;import com.org.framework.Globals;import com.org.framework.common.User;import com.org.mvc.context.ActionContext;import com.org.mvc.context.ResponseWrapper;import com.org.framework.common.BaseResultSet;import com.org.framework.common.PageManager;import com.org.framework.common.QuerySet;import com.org.framework.fileimport.ExcelErrors;import com.org.framework.fileimport.ExportManager;import com.org.framework.fileimport.HeaderBean;import com.org.framework.util.Pub;import com.org.framework.util.RequestUtil;import com.org.mvc.context.RequestWrapper;import com.org.framework.log.LogManager;; /**   * 三包规则配件   * <p>Company: szq</p>   * @author baixiaoliang   * @version 1.0  2014-7-14  */public class RulePartMngAction{ 		   private Logger logger = com.org.framework.log.log.getLogger("RulePartMngAction");		   private ActionContext atx = ActionContext.getContext();   private SeBaRulePartDao dao=SeBaRulePartDao.getInstance(atx);  /**   * @auther baixiaoliang   * 三包规则配件新增   * @return void  */    public void insert() throws Exception { 			RequestWrapper request = atx.getRequest();           User user = (User) atx.getSession().get(Globals.USER_KEY);            try            {            SeBaRulePartVO vo = new SeBaRulePartVO();            //SeBaRulePartVO_Ext voExt=new SeBaRulePartVO_Ext();            HashMap<String,String> hm;            hm = RequestUtil.getValues(request);            vo.setValue(hm);            //voExt.setValue(hm);            vo.setCreateUser(user.getAccount());            vo.setCreateTime(Pub.getCurrentDate());            dao.insert(vo);            vo.bindFieldToDic("STATUS","YXBS");            //	voExt.setRelationId(vo.getRelationId());           //voExt.bindFieldToDic("STATUS","YXBS");           //voExt.bindFieldToDic("USER_TYPE","CLYHLX");           //atx.setOutMsg(voExt.getRowXml(),"三包规则配件新增成功！");            atx.setOutMsg(vo.getRowXml(),"三包规则配件新增成功！");       }           catch (Exception e)       {      atx.setException(e);      logger.error(e);       }       } /**   * @auther baixiaoliang   * 三包规则配件新增   * @return void  */    public void update() throws Exception { 			RequestWrapper request = atx.getRequest();           User user = (User) atx.getSession().get(Globals.USER_KEY);            try            {            SeBaRulePartVO vo = new SeBaRulePartVO();            //SeBaRulePartVO_Ext voExt=new SeBaRulePartVO_Ext();            HashMap<String,String> hm;            hm = RequestUtil.getValues(request);            vo.setValue(hm);            //voExt.setValue(hm);            vo.setUpdateUser(user.getAccount());            vo.setUpdateTime(Pub.getCurrentDate());            dao.update(vo);            vo.bindFieldToDic("STATUS","YXBS");            //voExt.setRelationId(vo.getRelationId());           //voExt.bindFieldToDic("STATUS","YXBS");           //voExt.bindFieldToDic("USER_TYPE","CLYHLX");           //atx.setOutMsg(voExt.getRowXml(),"三包规则配件修改成功！");            atx.setOutMsg(vo.getRowXml(),"三包规则配件修改成功！");              LogManager.writeUserLog("","",Globals.OPERATION_TYPE_INSERT,LogManager.RESULT_SUCCESS              , "修改 [" + vo.getRelationId() + " 成功", user);       }           catch (Exception e)       {      atx.setException(e);      logger.error(e);      	LogManager.writeUserLog("", "", Globals.OPERATION_TYPE_INSERT,      	LogManager.RESULT_FAILURE, "三包规则配件失败：" + e.toString(),      user);       }       } /**   * @auther baixiaoliang   * 三包规则配件删除   * @return void  */    public void delete() throws Exception { 			RequestWrapper request = atx.getRequest();            String status = Pub.val(request, "status");            String relationId = Pub.val(request, "relationId");            try            {            if(DicConstant.YXBS_02.equals(status)){              dao.delete(relationId);              atx.setOutMsg("","三包规则配件额删除成功！");              }else{              atx.setOutMsg("","只有无效的才可以进行删除操作！");              }       }           catch (Exception e)       {      atx.setException(e);      logger.error(e);       }       } /**   * @auther baixiaoliang   * 三包规则配件查询   * @return void  */    public void search() throws Exception { 			RequestWrapper request = atx.getRequest();           User user = (User) atx.getSession().get(Globals.USER_KEY); 			PageManager page = new PageManager();           String conditions = RequestUtil.getConditionsWhere(request,page);            try            {         String ruleId=Pub.val(request, "ruleId");  	         BaseResultSet bs = dao.search(page,user,conditions,ruleId);         atx.setOutData("bs", bs);       }           catch (Exception e)       {      atx.setException(e);      logger.error(e);       }       }    /**     * @title: searchPart     * @description: TODO(查询三包规则配件方法)     * @throws Exception    设定文件     * @return void    返回类型     * @auther sunxuedong     * @date 2014年7月5日10:01:43      */    public void searchPart() throws Exception    {	    RequestWrapper request = atx.getRequest();        User user = (User) atx.getSession().get(Globals.USER_KEY);		PageManager page = new PageManager();		String conditions = RequestUtil.getConditionsWhere(request,page);		try		{				String rule_id=Pub.val(request, "ruleId");			BaseResultSet bs = dao.searchPart(page,user,conditions,rule_id);			atx.setOutData("bs", bs);		}		catch (Exception e)		{			logger.error(e);			atx.setException(e);		}	}       /**     * 新增活动配件     *     * @throws Exception     */    public void insertParts() throws Exception {            //获取封装后的request对象                                  RequestWrapper request = atx.getRequest();            //获取封装后的response对象            //ResponseWrapper response = atx.getResponse();            //获取当前登录user对象            User user = (User) atx.getSession().get(Globals.USER_KEY);            try {                HashMap<String, String> hm;                //将request流转换为hashmap结构体                hm = RequestUtil.getValues(request);                String ruleId=hm.get("RULE_ID");    			String ruleCode=hm.get("RULE_CODE");    			String ruleName=hm.get("RULE_NAME");                String partIds = hm.get("PARTIDS");//配件ID(逗号分隔)                String partCodes = hm.get("PARTCODES");//配件代码(逗号分隔)                String partNames = hm.get("PARTNAMES");//配件名称(逗号分隔)                String monthss = hm.get("MONTHS");                String mileage = hm.get("MILEAGES");                String[] partIdArr = partIds.split(",");                String[] partCodeArr = partCodes.split(",");                String[] partNameArr = partNames.split(",");                String[] monthsArr= monthss.split(",");                String [] mileageArr=mileage.split(",");                for (int i = 0; i < partIdArr.length; i++) {                	SeBaRulePartVO vo = new SeBaRulePartVO();                    vo.setRuleId(ruleId);                    vo.setRuleCode(ruleCode);                    vo.setRuleName(ruleName);                    vo.setPartId(partIdArr[i]);                    vo.setPartCode(partCodeArr[i]);                    vo.setPartName(partNameArr[i]);                    vo.setMonths(monthsArr[i]);                    vo.setMileage(mileageArr[i]);                    vo.setCreateTime(Pub.getCurrentDate());                    vo.setCreateUser(user.getAccount());                    dao.insertParts(vo);                }                //返回插入结果和成功信息                atx.setOutMsg("", "新增成功！");            } catch (Exception e) {                atx.setException(e);                logger.error(e);            }        }           /**             * @title: searchServiceParts     * @description: TODO(查询配件)     * @throws Exception    设定文件     * @return void    返回类型     * @auther sunxuedong     * @date 2014年7月3日09:05:00     */    public void searchServiceParts() throws Exception    {	    RequestWrapper request = atx.getRequest();        User user = (User) atx.getSession().get(Globals.USER_KEY);		PageManager page = new PageManager();		String conditions = RequestUtil.getConditionsWhere(request,page);		try		{				String ruleId=Pub.val(request, "ruleId");			BaseResultSet bs = dao.searchServiceParts(page,user,conditions,ruleId);			atx.setOutData("bs", bs);		}		catch (Exception e)		{			logger.error(e);			atx.setException(e);		}	}    /**   * @auther baixiaoliang   * 三包规则配件删除   * @return void  */    public void resetStatus() throws Exception { 			RequestWrapper request = atx.getRequest(); 		User user = (User) atx.getSession().get(Globals.USER_KEY);            String status = Pub.val(request, "status");            String relationId = Pub.val(request, "relationId");            try            {            SeBaRulePartVO vo = new SeBaRulePartVO();             vo.setRelationId(relationId);             vo.setUpdateUser(user.getAccount());             	vo.setUpdateTime(Pub.getCurrentDate());            	vo.setStatus(status);             dao.update(vo);              atx.setOutMsg("","三包规则配件删除成功！");       }           catch (Exception e)       {      atx.setException(e);      logger.error(e);       }       }    /**     * 删除三包规则part     * @throws Exception           */    public void deleteRulePart() throws Exception    {    	RequestWrapper request = atx.getRequest();    	    	try    	{    		String mxids=Pub.val(request, "mxids");    		dao.deleteRulePart(mxids);    		atx.setOutMsg("","三包规则part删除成功！");    	}    	catch (Exception e)    	{    		atx.setException(e);    		logger.error(e);    	}    }         /**     * 三包规则配导入临时表查询     * @throws Exception     * Author suoxiuli 2014-07-25     */    public void searchImport() throws Exception    {		// 定义request对象		User user = (User) atx.getSession().get(Globals.USER_KEY);		PageManager page = new PageManager();		RequestWrapper request = atx.getRequest();		try {			String conditions = RequestUtil.getConditionsWhere(request,page);			BaseResultSet bs = dao.searchTmpImportBs(page, user,conditions);			atx.setOutData("bs", bs);		} catch (Exception e) {			logger.error(e);			atx.setException(e);		}	}        /**	 * 	 * @date()2014年8月27日	 * @author Administrator	 * @to_do:主车厂安全库存导入校验方法：临时表数据校验	 * @param user	 * @param bParams	 * @return	 * @throws Exception	 */    public List<ExcelErrors> checkData()throws Exception{    	User user = (User) atx.getSession().get(Globals.USER_KEY);    	//根据CODE关联后更新中间临时表		dao.merge(user);    	ExcelErrors errors = null;		List<ExcelErrors> errorList = new LinkedList<ExcelErrors>();		QuerySet qs = dao.searchTmpInfoQs(user);//查询此用户下的所有安全库存临时表信息		if(qs.getRowCount()>0){			for(int i=0;i<qs.getRowCount();i++){				errors=new ExcelErrors();				String p="^(0|[1-9][0-9]*)$";//校验钱				String rowNum = qs.getString(i+1, "ROW_NUM"); //行号				String ruleId = qs.getString(i+1, "RULE_ID"); //规则主键				String ruleCode = qs.getString(i+1,"RULE_CODE");//规则代码				String ruleName = qs.getString(i+1,"RULE_NAME");//规则名称	    		String partId = qs.getString(i+1,"PART_ID");//配件主键	    		String partCode = qs.getString(i+1,"PART_CODE");//配件代码	    		String partName = qs.getString(i+1,"PART_NAME");//配件名称	    		String months = qs.getString(i+1,"MONTHS");//月份	    		String mileage = qs.getString(i+1,"MILEAGE");//月份				/*	    		//规则主键	    		if(null==ruleId || "".equals(ruleId)){					errors.setRowNum(Integer.parseInt(rowNum));                    errors.setErrorDesc("规则主键不能为空!");                    errorList.add(errors);                }*/	    		/**	    		if(null!=ruleId && !"".equals(ruleId)){	    			if(!ruleId.matches(p)){						errors.setRowNum(Integer.parseInt(rowNum));	                    errors.setErrorDesc("请输入正确的规则主键!");	                    errorList.add(errors);	    			}                }*/								//规则代码				if(null==ruleCode || "".equals(ruleCode)){					errors=new ExcelErrors();					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("规则代码不能为空!");                    errorList.add(errors);                }								/*//规则名称				if(null==ruleName || "".equals(ruleName)){					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("规则名称不能为空!");                    errorList.add(errors);                }*/								/*//配件主键	    		if(null==partId || "".equals(partId)){					errors.setRowNum(Integer.parseInt(rowNum));                    errors.setErrorDesc("配件主键不能为空!");                    errorList.add(errors);                }*/					    		/*if(null!=partId && !"".equals(partId)){	    			if(!partId.matches(p)){						errors.setRowNum(Integer.parseInt(rowNum));	                    errors.setErrorDesc("请输入正确的配件主键!");	                    errorList.add(errors);	    			}                }*/	    						//配件代码				if(null==partCode || "".equals(partCode)){					errors=new ExcelErrors();					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("配件代码不能为空!");                    errorList.add(errors);                }								/*//配件名称				if(null==partName || "".equals(partName)){					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("配件名称不能为空!");                    errorList.add(errors);                }*/								//月份				if(null==months || "".equals(months)){					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("月份不能为空!");                    errorList.add(errors);                }				if(null!=months && !"".equals(months)){	    			if(!months.matches(p)){						errors.setRowNum(Integer.parseInt(rowNum));	                    errors.setErrorDesc("月份是>=0的数字!");	                    errorList.add(errors);	    			}                }								//里程				if(null==mileage || "".equals(mileage)){					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("配件里程不能为空!");                    errorList.add(errors);                }				if(null!=mileage && !"".equals(mileage)){	    			if(!mileage.matches(p)){						errors.setRowNum(Integer.parseInt(rowNum));	                    errors.setErrorDesc("里程是>=0的数字!");	                    errorList.add(errors);	    			}                }			}						//3、重复数据校验，临时表中存在相同的仓库代码和配件代码信息，则必须删除一个			QuerySet qs2 = dao.searchData(user, "", ""); 			if(qs2.getRowCount() > 0)			{				for(int j=0; j<qs2.getRowCount(); j++){					String ruleCode = qs2.getString(j+1, "RULE_CODE");					String partCode = qs2.getString(j+1, "PART_CODE");					String errorStr = "";					QuerySet qs3 = dao.searchData(user, ruleCode,partCode);					for(int k=0; k<qs3.getRowCount(); k++){						String rowNum3 = qs3.getString(k+1, "ROW_NUM"); //行号												errors=new ExcelErrors();						errors.setRowNum(Integer.parseInt(rowNum3));						if (k != (qs3.getRowCount() -1)) {							errors.setErrorDesc("此三包规则的配件重复数据!");							errorList.add(errors);						}	                    						errorStr = errorStr + rowNum3 + ",";					}										errorStr = errorStr.substring(0, errorStr.length()-1);//删除最后一个","号					errorStr = "此三包规则的配件是重复数据，重复行是("+errorStr+")！";										//添加错误描述					//errors=new ExcelErrors();					errors.setErrorDesc(errorStr);					errorList.add(errors);				}			}		}				if(errorList!=null && errorList.size()>0){			return errorList;		}else{			return null;		}    }		/**     * 导入确定按钮：把临时表的数据放入到主表     * @throws Exception     */    public void ruleImport()throws Exception{    	User user = (User) atx.getSession().get(Globals.USER_KEY); 		try 		{ 			//更新 		    QuerySet qs = dao.searchTmpInfoQs(user); 		    if(qs.getRowCount() > 0 ){ 		    	for(int i=0;i<qs.getRowCount();i++){ 		    		String tmpId = qs.getString(i+1, "TMP_ID"); //行号 					String ruleId = qs.getString(i+1, "RULE_ID"); //规则主键 					String ruleCode = qs.getString(i+1,"RULE_CODE");//规则代码 					String ruleName = qs.getString(i+1,"RULE_NAME");//规则名称 		    		String partId = qs.getString(i+1,"PART_ID");//配件主键 		    		String partCode = qs.getString(i+1,"PART_CODE");//配件代码 		    		String partName = qs.getString(i+1,"PART_NAME");//配件名称 		    		String months = qs.getString(i+1,"MONTHS");//月份 		    		String mileage = qs.getString(i+1,"MILEAGE");//里程 		    		String createUser = qs.getString(i+1,"USER_ACCOUNT");//创建人 		    		 		    		//主表VO 		    		SeBaRulePartVO vo=new SeBaRulePartVO(); 		    		//vo.setSaftyId(tmpId);		    	 		    		 		           vo.setRuleId(ruleId);                   vo.setRuleCode(ruleCode);                   vo.setRuleName(ruleName);                 	vo.setPartId(partId);		    		vo.setPartCode(partCode);		    		vo.setPartName(partName);                   vo.setMonths(months);                   vo.setMileage(mileage); 		    		vo.setCreateUser(createUser); 		    		vo.setCreateTime(Pub.getCurrentDate()); 		    		vo.setStatus("100201"); 		    		dao.insert(vo); 		    	} 		    } 		     			atx.setOutMsg("", "导入成功！"); 		} 		catch (Exception e) 		{ 			logger.error(e); 			atx.setException(e); 		}    }        /**	 * 导入确定按钮：把临时表的数据放入到主表	 * 	 * @throws Exception	 */	public void insertImport() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		try {			String errorInfoRowNum = Pub.val(request, "errorDataRowNum");			dao.insertTmpInfs(user,errorInfoRowNum);			atx.setOutMsg("", "导入成功！");		} catch (Exception e) {			logger.error(e);			atx.setException(e);		}	}     /**	 * 导出表数据	 * 	 * @throws Exception	 */	public void download() throws Exception {		// 定义request对象		ResponseWrapper response = atx.getResponse();		RequestWrapper request = atx.getRequest();		PageManager page = new PageManager();		String conditions = RequestUtil.getConditionsWhere(request, page);		try {			List<HeaderBean> header = new ArrayList<HeaderBean>();			HeaderBean hBean = null;			hBean = new HeaderBean();    		hBean.setName("ROWNUM");    		hBean.setTitle("序号");    		header.add(0,hBean);					hBean = new HeaderBean();			hBean.setName("RULE_CODE");			hBean.setTitle("规则代码");			header.add(1, hBean);			hBean = new HeaderBean();			hBean.setName("RULE_NAME");			hBean.setTitle("规则名称");			header.add(2, hBean);			hBean = new HeaderBean();			hBean.setName("PART_CODE");			hBean.setTitle("配件代码");			header.add(3, hBean);			hBean = new HeaderBean();			hBean.setName("PART_NAME");			hBean.setTitle("配件名称");			header.add(4, hBean);			hBean = new HeaderBean();			hBean.setName("MONTHS");			hBean.setTitle("月份");			header.add(5, hBean);			hBean = new HeaderBean();			hBean.setName("MILEAGE");			hBean.setTitle("里程");			header.add(6, hBean);					/*	 hBean = new HeaderBean();			 hBean.setName("STATUS_NA");			 hBean.setTitle("状态"); 			 header.add(7, hBean);*/			 			QuerySet querySet = dao.download(conditions);			ExportManager.exportFile(response.getHttpResponse(), "配件三包规则",					header, querySet);		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}		 /**     * 导出错误数据按钮：把临时表的错误数据导出到EXCEL     * @throws Exception     * Author suoxiuli 2014-11-5     */    public void expTmpErrorData()throws Exception{    	    	//获取封装后的request对象    	RequestWrapper request = atx.getRequest();    	User user = (User) atx.getSession().get(Globals.USER_KEY);    	// 将request流中的信息转化为where条件        String conditions = Pub.val(request, "errorDataRowNum");   	 	// 定义response对象        ResponseWrapper responseWrapper= atx.getResponse();        try {        	            List<HeaderBean> header = new ArrayList<HeaderBean>();            HeaderBean hBean = null;            hBean = new HeaderBean();    		hBean.setName("ROW_NUM");    		hBean.setTitle("导入数据EXCEL行号");    		header.add(0,hBean);    		hBean = new HeaderBean();			hBean.setName("RULE_CODE");			hBean.setTitle("规则代码");			header.add(1, hBean);			hBean = new HeaderBean();			hBean.setName("RULE_NAME");			hBean.setTitle("规则名称");			header.add(2, hBean);			hBean = new HeaderBean();			hBean.setName("PART_CODE");			hBean.setTitle("配件代码");			header.add(3, hBean);			hBean = new HeaderBean();			hBean.setName("PART_NAME");			hBean.setTitle("配件名称");			header.add(4, hBean);			hBean = new HeaderBean();			hBean.setName("MONTHS");			hBean.setTitle("月份");			header.add(5, hBean);			hBean = new HeaderBean();			hBean.setName("MILEAGE");			hBean.setTitle("里程");			header.add(6, hBean);            QuerySet querySet = dao.expTmpErrorData(conditions,user);            ExportManager.exportFile(responseWrapper.getHttpResponse(), "配件三包规则", header, querySet);        } catch (Exception e) {        	atx.setException(e);            logger.error(e);        }    }}
