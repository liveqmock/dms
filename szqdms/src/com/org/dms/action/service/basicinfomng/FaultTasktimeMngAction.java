package com.org.dms.action.service.basicinfomng;import com.org.dms.vo.service.SeBaFaultTasktimeVO;import com.org.dms.dao.service.basicinfomng.SeBaFaultTasktimeDao;import java.util.ArrayList;import java.util.HashMap;import java.util.LinkedList;import java.util.List;import org.apache.log4j.Logger;import com.org.dms.common.DicConstant;import com.org.framework.Globals;import com.org.framework.common.User;import com.org.mvc.context.ActionContext;import com.org.mvc.context.ResponseWrapper;import com.org.framework.common.BaseResultSet;import com.org.framework.common.PageManager;import com.org.framework.common.QuerySet;import com.org.framework.fileimport.ExcelErrors;import com.org.framework.fileimport.ExportManager;import com.org.framework.fileimport.HeaderBean;import com.org.framework.log.LogManager;import com.org.framework.util.Pub;import com.org.framework.util.RequestUtil;import com.org.mvc.context.RequestWrapper;/** * 故障模式与工时关系 * <p> * Company: szq * </p> *  * @author baixiaoliang * @version 1.0 2014-7-14 */public class FaultTasktimeMngAction {	private Logger logger = com.org.framework.log.log			.getLogger("FaultTasktimeMngAction");	private ActionContext atx = ActionContext.getContext();	private SeBaFaultTasktimeDao dao = SeBaFaultTasktimeDao.getInstance(atx);	/**	 * @auther baixiaoliang 故障模式与工时关系新增	 * @return void	 */	public void insert() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		try {			SeBaFaultTasktimeVO vo = new SeBaFaultTasktimeVO();			// SeBaFaultTasktimeVO_Ext voExt=new SeBaFaultTasktimeVO_Ext();			HashMap<String, String> hm;			hm = RequestUtil.getValues(request);			vo.setValue(hm);			/*			 * //判断是否已存在 QuerySet qs = dao.check(vo.getRelationId());			 * if(qs.getRowCount() > 0) { String n = qs.getString(1, 1);			 * if(Integer.parseInt(n) > 0) { throw new			 * Exception("故障模式与工时关系已存在，保存失败！"); } }			 */			// voExt.setValue(hm);			vo.setCreateUser(user.getAccount());			vo.setCreateTime(Pub.getCurrentDate());			dao.insert(vo);			// voExt.setRelationId(vo.getRelationId());			// voExt.bindFieldToDic("STATUS","YXBS");			// voExt.bindFieldToDic("USER_TYPE","CLYHLX");			// atx.setOutMsg(voExt.getRowXml(),"故障模式与工时关系新增成功！");			atx.setOutMsg(vo.getRowXml(), "故障模式与工时关系新增成功！");		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}	/**	 * @auther baixiaoliang 故障模式与工时关系新增	 * @return void	 */	public void update() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		try {			SeBaFaultTasktimeVO vo = new SeBaFaultTasktimeVO();			// SeBaFaultTasktimeVO_Ext voExt=new SeBaFaultTasktimeVO_Ext();			HashMap<String, String> hm;			hm = RequestUtil.getValues(request);			vo.setValue(hm);			// voExt.setValue(hm);			vo.setUpdateUser(user.getAccount());			vo.setUpdateTime(Pub.getCurrentDate());			dao.update(vo);			// voExt.setRelationId(vo.getRelationId());			// voExt.bindFieldToDic("STATUS","YXBS");			// voExt.bindFieldToDic("USER_TYPE","CLYHLX");			// atx.setOutMsg(voExt.getRowXml(),"故障模式与工时关系修改成功！");			atx.setOutMsg(vo.getRowXml(), "故障模式与工时关系修改成功！");			// 日志			LogManager.writeUserLog("", "", Globals.OPERATION_TYPE_INSERT,					LogManager.RESULT_SUCCESS,					"故障模式与工时关系 [" + vo.getRelationId() + " / " + "] 成功", user);		} catch (Exception e) {			atx.setException(e);			logger.error(e);			// 日志			LogManager.writeUserLog("", "", Globals.OPERATION_TYPE_INSERT,					LogManager.RESULT_FAILURE, "故障模式与工时关系失败：" + e.toString(),					user);		}	}	/**	 * @auther baixiaoliang 故障模式与工时关系删除	 * @return void	 */	public void delete() throws Exception {		RequestWrapper request = atx.getRequest();		String status = Pub.val(request, "status");		String relationId = Pub.val(request, "relationId");		try {			if (DicConstant.YXBS_02.equals(status)) {				dao.delete(relationId);				atx.setOutMsg("", "故障模式与工时关系额删除成功！");			} else {				atx.setOutMsg("", "只有无效的才可以进行删除操作！");			}		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}	/**	 * @auther baixiaoliang 故障模式与工时关系查询	 * @return void	 */	public void search() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		PageManager page = new PageManager();		String conditions = RequestUtil.getConditionsWhere(request, page);		try {			HashMap<String, String> hm;			hm = RequestUtil.getValues(request);			String partCode = hm.get("PART_CODE");			String partName = hm.get("PART_NAME");			BaseResultSet bs = dao.search(page, user, conditions, partCode, partName);			atx.setOutData("bs", bs);		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}	/**	 * @auther baixiaoliang 故障模式与工时关系删除	 * @return void	 */	public void resetStatus() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		String status = Pub.val(request, "status");		String relationId = Pub.val(request, "relationId");		try {			SeBaFaultTasktimeVO vo = new SeBaFaultTasktimeVO();			vo.setRelationId(relationId);			vo.setUpdateUser(user.getAccount());			vo.setUpdateTime(Pub.getCurrentDate());			vo.setStatus(status);			dao.update(vo);			atx.setOutMsg(vo.getRowXml(), "故障模式与工时关系删除成功！");		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}	/**	 * 故障模式与工时关系配导入临时表查询	 * 	 * @throws Exception	 *             Author baixiaoliang 2014-07-25	 */	public void searchImport() throws Exception {		// 定义request对象		User user = (User) atx.getSession().get(Globals.USER_KEY);		PageManager page = new PageManager();		RequestWrapper request = atx.getRequest();		try {			String conditions = RequestUtil.getConditionsWhere(request,page);			BaseResultSet bs = dao.searchTmpImportBs(page, user,conditions);			atx.setOutData("bs", bs);		} catch (Exception e) {			logger.error(e);			atx.setException(e);		}	}	/**	 * 	 * @date()2014年8月27日	 * @author Administrator	 * @to_do:主车厂故障模式与工时关系导入校验方法：临时表数据校验	 * @param user	 * @param bParams	 * @return	 * @throws Exception	 */	public List<ExcelErrors> checkData() throws Exception {		User user = (User) atx.getSession().get(Globals.USER_KEY);		ExcelErrors errors = null;		List<ExcelErrors> errorList = new LinkedList<ExcelErrors>();/*		//1、重复数据校验，临时表中,则必须删除一个		QuerySet qs2 = dao.searchData(user); 		if(qs2.getRowCount() > 1)		{			String errorStr = "";			for(int j=0; j<qs2.getRowCount(); j++){				String rowNum2 = qs2.getString(j+1, "ROW_NUM"); //行号				errorStr = errorStr + rowNum2 + "行,";			}			errorStr = errorStr.substring(0, errorStr.length()-1);//删除最后一个","号			errorStr = errorStr + "重复，请删除重复数据！";						errors=new ExcelErrors();			//添加错误描述			errors.setErrorDesc(errorStr);			errorList.add(errors);			if (errorList != null && errorList.size() > 0) {				return errorList;			} else {				return null;			}		}*/		//根据CODE关联后更新中间临时表		dao.merge(user);		QuerySet qs = dao.searchTmpInfoQs(user);// 查询此用户下的所有故障模式与工时关系临时表信息		if (qs.getRowCount() > 0) {			for (int i = 0; i < qs.getRowCount(); i++) {				errors = new ExcelErrors();				String p = "^(0|[1-9][0-9]*)$";// 校验钱				String amountId = qs.getString(i + 1, "AMOUNT_ID");				String companyId = qs.getString(i + 1, "COMPANY_ID");				String createTime = qs.getString(i + 1, "CREATE_TIME");				String createUser = qs.getString(i + 1, "CREATE_USER");				String faultPatternCode = qs.getString(i + 1,						"FAULT_PATTERN_CODE");				String faultPatternName = qs.getString(i + 1,						"FAULT_PATTERN_NAME");				String oemCompanyId = qs.getString(i + 1, "OEM_COMPANY_ID");				String orgId = qs.getString(i + 1, "ORG_ID");				String patternId = qs.getString(i + 1, "PATTERN_ID");				String rowNum = qs.getString(i + 1, "ROW_NUM");				String secretLevel = qs.getString(i + 1, "SECRET_LEVEL");				String status = qs.getString(i + 1, "STATUS");				String timeCode = qs.getString(i + 1, "TIME_CODE");				String timeName = qs.getString(i + 1, "TIME_NAME");				String tmpId = qs.getString(i + 1, "TMP_ID");				String updateTime = qs.getString(i + 1, "UPDATE_TIME");				String updateUser = qs.getString(i + 1, "UPDATE_USER");				String userAccount = qs.getString(i + 1, "USER_ACCOUNT");				// 服务商代码				if (null == timeCode || "".equals(timeCode)) {					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("工时代码不能为空!");					errorList.add(errors);				}			}						//3、重复数据校验，临时表中存在相同的仓库代码和配件代码信息，则必须删除一个			QuerySet qs2 = dao.searchData(user, "",""); 			if(qs2.getRowCount() > 0)			{				for(int j=0; j<qs2.getRowCount(); j++){					String faultPatternCode= qs2.getString(j+1, "FAULT_PATTERN_CODE");					String timeCode = qs2.getString(j+1, "TIME_CODE");					String errorStr = "";					QuerySet qs3 = dao.searchData(user, faultPatternCode,timeCode);					for(int k=0; k<qs3.getRowCount(); k++){						String rowNum3 = qs3.getString(k+1, "ROW_NUM"); //行号												errors=new ExcelErrors();						errors.setRowNum(Integer.parseInt(rowNum3));						if (k != (qs3.getRowCount() -1)) {							errors.setErrorDesc("故障模式与工时是重复数据!");							errorList.add(errors);						}	                    						errorStr = errorStr + rowNum3 + ",";					}										errorStr = errorStr.substring(0, errorStr.length()-1);//删除最后一个","号					errorStr = "故障模式与工时是重复数据，重复行是("+errorStr+")！";										//添加错误描述					//errors=new ExcelErrors();					errors.setErrorDesc(errorStr);					errorList.add(errors);				}			}		}		if (errorList != null && errorList.size() > 0) {			return errorList;		} else {			return null;		}	}	/**	 * 导入确定按钮：把临时表的数据放入到主表	 * 	 * @throws Exception	 */	public void insertImport() throws Exception {		User user = (User) atx.getSession().get(Globals.USER_KEY);		try {			RequestWrapper request = atx.getRequest();			String errorInfoRowNum = Pub.val(request, "errorDataRowNum");			dao.insertTmpInfs(user,errorInfoRowNum);			atx.setOutMsg("", "导入成功！");		} catch (Exception e) {			logger.error(e);			atx.setException(e);		}	}	/**	 * 导出表数据	 * 	 * @throws Exception	 */	public void download() throws Exception {		// 定义request对象		ResponseWrapper response = atx.getResponse();		RequestWrapper request = atx.getRequest();		PageManager page = new PageManager();		String conditions = RequestUtil.getConditionsWhere(request, page);		try {			List<HeaderBean> header = new ArrayList<HeaderBean>();			HeaderBean hBean = null;			hBean = new HeaderBean();    		hBean.setName("ROWNUM");    		hBean.setTitle("序号");    		header.add(0,hBean);			hBean = new HeaderBean();			hBean.setName("FAULT_PATTERN_CODE");			hBean.setTitle("故障模式代码");			header.add(1, hBean);			hBean = new HeaderBean();			hBean.setName("FAULT_PATTERN_NAME");			hBean.setTitle("故障模式名称");			header.add(2, hBean);			hBean = new HeaderBean();			hBean.setName("TIME_CODE");			hBean.setTitle("工时代码");			header.add(3, hBean);			hBean = new HeaderBean();			hBean.setName("TIME_NAME");			hBean.setTitle("工时名称");			header.add(4, hBean);			hBean = new HeaderBean();			hBean.setName("STATUS_NA");			hBean.setTitle("状态");			header.add(5, hBean);			/*			 * hBean = new HeaderBean(); hBean.setName("STATUS_NA");			 * hBean.setTitle("状态"); header.add(9, hBean);			 */			HashMap<String, String> hm;			hm = RequestUtil.getValues(request);			String partCode = hm.get("PART_CODE");			String partName = hm.get("PART_NAME");			QuerySet querySet = dao.download(conditions, partCode, partName);			ExportManager.exportFile(response.getHttpResponse(), "故障模式和工时定额关系",					header, querySet);		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}	 /**     * 导出错误数据按钮：把临时表的错误数据导出到EXCEL     * @throws Exception     * Author suoxiuli 2014-11-5     */    public void expTmpErrorData()throws Exception{    	    	//获取封装后的request对象    	RequestWrapper request = atx.getRequest();    	User user = (User) atx.getSession().get(Globals.USER_KEY);    	// 将request流中的信息转化为where条件        String conditions = Pub.val(request, "errorDataRowNum");   	 // 定义response对象        ResponseWrapper responseWrapper= atx.getResponse();        try {        	            List<HeaderBean> header = new ArrayList<HeaderBean>();            HeaderBean hBean = null;            hBean = new HeaderBean();    		hBean.setName("ROW_NUM");    		hBean.setTitle("导入数据EXCEL行号");    		header.add(0,hBean);    		hBean = new HeaderBean();			hBean.setName("FAULT_PATTERN_CODE");			hBean.setTitle("故障模式代码");			header.add(1, hBean);			hBean = new HeaderBean();			hBean.setName("FAULT_PATTERN_NAME");			hBean.setTitle("故障模式名称");			header.add(2, hBean);			hBean = new HeaderBean();			hBean.setName("TIME_CODE");			hBean.setTitle("工时代码");			header.add(3, hBean);			hBean = new HeaderBean();			hBean.setName("TIME_NAME");			hBean.setTitle("工时名称");			header.add(4, hBean);			hBean = new HeaderBean();			hBean.setName("STATUS_NA");			hBean.setTitle("状态");			header.add(5, hBean);            QuerySet querySet = dao.expTmpErrorData(conditions,user);            ExportManager.exportFile(responseWrapper.getHttpResponse(), "工时单价", header, querySet);        } catch (Exception e) {        	atx.setException(e);            logger.error(e);        }    }    /**     * 历史维修信息列表（单车）     * @throws Exception     * Author suoxiuli 2014-11-5     */    public void ccVehicleDownload()throws Exception{    	    	//获取封装后的request对象    	RequestWrapper request = atx.getRequest();    	User user = (User) atx.getSession().get(Globals.USER_KEY);    	// 将request流中的信息转化为where条件    	PageManager page = new PageManager();    	String conditions = RequestUtil.getConditionsWhere(request,page);    	// 定义response对象    	ResponseWrapper responseWrapper= atx.getResponse();    	try {    		    		List<HeaderBean> header = new ArrayList<HeaderBean>();    		HeaderBean hBean = null;    		    		hBean = new HeaderBean();    		hBean.setName("OLD_PART_CODE");    		hBean.setTitle("配件代码");    		header.add(0,hBean);    		    		hBean = new HeaderBean();    		hBean.setName("OLD_PART_NAME");    		hBean.setTitle("配件名称");    		header.add(1, hBean);    		    		hBean = new HeaderBean();    		hBean.setName("MEASURES");    		hBean.setTitle("处理措施");    		header.add(2, hBean);    		    		hBean = new HeaderBean();    		hBean.setName("OLD_SUP_NAME");    		hBean.setTitle("旧件供应商");    		header.add(3, hBean);    		    		hBean = new HeaderBean();    		hBean.setName("NEW_SUP_NAME");    		hBean.setTitle("新件供应商");    		header.add(4, hBean);    		    		hBean = new HeaderBean();    		hBean.setName("MILEAGE");    		hBean.setTitle("行驶里程");    		header.add(5, hBean);    		    		hBean = new HeaderBean();    		hBean.setName("FAULT_DATE");    		hBean.setTitle("故障时间");    		header.add(6, hBean);    		    		hBean = new HeaderBean();    		hBean.setName("REPAIR_DATE");    		hBean.setTitle("检修时间");    		header.add(7, hBean);    		    		hBean = new HeaderBean();    		hBean.setName("ONAME");    		hBean.setTitle("服务站");    		header.add(8, hBean);    		    		hBean = new HeaderBean();    		hBean.setName("CLAIM_NO");    		hBean.setTitle("索赔单号");    		header.add(9, hBean);    		    		hBean = new HeaderBean();    		hBean.setName("WXCS");    		hBean.setTitle("维修次数");    		header.add(10, hBean);    		    		QuerySet querySet = dao.ccVehicleDownload(conditions);    		ExportManager.exportFile(responseWrapper.getHttpResponse(), "历史维修信息列表（单车）", header, querySet);    	} catch (Exception e) {    		atx.setException(e);    		logger.error(e);    	}    }	/**	 * @auther sxd	 * @return void	 */	public void partSearch() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		PageManager page = new PageManager();		String conditions = RequestUtil.getConditionsWhere(request, page);		try {			BaseResultSet bs = dao.searchPart(page, user, conditions);			atx.setOutData("bs", bs);		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}	/**	 * @auther sxd	 * @return void	 */	public void vehicleSearch() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		PageManager page = new PageManager();		String conditions = RequestUtil.getConditionsWhere(request, page);		try {			BaseResultSet bs = dao.vehicleSearch(page, user, conditions);			atx.setOutData("bs", bs);		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}	/**	 * @auther sxd	 * @return void	 */	public void bscVehicleSearch() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		PageManager page = new PageManager();		String conditions = RequestUtil.getConditionsWhere(request, page);		try {			BaseResultSet bs = dao.bscVehicleSearch(page, user, conditions);			atx.setOutData("bs", bs);		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}	/**	 * @auther sxd	 * @return void	 */	public void ccVehicleSearch() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		PageManager page = new PageManager();		String conditions = RequestUtil.getConditionsWhere(request, page);		try {			BaseResultSet bs = dao.ccVehicleSearch(page, user, conditions);			atx.setOutData("bs", bs);		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}	/**	 * @auther sxd	 * @return void	 */	public void ccVehicleReportSearch() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		PageManager page = new PageManager();		String conditions = RequestUtil.getConditionsWhere(request, page);		try {			BaseResultSet bs = dao.ccVehicleReportSearch(page, user, conditions);			atx.setOutData("bs", bs);		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}	/**	 * @auther sxd	 * @return void	 */	public void claimSearch() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		PageManager page = new PageManager();		String conditions = RequestUtil.getConditionsWhere(request, page);		try {			BaseResultSet bs = dao.claimSearch(page, user, conditions);			atx.setOutData("bs", bs);		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}}