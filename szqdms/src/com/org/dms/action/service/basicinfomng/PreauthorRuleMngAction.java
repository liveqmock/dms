package com.org.dms.action.service.basicinfomng;import com.org.dms.vo.service.SeBaPreauthorRuleDtlVO;import com.org.dms.vo.service.SeBaPreauthorRuleVO;import com.org.dms.dao.service.basicinfomng.SeBaPreauthorRuleDao;import java.util.HashMap;import org.apache.log4j.Logger;import com.org.dms.common.DicConstant;import com.org.framework.Globals;import com.org.framework.common.User;import com.org.mvc.context.ActionContext;import com.org.framework.common.BaseResultSet;import com.org.framework.common.PageManager;import com.org.framework.common.QuerySet;import com.org.framework.util.Pub;import com.org.framework.util.RequestUtil;import com.org.mvc.context.RequestWrapper;import com.org.framework.log.LogManager;; /**   * 预授权规则   * <p>Company: szq</p>   * @author baixiaoliang   * @version 1.0  2014-7-14  */public class PreauthorRuleMngAction{ 		   private Logger logger = com.org.framework.log.log.getLogger("PreauthorRuleMngAction");		   private ActionContext atx = ActionContext.getContext();   private SeBaPreauthorRuleDao dao=SeBaPreauthorRuleDao.getInstance(atx);  /**   * @auther baixiaoliang   * 预授权规则新增   * @return void  */    public void insert() throws Exception { 			RequestWrapper request = atx.getRequest();           User user = (User) atx.getSession().get(Globals.USER_KEY);            try            {            SeBaPreauthorRuleVO vo = new SeBaPreauthorRuleVO();            //SeBaPreauthorRuleVO_Ext voExt=new SeBaPreauthorRuleVO_Ext();            HashMap<String,String> hm;            hm = RequestUtil.getValues(request);            vo.setValue(hm);   /*      	//判断是否已存在			QuerySet qs = dao.check(vo.getRuleId());			if(qs.getRowCount() > 0)			{				String n = qs.getString(1, 1);				if(Integer.parseInt(n) > 0)				{					throw new Exception("预授权规则已存在，保存失败！");				}			}*/            //voExt.setValue(hm);            vo.setCreateUser(user.getAccount());            vo.setCreateTime(Pub.getCurrentDate());            dao.insert(vo);            vo.bindFieldToDic("STATUS","YXBS");            //	voExt.setRuleId(vo.getRuleId());           //voExt.bindFieldToDic("STATUS","YXBS");           //voExt.bindFieldToDic("USER_TYPE","CLYHLX");           //atx.setOutMsg(voExt.getRowXml(),"预授权规则新增成功！");            atx.setOutMsg(vo.getRowXml(),"预授权规则新增成功！");       }           catch (Exception e)       {      atx.setException(e);      logger.error(e);       }       }    /**     * @auther baixiaoliang     * 预授权规则新增     * @return void    */      public void insertRule() throws Exception {   			RequestWrapper request = atx.getRequest();             User user = (User) atx.getSession().get(Globals.USER_KEY);              try              {              SeBaPreauthorRuleVO vo = new SeBaPreauthorRuleVO();              SeBaPreauthorRuleDtlVO ruleDtlVo=new SeBaPreauthorRuleDtlVO();              //SeBaPreauthorRuleVO_Ext voExt=new SeBaPreauthorRuleVO_Ext();              HashMap<String,String> hm;              hm = RequestUtil.getValues(request);              vo.setValue(hm);              ruleDtlVo.setValue(hm);     /*      	//判断是否已存在  			QuerySet qs = dao.check(vo.getRuleId());  			if(qs.getRowCount() > 0)  			{  				String n = qs.getString(1, 1);  				if(Integer.parseInt(n) > 0)  				{  					throw new Exception("预授权规则已存在，保存失败！");  				}  			}*/              //voExt.setValue(hm);              vo.setCreateUser(user.getAccount());              vo.setCreateTime(Pub.getCurrentDate());              ruleDtlVo.setCreateUser(user.getAccount());              ruleDtlVo.setCreateTime(Pub.getCurrentDate());              dao.insertRule(vo,ruleDtlVo);              vo.bindFieldToDic("STATUS","YXBS");              ruleDtlVo.bindFieldToDic("PREAUTHOR_RELATION", "SQGX");              ruleDtlVo.bindFieldToDic("COMPAR_CHARACTER", "GXFH");              ruleDtlVo.bindFieldToDic("PREAUTHOR_OBJECT", "YSQLX");             // ruleDtlVo.bindFieldToDic("COMPAR_CHARACTER", "YSQBJF");              //	voExt.setRuleId(vo.getRuleId());             //voExt.bindFieldToDic("STATUS","YXBS");             //voExt.bindFieldToDic("USER_TYPE","CLYHLX");             //atx.setOutMsg(voExt.getRowXml(),"预授权规则新增成功！");              atx.setOutMsg(ruleDtlVo.getRowXml(),"预授权规则新增成功！");         }             catch (Exception e)         {        atx.setException(e);        logger.error(e);         }         }         /**       * @auther baixiaoliang       * 预授权明细新增,不增加规则表数据       * @return void      */        public void updateRule() throws Exception {     			RequestWrapper request = atx.getRequest();               User user = (User) atx.getSession().get(Globals.USER_KEY);                try                {                SeBaPreauthorRuleVO vo = new SeBaPreauthorRuleVO();                SeBaPreauthorRuleDtlVO ruleDtlVo=new SeBaPreauthorRuleDtlVO();                //SeBaPreauthorRuleVO_Ext voExt=new SeBaPreauthorRuleVO_Ext();                HashMap<String,String> hm;                hm = RequestUtil.getValues(request);                vo.setValue(hm);                ruleDtlVo.setValue(hm);       /*      	//判断是否已存在    			QuerySet qs = dao.check(vo.getRuleId());    			if(qs.getRowCount() > 0)    			{    				String n = qs.getString(1, 1);    				if(Integer.parseInt(n) > 0)    				{    					throw new Exception("预授权规则已存在，保存失败！");    				}    			}*/                //voExt.setValue(hm);                vo.setCreateUser(user.getAccount());                vo.setCreateTime(Pub.getCurrentDate());                ruleDtlVo.setCreateUser(user.getAccount());                ruleDtlVo.setCreateTime(Pub.getCurrentDate());                dao.updateRule(vo,ruleDtlVo);                vo.bindFieldToDic("STATUS","YXBS");                ruleDtlVo.bindFieldToDic("PREAUTHOR_RELATION", "SQGX");                ruleDtlVo.bindFieldToDic("COMPAR_CHARACTER", "GXFH");                ruleDtlVo.bindFieldToDic("PREAUTHOR_OBJECT", "YSQLX");               // ruleDtlVo.bindFieldToDic("COMPAR_CHARACTER", "YSQBJF");                //	voExt.setRuleId(vo.getRuleId());               //voExt.bindFieldToDic("STATUS","YXBS");               //voExt.bindFieldToDic("USER_TYPE","CLYHLX");               //atx.setOutMsg(voExt.getRowXml(),"预授权规则新增成功！");                atx.setOutMsg(ruleDtlVo.getRowXml(),"预授权规则新增成功！");           }               catch (Exception e)           {          atx.setException(e);          logger.error(e);           }           }      /**   * @auther baixiaoliang   * 预授权规则新增   * @return void  */    public void update() throws Exception { 			RequestWrapper request = atx.getRequest();           User user = (User) atx.getSession().get(Globals.USER_KEY);            try            {            SeBaPreauthorRuleVO vo = new SeBaPreauthorRuleVO();            //SeBaPreauthorRuleVO_Ext voExt=new SeBaPreauthorRuleVO_Ext();            HashMap<String,String> hm;            hm = RequestUtil.getValues(request);            vo.setValue(hm);            //voExt.setValue(hm);            vo.setUpdateUser(user.getAccount());            vo.setUpdateTime(Pub.getCurrentDate());            dao.update(vo);            //voExt.setRuleId(vo.getRuleId());           //voExt.bindFieldToDic("STATUS","YXBS");           //voExt.bindFieldToDic("USER_TYPE","CLYHLX");           //atx.setOutMsg(voExt.getRowXml(),"预授权规则修改成功！");            atx.setOutMsg(vo.getRowXml(),"预授权规则修改成功！");              LogManager.writeUserLog("","",Globals.OPERATION_TYPE_INSERT,LogManager.RESULT_SUCCESS              , "修改 [" + vo.getRuleId() + " 成功", user);       }           catch (Exception e)       {      atx.setException(e);      logger.error(e);      	LogManager.writeUserLog("", "", Globals.OPERATION_TYPE_INSERT,      	LogManager.RESULT_FAILURE, "预授权规则失败：" + e.toString(),      user);       }       } /**   * @auther baixiaoliang   * 预授权规则删除   * @return void  */    public void delete() throws Exception { 			RequestWrapper request = atx.getRequest();            String status = Pub.val(request, "status");            String ruleId = Pub.val(request, "ruleId");            try            {            if(DicConstant.YXBS_02.equals(status)){              dao.delete(ruleId);              atx.setOutMsg("","预授权规则额删除成功！");              }else{              atx.setOutMsg("","只有无效的才可以进行删除操作！");              }       }           catch (Exception e)       {      atx.setException(e);      logger.error(e);       }       } /**   * @auther baixiaoliang   * 预授权规则查询   * @return void  */    public void search() throws Exception { 			RequestWrapper request = atx.getRequest();           User user = (User) atx.getSession().get(Globals.USER_KEY); 			PageManager page = new PageManager();           String conditions = RequestUtil.getConditionsWhere(request,page);            try            {         BaseResultSet bs = dao.search(page,user,conditions);         atx.setOutData("bs", bs);       }           catch (Exception e)       {      atx.setException(e);      logger.error(e);       }       }    /**     * @auther baixiaoliang     * 预授权规则多表关联查询     * @return void    */      public void searchLevelCode() throws Exception {   			RequestWrapper request = atx.getRequest();             User user = (User) atx.getSession().get(Globals.USER_KEY);   			PageManager page = new PageManager();             String conditions = RequestUtil.getConditionsWhere(request,page);              try              {           BaseResultSet bs = dao.searchLevelCode(page,user,conditions);           atx.setOutData("bs", bs);         }             catch (Exception e)         {        atx.setException(e);        logger.error(e);         }         }    /**   * @auther baixiaoliang   * 预授权规则删除   * @return void  */    public void resetStatus() throws Exception { 			RequestWrapper request = atx.getRequest(); 		User user = (User) atx.getSession().get(Globals.USER_KEY);            String status = Pub.val(request, "status");            String ruleId = Pub.val(request, "ruleId");            try            {            SeBaPreauthorRuleVO vo = new SeBaPreauthorRuleVO();             vo.setRuleId(ruleId);             vo.setUpdateUser(user.getAccount());             	vo.setUpdateTime(Pub.getCurrentDate());            	vo.setStatus(status);             dao.update(vo);              atx.setOutMsg("","预授权规则删除成功！");       }           catch (Exception e)       {      atx.setException(e);      logger.error(e);       }       }    /**     * @auther baixiaoliang     * 更新规则名称     * @return void    */      public void updatePreauthoName() throws Exception {   			RequestWrapper request = atx.getRequest();         //     String preauthoName = Pub.val(request, "preauthoName");              String ruleId = Pub.val(request, "rule_id");              SeBaPreauthorRuleVO vo = new SeBaPreauthorRuleVO();              //SeBaPreauthorRuleVO_Ext voExt=new SeBaPreauthorRuleVO_Ext();              HashMap<String,String> hm;              hm = RequestUtil.getValues(request);              vo.setValue(hm);              String preauthoName=vo.getPreauthoName();              try              {                              dao.updatePreauthoName(ruleId,preauthoName);                         }             catch (Exception e)         {        atx.setException(e);        logger.error(e);         }         }}
