package com.org.dms.action.service.basicinfomng;import com.org.dms.vo.service.SeBaExcitationCoefficientVO;import com.org.dms.dao.service.basicinfomng.SeBaExcitationCoefficientDao;import java.util.ArrayList;import java.util.HashMap;import java.util.LinkedList;import java.util.List;import org.apache.log4j.Logger;import com.org.dms.common.DicConstant;import com.org.framework.Globals;import com.org.framework.common.User;import com.org.mvc.context.ActionContext;import com.org.mvc.context.ResponseWrapper;import com.org.framework.common.BaseResultSet;import com.org.framework.common.PageManager;import com.org.framework.common.QuerySet;import com.org.framework.fileimport.ExcelErrors;import com.org.framework.fileimport.ExportManager;import com.org.framework.fileimport.HeaderBean;import com.org.framework.util.Pub;import com.org.framework.util.RequestUtil;import com.org.mvc.context.RequestWrapper;import com.org.framework.log.LogManager;;/** * 服务站激励系数 * <p> * Company: szq * </p> *  * @author baixiaoliang * @version 1.0 2014-7-14 */public class ExcitationCoefficientMngAction {	private Logger logger = com.org.framework.log.log			.getLogger("ExcitationCoefficientMngAction");	private ActionContext atx = ActionContext.getContext();	private SeBaExcitationCoefficientDao dao = SeBaExcitationCoefficientDao			.getInstance(atx);	/**	 * @auther baixiaoliang 服务站激励系数新增	 * @return void	 */	public void insert() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		try {			SeBaExcitationCoefficientVO vo = new SeBaExcitationCoefficientVO();			// SeBaExcitationCoefficientVO_Ext voExt=new			// SeBaExcitationCoefficientVO_Ext();			HashMap<String, String> hm;			hm = RequestUtil.getValues(request);			vo.setValue(hm);			/*			 * //判断是否已存在 QuerySet qs = dao.check(vo.getCoefficientId());			 * if(qs.getRowCount() > 0) { String n = qs.getString(1, 1);			 * if(Integer.parseInt(n) > 0) { throw new			 * Exception("服务站激励系数已存在，保存失败！"); } }			 */			// voExt.setValue(hm);			vo.setCreateUser(user.getAccount());			vo.setCreateTime(Pub.getCurrentDate());			dao.insert(vo);			vo.bindFieldToDic("STATUS", "YXBS");			vo.bindFieldToDic("COEFFICIENT_TYPE", "JLLX");			// voExt.setCoefficientId(vo.getCoefficientId());			// voExt.bindFieldToDic("STATUS","YXBS");			// voExt.bindFieldToDic("USER_TYPE","CLYHLX");			// atx.setOutMsg(voExt.getRowXml(),"服务站激励系数新增成功！");			atx.setOutMsg(vo.getRowXml(), "服务站激励系数新增成功！");		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}	/**	 * @auther baixiaoliang 服务站激励系数新增	 * @return void	 */	public void update() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		try {			SeBaExcitationCoefficientVO vo = new SeBaExcitationCoefficientVO();			// SeBaExcitationCoefficientVO_Ext voExt=new			// SeBaExcitationCoefficientVO_Ext();			HashMap<String, String> hm;			hm = RequestUtil.getValues(request);			vo.setValue(hm);			// voExt.setValue(hm);			vo.setUpdateUser(user.getAccount());			vo.setUpdateTime(Pub.getCurrentDate());			dao.update(vo);			// voExt.setCoefficientId(vo.getCoefficientId());			vo.bindFieldToDic("STATUS", "YXBS");			vo.bindFieldToDic("COEFFICIENT_TYPE", "JLLX");			// voExt.bindFieldToDic("USER_TYPE","CLYHLX");			// atx.setOutMsg(voExt.getRowXml(),"服务站激励系数修改成功！");			atx.setOutMsg(vo.getRowXml(), "服务站激励系数修改成功！");			LogManager.writeUserLog("", "", Globals.OPERATION_TYPE_INSERT,					LogManager.RESULT_SUCCESS, "修改 [" + vo.getCoefficientId()							+ " 成功", user);		} catch (Exception e) {			atx.setException(e);			logger.error(e);			LogManager.writeUserLog("", "", Globals.OPERATION_TYPE_INSERT,					LogManager.RESULT_FAILURE, "服务站激励系数失败：" + e.toString(),					user);		}	}	/**	 * @auther baixiaoliang 服务站激励系数删除	 * @return void	 */	public void delete() throws Exception {		RequestWrapper request = atx.getRequest();		String status = Pub.val(request, "status");		String coefficientId = Pub.val(request, "coefficientId");		try {			if (DicConstant.YXBS_02.equals(status)) {				dao.delete(coefficientId);				atx.setOutMsg("", "服务站激励系数额删除成功！");			} else {				atx.setOutMsg("", "只有无效的才可以进行删除操作！");			}		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}	/**	 * @auther baixiaoliang 服务站激励系数查询	 * @return void	 */	public void search() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		PageManager page = new PageManager();		String conditions = RequestUtil.getConditionsWhere(request, page);		try {			BaseResultSet bs = dao.search(page, user, conditions);			atx.setOutData("bs", bs);		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}	/**	 * @auther baixiaoliang 服务站激励系数删除	 * @return void	 */	public void resetStatus() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		String status = Pub.val(request, "status");		String coefficientId = Pub.val(request, "coefficientId");		try {			SeBaExcitationCoefficientVO vo = new SeBaExcitationCoefficientVO();			vo.setCoefficientId(coefficientId);			vo.setUpdateUser(user.getAccount());			vo.setUpdateTime(Pub.getCurrentDate());			vo.setStatus(status);			dao.update(vo);			atx.setOutMsg("", "服务站激励系数删除成功！");		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}	/**	 * 激励系数配导入临时表查询	 * 	 * @throws Exception	 *             Author baixiaoliang 2014-07-25	 */	public void searchImport() throws Exception {		// 定义request对象		User user = (User) atx.getSession().get(Globals.USER_KEY);		PageManager page = new PageManager();		RequestWrapper request = atx.getRequest();		try {			String conditions = RequestUtil.getConditionsWhere(request,page);			BaseResultSet bs = dao.searchTmpImportBs(page, user,conditions);			atx.setOutData("bs", bs);		} catch (Exception e) {			logger.error(e);			atx.setException(e);		}	}	/**	 * 	 * @date()2014年8月27日	 * @author Administrator	 * @to_do:主车厂激励系数导入校验方法：临时表数据校验	 * @param user	 * @param bParams	 * @return	 * @throws Exception	 */	public List<ExcelErrors> checkData() throws Exception {		User user = (User) atx.getSession().get(Globals.USER_KEY);		ExcelErrors errors = null;		List<ExcelErrors> errorList = new LinkedList<ExcelErrors>();/*		//1、重复数据校验，临时表中,则必须删除一个		QuerySet qs2 = dao.searchData(user); 		if(qs2.getRowCount() > 1)		{			String errorStr = "";			for(int j=0; j<qs2.getRowCount(); j++){				String rowNum2 = qs2.getString(j+1, "ROW_NUM"); //行号				errorStr = errorStr + rowNum2 + "行,";			}			errorStr = errorStr.substring(0, errorStr.length()-1);//删除最后一个","号			errorStr = errorStr + "重复，请删除重复数据！";						errors=new ExcelErrors();			//添加错误描述			errors.setErrorDesc(errorStr);			errorList.add(errors);			if (errorList != null && errorList.size() > 0) {				return errorList;			} else {				return null;			}		}*/		//根据CODE关联后更新中间临时表		dao.merge(user);		QuerySet qs = dao.searchTmpInfoQs(user);// 查询此用户下的所有激励系数临时表信息		if (qs.getRowCount() > 0) {			for (int i = 0; i < qs.getRowCount(); i++) {				errors = new ExcelErrors();				String p = "^(0|[1-9][0-9]*)$";// 校验钱			    String coefficientRadio = qs.getString(i+1, "COEFFICIENT_RADIO");			    String coefficientType = qs.getString(i+1, "COEFFICIENT_TYPE");			    String companyId = qs.getString(i+1, "COMPANY_ID");			    String createTime = qs.getString(i+1, "CREATE_TIME");			    String createUser = qs.getString(i+1, "CREATE_USER");			    String endDate = qs.getString(i+1, "END_DATE");			    String engine = qs.getString(i+1, "ENGINE");			    String modelsCode = qs.getString(i+1, "MODELS_CODE");			    String modelsId = qs.getString(i+1, "MODELS_ID");			    String modelsName = qs.getString(i+1, "MODELS_NAME");			    String oemCompanyId = qs.getString(i+1, "OEM_COMPANY_ID");			    String officeId = qs.getString(i+1, "OFFICE_ID");			    String orgCode = qs.getString(i+1, "ORG_CODE");			    String orgId = qs.getString(i+1, "ORG_ID");			    String orgName = qs.getString(i+1, "ORG_NAME");			    String remarks = qs.getString(i+1, "REMARKS");			    String rowNum = qs.getString(i+1, "ROW_NUM");			    String secretLevel = qs.getString(i+1, "SECRET_LEVEL");			    String startDate = qs.getString(i+1, "START_DATE");			    String status = qs.getString(i+1, "STATUS");			    String tmpId = qs.getString(i+1, "TMP_ID");			    String typeCode = qs.getString(i+1, "TYPE_CODE");			    String typeName = qs.getString(i+1, "TYPE_NAME");			    String updateTime = qs.getString(i+1, "UPDATE_TIME");			    String updateUser = qs.getString(i+1, "UPDATE_USER");			    String userAccount = qs.getString(i+1, "USER_ACCOUNT");			   // String statusNa = qs.getString(i+1, "STATUS_NA");				// 车型				if (null == modelsCode || "".equals(modelsCode)) {					errors=new ExcelErrors();					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("车型不能为空!");					errorList.add(errors);				}				// 发动机				if (null == typeCode || "".equals(typeCode)) {					errors=new ExcelErrors();					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("发动机不能为空!");					errorList.add(errors);				}								if (null == startDate || "".equals(startDate)) {					errors=new ExcelErrors();					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("开始时间不能为空!");					errorList.add(errors);				}				if (null == endDate || "".equals(endDate)) {					errors=new ExcelErrors();					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("结束时间不能为空!");					errorList.add(errors);				}			/*	if (null == statusNa || "".equals(statusNa)) {					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("状态不能为空!");					errorList.add(errors);				}				if (null == status || "".equals(status)) {					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("状态不对!");					errorList.add(errors);				}*/			}						//3、重复数据校验，临时表中存在相同的仓库代码和配件代码信息，则必须删除一个			QuerySet qs2 = dao.searchData(user, "","",""); 			if(qs2.getRowCount() > 0)			{				for(int j=0; j<qs2.getRowCount(); j++){					String typeCode = qs2.getString(j+1, "TYPE_CODE");					String modelsCode = qs2.getString(j+1, "MODELS_CODE");					String coefficientTypeNA = qs2.getString(j+1, "COEFFICIENT_TYPE_NA");					String errorStr = "";					QuerySet qs3 = dao.searchData(user,typeCode,modelsCode,coefficientTypeNA);					for(int k=0; k<qs3.getRowCount(); k++){						String rowNum3 = qs3.getString(k+1, "ROW_NUM"); //行号												errors=new ExcelErrors();						errors.setRowNum(Integer.parseInt(rowNum3));						if (k != (qs3.getRowCount() -1)) {							errors.setErrorDesc("车型代码、发动机型号、激励类型是重复数据!");							errorList.add(errors);						}	                    						errorStr = errorStr + rowNum3 + ",";					}										errorStr = errorStr.substring(0, errorStr.length()-1);//删除最后一个","号					errorStr = "车型代码、发动机型号、激励类型是重复数据，重复行是("+errorStr+")！";										//添加错误描述					//errors=new ExcelErrors();					errors.setErrorDesc(errorStr);					errorList.add(errors);				}			}		}		if (errorList != null && errorList.size() > 0) {			return errorList;		} else {			return null;		}	}	/**	 * 导入确定按钮：把临时表的数据放入到主表	 * 	 * @throws Exception	 */	public void insertImport() throws Exception {		User user = (User) atx.getSession().get(Globals.USER_KEY);		try {			RequestWrapper request = atx.getRequest();			String errorInfoRowNum = Pub.val(request, "errorDataRowNum");			dao.insertTmpInfs(user,errorInfoRowNum);			atx.setOutMsg("", "导入成功！");		} catch (Exception e) {			logger.error(e);			atx.setException(e);		}	}	/**	 * 导出表数据	 * 	 * @throws Exception	 */	public void download() throws Exception {		// 定义request对象		ResponseWrapper response = atx.getResponse();		RequestWrapper request = atx.getRequest();		PageManager page = new PageManager();		String conditions = RequestUtil.getConditionsWhere(request, page);		try {			List<HeaderBean> header = new ArrayList<HeaderBean>();			HeaderBean hBean = null;			hBean = new HeaderBean();    		hBean.setName("ROWNUM");    		hBean.setTitle("序号");    		header.add(0,hBean);					hBean = new HeaderBean();			hBean.setName("MODELS_CODE");			hBean.setTitle("车型");			header.add(1, hBean);			hBean = new HeaderBean();			hBean.setName("TYPE_CODE");			hBean.setTitle("发动机型号");			header.add(2, hBean);		/*	hBean = new HeaderBean();			hBean.setName("COEFFICIENT_TYPE");			hBean.setTitle("激励类型");			header.add(3, hBean);*/			hBean = new HeaderBean();			hBean.setName("COEFFICIENT_TYPE_NA");			hBean.setTitle("激励类型名称");			header.add(3, hBean);			hBean = new HeaderBean();			hBean.setName("COEFFICIENT_RADIO");			hBean.setTitle("激励系数");			header.add(4, hBean);						hBean = new HeaderBean();			hBean.setName("START_DATE");			hBean.setTitle("开始时间");			header.add(5, hBean);			hBean = new HeaderBean();			hBean.setName("END_DATE");			hBean.setTitle("结束时间");			header.add(6, hBean);						 hBean = new HeaderBean(); 			 hBean.setName("STATUS_NA");			 hBean.setTitle("状态"); 			 header.add(7, hBean);			 			QuerySet querySet = dao.download(conditions);			ExportManager.exportFile(response.getHttpResponse(), "激励系数",					header, querySet);		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}	 /**     * 导出错误数据按钮：把临时表的错误数据导出到EXCEL     * @throws Exception     * Author suoxiuli 2014-11-5     */    public void expTmpErrorData()throws Exception{    	    	//获取封装后的request对象    	RequestWrapper request = atx.getRequest();    	User user = (User) atx.getSession().get(Globals.USER_KEY);    	// 将request流中的信息转化为where条件        String conditions = Pub.val(request, "errorDataRowNum");   	 // 定义response对象        ResponseWrapper responseWrapper= atx.getResponse();        try {        	            List<HeaderBean> header = new ArrayList<HeaderBean>();            HeaderBean hBean = null;            hBean = new HeaderBean();    		hBean.setName("ROW_NUM");    		hBean.setTitle("导入数据EXCEL行号");    		header.add(0,hBean);    		hBean = new HeaderBean();			hBean.setName("MODELS_CODE");			hBean.setTitle("车型");			header.add(1, hBean);			hBean = new HeaderBean();			hBean.setName("TYPE_CODE");			hBean.setTitle("发动机型号");			header.add(2, hBean);			/*hBean = new HeaderBean();			hBean.setName("COEFFICIENT_TYPE");			hBean.setTitle("激励类型");			header.add(3, hBean);*/			hBean = new HeaderBean();			hBean.setName("COEFFICIENT_TYPE_NA");			hBean.setTitle("激励类型名称");			header.add(3, hBean);			hBean = new HeaderBean();			hBean.setName("COEFFICIENT_RADIO");			hBean.setTitle("激励系数");			header.add(4, hBean);			hBean = new HeaderBean();			hBean.setName("START_DATE");			hBean.setTitle("开始时间");			header.add(5, hBean);			hBean = new HeaderBean();			hBean.setName("END_DATE");			hBean.setTitle("结束时间");			header.add(6, hBean);			 hBean = new HeaderBean(); 			 hBean.setName("STATUS_NA");			 hBean.setTitle("状态"); 			 header.add(7, hBean);            QuerySet querySet = dao.expTmpErrorData(conditions,user);            ExportManager.exportFile(responseWrapper.getHttpResponse(), "激励系数", header, querySet);        } catch (Exception e) {        	atx.setException(e);            logger.error(e);        }    }}