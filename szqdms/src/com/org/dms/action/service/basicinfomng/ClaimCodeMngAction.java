package com.org.dms.action.service.basicinfomng;import com.org.dms.vo.service.SeBaClaimCodeVO;import com.org.dms.dao.service.basicinfomng.SeBaClaimCodeDao;import java.util.ArrayList;import java.util.HashMap;import java.util.LinkedList;import java.util.List;import org.apache.log4j.Logger;import com.org.dms.common.DicConstant;import com.org.framework.Globals;import com.org.framework.common.User;import com.org.mvc.context.ActionContext;import com.org.mvc.context.ResponseWrapper;import com.org.framework.common.BaseResultSet;import com.org.framework.common.PageManager;import com.org.framework.common.QuerySet;import com.org.framework.fileimport.ExcelErrors;import com.org.framework.fileimport.ExportManager;import com.org.framework.fileimport.HeaderBean;import com.org.framework.log.LogManager;import com.org.framework.util.Pub;import com.org.framework.util.RequestUtil;import com.org.mvc.context.RequestWrapper;/** * 索赔基础参数 * <p> * Company: szq * </p> *  * @author baixiaoliang * @version 1.0 2014-7-14 */public class ClaimCodeMngAction {	private Logger logger = com.org.framework.log.log			.getLogger("ClaimCodeMngAction");	private ActionContext atx = ActionContext.getContext();	private SeBaClaimCodeDao dao = SeBaClaimCodeDao.getInstance(atx);	/**	 * @auther baixiaoliang 索赔基础参数新增	 * @return void	 */	public void insert() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		try {			SeBaClaimCodeVO vo = new SeBaClaimCodeVO();			// SeBaClaimCodeVO_Ext voExt=new SeBaClaimCodeVO_Ext();			HashMap<String, String> hm;			hm = RequestUtil.getValues(request);			vo.setValue(hm);	    	//判断是否已存在			QuerySet qs = dao.check(vo.getOrgCode(),vo.getTimeType());			if(qs.getRowCount() > 0)			{				String n = qs.getString(1, 1);				if(Integer.parseInt(n) > 0)				{					throw new Exception("索赔基础参数已存在，保存失败！");				}			}			// voExt.setValue(hm);			vo.setCreateUser(user.getAccount());			vo.setCreateTime(Pub.getCurrentDate());			dao.insertMultilist(vo);			// voExt.setCodeId(vo.getCodeId());			 vo.bindFieldToDic("STATUS","YXBS");			vo.bindFieldToDic("USER_TYPE","CLYHLX");			vo.bindFieldToDic("TIME_TYPE", "WCSJ");			// atx.setOutMsg(voExt.getRowXml(),"索赔基础参数新增成功！");			atx.setOutMsg(vo.getRowXml(), "索赔基础参数新增成功！");			  //日志            LogManager.writeUserLog("","",Globals.OPERATION_TYPE_INSERT,LogManager.RESULT_SUCCESS                                    ,"新增索赔基础参数 ["+vo.getCodeId()+" / "+"] 成功",user);		} catch (Exception e) {			atx.setException(e);			logger.error(e);			 //日志            LogManager.writeUserLog("", "", Globals.OPERATION_TYPE_INSERT, LogManager.RESULT_FAILURE,"更新索赔基础参数失败："+e.toString(), user);			}	}	/**	 * @auther baixiaoliang 索赔基础参数新增	 * @return void	 */	public void update() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		try {			SeBaClaimCodeVO vo = new SeBaClaimCodeVO();			// SeBaClaimCodeVO_Ext voExt=new SeBaClaimCodeVO_Ext();			HashMap<String, String> hm;			hm = RequestUtil.getValues(request);			vo.setValue(hm);			// voExt.setValue(hm);			vo.setUpdateUser(user.getAccount());			vo.setUpdateTime(Pub.getCurrentDate());			dao.update(vo);			 vo.bindFieldToDic("STATUS","YXBS");				vo.bindFieldToDic("USER_TYPE","CLYHLX");				vo.bindFieldToDic("TIME_TYPE", "WCSJ");			// voExt.setCodeId(vo.getCodeId());			// voExt.bindFieldToDic("STATUS","YXBS");			// voExt.bindFieldToDic("USER_TYPE","CLYHLX");			// atx.setOutMsg(voExt.getRowXml(),"索赔基础参数修改成功！");			atx.setOutMsg(vo.getRowXml(), "索赔基础参数修改成功！");			  //日志            LogManager.writeUserLog("","",Globals.OPERATION_TYPE_INSERT,LogManager.RESULT_SUCCESS                                    ,"更新索赔基础参数 ["+vo.getCodeId()+" / "+"] 成功",user);		} catch (Exception e) {			atx.setException(e);			logger.error(e);			 //日志            LogManager.writeUserLog("", "", Globals.OPERATION_TYPE_INSERT, LogManager.RESULT_FAILURE,"更新索赔基础参数失败："+e.toString(), user);			}	}    /**     * 批量更新     * @throws Exception     * @Author suoxiuli 2014-07-15     */    public void updateAll() throws Exception    {    	RequestWrapper request = atx.getRequest();        User user = (User) atx.getSession().get(Globals.USER_KEY);        String codeIds = Pub.val(request, "codeIds");        SeBaClaimCodeVO vo=new SeBaClaimCodeVO();        try        {			HashMap<String, String> hm;			hm = RequestUtil.getValues(request);			vo.setValue(hm);			// voExt.setValue(hm);			vo.setUpdateUser(user.getAccount());			vo.setUpdateTime(Pub.getCurrentDate());//			String userAccount = hm.get("USER_ACCOUNT");//			String userName = hm.get("PERSON_NAME");//			String updateUser = user.getAccount();			vo.setUpdateUser(user.getAccount());			vo.setUpdateTime(Pub.getCurrentDate());            dao.updateAll(codeIds,vo);            vo.bindFieldToDic("STATUS","YXBS");			vo.bindFieldToDic("USER_TYPE","CLYHLX");			vo.bindFieldToDic("TIME_TYPE", "WCSJ");            atx.setOutMsg("","索赔基础费用批量修改成功！");        }        catch (Exception e)        {        	//设置失败异常处理        	atx.setException(e);            logger.error(e);        }    }	/**	 * @auther baixiaoliang 索赔基础参数删除	 * @return void	 */	public void delete() throws Exception {		RequestWrapper request = atx.getRequest();		String status = Pub.val(request, "status");		String codeId = Pub.val(request, "codeId");		try {			if (DicConstant.YXBS_02.equals(status)) {				dao.delete(codeId);				atx.setOutMsg("", "索赔基础参数额删除成功！");			} else {				atx.setOutMsg("", "只有无效的才可以进行删除操作！");			}		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}	/**	 * @auther baixiaoliang 索赔基础参数查询	 * @return void	 */	public void search() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		/*String org_id = Pub.val(request, "d_org_id");*/		PageManager page = new PageManager();		String conditions = RequestUtil.getConditionsWhere(request, page);		try {			BaseResultSet bs = dao.search(page, user, conditions);			atx.setOutData("bs", bs);		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}	/**	 * @auther baixiaoliang 索赔基础参数删除	 * @return void	 */	public void resetStatus() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		String status = Pub.val(request, "status");		String codeId = Pub.val(request, "codeId");		try {			SeBaClaimCodeVO vo = new SeBaClaimCodeVO();			vo.setCodeId(codeId);			vo.setUpdateUser(user.getAccount());			vo.setUpdateTime(Pub.getCurrentDate());			vo.setStatus(status);			dao.update(vo);			atx.setOutMsg("", "索赔基础参数删除成功！");			  //日志            LogManager.writeUserLog("","",Globals.OPERATION_TYPE_INSERT,LogManager.RESULT_SUCCESS                                    ,"索赔基础参数 ["+codeId+" / "+status+"] 成功",user);		} catch (Exception e) {			atx.setException(e);			logger.error(e);			 //日志            LogManager.writeUserLog("", "", Globals.OPERATION_TYPE_INSERT, LogManager.RESULT_FAILURE,codeId+"索赔基础参数失败："+e.toString(), user);		}	}	/**	 * 工时单价配导入临时表查询	 * 	 * @throws Exception	 *             Author baixiaoliang 2014-07-25	 */	public void searchImport() throws Exception {		// 定义request对象		User user = (User) atx.getSession().get(Globals.USER_KEY);		PageManager page = new PageManager();		RequestWrapper request = atx.getRequest();		try {			String conditions = RequestUtil.getConditionsWhere(request,page);			BaseResultSet bs = dao.searchTmpImportBs(page, user,conditions);			atx.setOutData("bs", bs);		} catch (Exception e) {			logger.error(e);			atx.setException(e);		}	}	/**	 * 	 * @date()2014年8月27日	 * @author Administrator	 * @to_do:主车厂工时单价导入校验方法：临时表数据校验	 * @param user	 * @param bParams	 * @return	 * @throws Exception	 */	public List<ExcelErrors> checkData() throws Exception {		User user = (User) atx.getSession().get(Globals.USER_KEY);		ExcelErrors errors = null;		List<ExcelErrors> errorList = new LinkedList<ExcelErrors>();	/*	//1、重复数据校验，临时表中,则必须删除一个		QuerySet qs2 = dao.searchData(user); 		if(qs2.getRowCount() > 1)		{			String errorStr = "";			for(int j=0; j<qs2.getRowCount(); j++){				String rowNum2 = qs2.getString(j+1, "ROW_NUM"); //行号				errorStr = errorStr + rowNum2 + "行,";			}			errorStr = errorStr.substring(0, errorStr.length()-1);//删除最后一个","号			errorStr = errorStr + "重复，请删除重复数据！";						errors=new ExcelErrors();			//添加错误描述			errors.setErrorDesc(errorStr);			errorList.add(errors);			if (errorList != null && errorList.size() > 0) {				return errorList;			} else {				return null;			}		}*/		//根据CODE关联后更新中间临时表		dao.merge(user);		QuerySet qs = dao.searchTmpInfoQs(user);// 查询此用户下的所有工时单价临时表信息		if (qs.getRowCount() > 0) {			for (int i = 0; i < qs.getRowCount(); i++) {				errors = new ExcelErrors();				String p = "^(0|[1-9][0-9]*)$";// 校验钱				String baseTaskTime = qs.getString(i+1, "BASE_TASK_TIME");			    String companyId = qs.getString(i+1, "COMPANY_ID");			    String endDate = qs.getString(i+1, "END_DATE");			    String oemCompanyId = qs.getString(i+1, "OEM_COMPANY_ID");			    String officeId = qs.getString(i+1, "OFFICE_ID");			    String orgCode = qs.getString(i+1, "ORG_CODE");			    String orgId = qs.getString(i+1, "ORG_ID");			    String orgName = qs.getString(i+1, "ORG_NAME");			    String rowNum = qs.getString(i+1, "ROW_NUM");			    String secretLevel = qs.getString(i+1, "SECRET_LEVEL");			    String startDate = qs.getString(i+1, "START_DATE");			    String taskTimeRatio = qs.getString(i+1, "TASK_TIME_RATIO");			    String timeType = qs.getString(i+1, "TIME_TYPE");			    String timeTypeNa = qs.getString(i+1, "TIME_TYPE_NA");			    String tmpId = qs.getString(i+1, "TMP_ID");			    String unitPrice = qs.getString(i+1, "UNIT_PRICE");			    String userAccount = qs.getString(i+1, "USER_ACCOUNT");			    String userType = qs.getString(i+1, "USER_TYPE");			    String statusNa = qs.getString(i+1, "STATUS_NA");			    String status = qs.getString(i+1, "STATUS");											// 服务商代码				if (null == orgCode || "".equals(orgCode)) {					errors=new ExcelErrors();					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("服务商代码不能为空!");					errorList.add(errors);				}				if (null == statusNa || "".equals(statusNa)) {					errors=new ExcelErrors();					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("状态不能为空!");					errorList.add(errors);				}				if (null == timeTypeNa || "".equals(timeTypeNa)) {					errors=new ExcelErrors();					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("时间类型不能为空!");					errorList.add(errors);				}				if (null == baseTaskTime || "".equals(baseTaskTime)) {					errors=new ExcelErrors();					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("基础工时不能为空!");					errorList.add(errors);				}				if (null == taskTimeRatio || "".equals(taskTimeRatio)) {					errors=new ExcelErrors();					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("工时系数不能为空!");					errorList.add(errors);				}				if (null == unitPrice || "".equals(unitPrice)) {					errors=new ExcelErrors();					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("工时单价不能为空!");					errorList.add(errors);				}				if (null == status || "".equals(status)) {					errors=new ExcelErrors();					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("状态不对!");					errorList.add(errors);				}				if (null == timeType || "".equals(timeType)) {					errors=new ExcelErrors();					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("时间类型不对!");					errorList.add(errors);				}			}						//3、重复数据校验，临时表中存在相同的仓库代码和配件代码信息，则必须删除一个			QuerySet qs2 = dao.searchData(user, ""); 			if(qs2.getRowCount() > 0)			{				for(int j=0; j<qs2.getRowCount(); j++){					String orgCode = qs2.getString(j+1, "ORG_CODE");					String errorStr = "";					QuerySet qs3 = dao.searchData(user, orgCode);					for(int k=0; k<qs3.getRowCount(); k++){						String rowNum3 = qs3.getString(k+1, "ROW_NUM"); //行号												errors=new ExcelErrors();						errors.setRowNum(Integer.parseInt(rowNum3));						if (k != (qs3.getRowCount() -1)) {							errors.setErrorDesc("服务商代码是重复数据!");							errorList.add(errors);						}	                    						errorStr = errorStr + rowNum3 + ",";					}										errorStr = errorStr.substring(0, errorStr.length()-1);//删除最后一个","号					errorStr = "服务商代码是重复数据，重复行是("+errorStr+")！";										//添加错误描述					//errors=new ExcelErrors();					errors.setErrorDesc(errorStr);					errorList.add(errors);				}			}		}		if (errorList != null && errorList.size() > 0) {			return errorList;		} else {			return null;		}	}	/**	 * 导入确定按钮：把临时表的数据放入到主表	 * 	 * @throws Exception	 */	public void insertImport() throws Exception {		User user = (User) atx.getSession().get(Globals.USER_KEY);		try {			RequestWrapper request = atx.getRequest();			String errorInfoRowNum = Pub.val(request, "errorDataRowNum");			dao.insertTmpInfs(user,errorInfoRowNum);			atx.setOutMsg("", "导入成功！");		} catch (Exception e) {			logger.error(e);			atx.setException(e);		}	}	/**	 * 导出表数据	 * 	 * @throws Exception	 */	public void download() throws Exception {		// 定义request对象		ResponseWrapper response = atx.getResponse();		RequestWrapper request = atx.getRequest();		PageManager page = new PageManager();		String conditions = RequestUtil.getConditionsWhere(request, page);		try {			List<HeaderBean> header = new ArrayList<HeaderBean>();			HeaderBean hBean = null;			hBean = new HeaderBean();    		hBean.setName("ROWNUM");    		hBean.setTitle("序号");    		header.add(0,hBean);						hBean = new HeaderBean();			hBean.setName("ORG_CODE");			hBean.setTitle("服务商代码");			header.add(1, hBean);			hBean = new HeaderBean();			hBean.setName("ORG_NAME");			hBean.setTitle("服务商名称");			header.add(2, hBean);			hBean = new HeaderBean();			hBean.setName("SNAME");			hBean.setTitle("办事处");			header.add(3, hBean);			hBean = new HeaderBean();			hBean.setName("TIME_TYPE_NA");			hBean.setTitle("时间类型");			header.add(4, hBean);			hBean = new HeaderBean();			hBean.setName("BASE_TASK_TIME");			hBean.setTitle("基础工时");			header.add(5, hBean);			hBean = new HeaderBean();			hBean.setName("TASK_TIME_RATIO");			hBean.setTitle("工时系数");			header.add(6, hBean);			hBean = new HeaderBean();			hBean.setName("UNIT_PRICE");			hBean.setTitle("工时单价");			header.add(7, hBean);			hBean = new HeaderBean();			hBean.setName("START_DATE");			hBean.setTitle("起始时间");			header.add(8, hBean);			hBean = new HeaderBean();			hBean.setName("END_DATE");			hBean.setTitle("结束时间");			header.add(9, hBean);		/*	hBean = new HeaderBean();			hBean.setName("STATUS_NA");			hBean.setTitle("状态");			header.add(9, hBean);*/			hBean = new HeaderBean();			hBean.setName("STATUS_NA");			hBean.setTitle("状态");			header.add(10, hBean);						hBean = new HeaderBean();			hBean.setName("CREATE_USER");			hBean.setTitle("创建人");			header.add(11, hBean);			hBean = new HeaderBean();			hBean.setName("CREATE_TIME");			hBean.setTitle("创建时间");			header.add(12, hBean);			hBean = new HeaderBean();			hBean.setName("UPDATE_USER");			hBean.setTitle("更新人");			header.add(13, hBean);			hBean = new HeaderBean();			hBean.setName("UPDATE_TIME");			hBean.setTitle("更新时间");			header.add(14, hBean);			QuerySet querySet = dao.download(conditions);			ExportManager.exportFile(response.getHttpResponse(), "工时单价",					header, querySet);		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}		 /**     * 导出错误数据按钮：把临时表的错误数据导出到EXCEL     * @throws Exception     * Author suoxiuli 2014-11-5     */    public void expTmpErrorData()throws Exception{    	    	//获取封装后的request对象    	RequestWrapper request = atx.getRequest();    	User user = (User) atx.getSession().get(Globals.USER_KEY);    	// 将request流中的信息转化为where条件        String conditions = Pub.val(request, "errorDataRowNum");   	 // 定义response对象        ResponseWrapper responseWrapper= atx.getResponse();        try {        	            List<HeaderBean> header = new ArrayList<HeaderBean>();            HeaderBean hBean = null;            hBean = new HeaderBean();    		hBean.setName("ROW_NUM");    		hBean.setTitle("导入数据EXCEL行号");    		header.add(0,hBean);    		hBean = new HeaderBean();			hBean.setName("ORG_CODE");			hBean.setTitle("服务商代码");			header.add(1, hBean);			hBean = new HeaderBean();			hBean.setName("ORG_NAME");			hBean.setTitle("服务商名称");			header.add(2, hBean);			hBean = new HeaderBean();			hBean.setName("SNAME");			hBean.setTitle("办事处");			header.add(3, hBean);			hBean = new HeaderBean();			hBean.setName("TIME_TYPE_NA");			hBean.setTitle("时间类型");			header.add(4, hBean);			hBean = new HeaderBean();			hBean.setName("BASE_TASK_TIME");			hBean.setTitle("基础工时");			header.add(5, hBean);			hBean = new HeaderBean();			hBean.setName("TASK_TIME_RATIO");			hBean.setTitle("工时系数");			header.add(6, hBean);			hBean = new HeaderBean();			hBean.setName("UNIT_PRICE");			hBean.setTitle("工时单价");			header.add(7, hBean);			hBean = new HeaderBean();			hBean.setName("START_DATE");			hBean.setTitle("起始时间");			header.add(8, hBean);			hBean = new HeaderBean();			hBean.setName("END_DATE");			hBean.setTitle("结束时间");			header.add(9, hBean);		/*	hBean = new HeaderBean();			hBean.setName("STATUS_NA");			hBean.setTitle("状态");			header.add(9, hBean);*/			hBean = new HeaderBean();			hBean.setName("STATUS_NA");			hBean.setTitle("状态");			header.add(10, hBean);            QuerySet querySet = dao.expTmpErrorData(conditions,user);            ExportManager.exportFile(responseWrapper.getHttpResponse(), "工时单价", header, querySet);        } catch (Exception e) {        	atx.setException(e);            logger.error(e);        }    }}