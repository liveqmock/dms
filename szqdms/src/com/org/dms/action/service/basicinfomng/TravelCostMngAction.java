package com.org.dms.action.service.basicinfomng;import com.org.dms.vo.service.SeBaTravelCostVO;import com.org.dms.dao.service.basicinfomng.SeBaTravelCostDao;import java.util.ArrayList;import java.util.HashMap;import java.util.LinkedList;import java.util.List;import org.apache.log4j.Logger;import com.org.dms.common.DicConstant;import com.org.framework.Globals;import com.org.framework.common.User;import com.org.mvc.context.ActionContext;import com.org.mvc.context.ResponseWrapper;import com.org.framework.common.BaseResultSet;import com.org.framework.common.PageManager;import com.org.framework.common.QuerySet;import com.org.framework.fileimport.ExcelErrors;import com.org.framework.fileimport.ExportManager;import com.org.framework.fileimport.HeaderBean;import com.org.framework.log.LogManager;import com.org.framework.util.Pub;import com.org.framework.util.RequestUtil;import com.org.mvc.context.RequestWrapper;/** * 外出费用 * <p> * Company: szq * </p> *  * @author baixiaoliang * @version 1.0 2014-7-14 */public class TravelCostMngAction {	private Logger logger = com.org.framework.log.log			.getLogger("TravelCostMngAction");	private ActionContext atx = ActionContext.getContext();	private SeBaTravelCostDao dao = SeBaTravelCostDao.getInstance(atx);	/**	 * @auther baixiaoliang 外出费用新增	 * @return void	 */	public void insert() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		try {			SeBaTravelCostVO vo = new SeBaTravelCostVO();			// SeBaTravelCostVO_Ext voExt=new SeBaTravelCostVO_Ext();			HashMap<String, String> hm;			hm = RequestUtil.getValues(request);			vo.setValue(hm);		/*	// 判断是否已存在			QuerySet qs = dao.check(vo.getOrgCode());			if (qs.getRowCount() > 0) {				String n = qs.getString(1, 1);				if (Integer.parseInt(n) > 0) {					throw new Exception("外出费用已存在，保存失败！");				}			}*/			// voExt.setValue(hm);			vo.setCreateUser(user.getAccount());			vo.setCreateTime(Pub.getCurrentDate());			dao.insertMultilist(vo);			// voExt.setCodeId(vo.getCodeId());			vo.bindFieldToDic("STATUS", "YXBS");			vo.bindFieldToDic("TRAVEL_TIMES", "WCCS");			vo.bindFieldToDic("TRAVEL_DATE", "WCSJ");			vo.bindFieldToDic("VEHICLE_TYPE", "WCFS");			vo.bindFieldToDic("COSTS_TYPE", "FYLB");			// voExt.bindFieldToDic("USER_TYPE","CLYHLX");			// atx.setOutMsg(voExt.getRowXml(),"外出费用新增成功！");			atx.setOutMsg(vo.getRowXml(), "外出费用新增成功！");			// 日志			LogManager.writeUserLog("", "", Globals.OPERATION_TYPE_INSERT,					LogManager.RESULT_SUCCESS, "新增外出费用 [" + vo.getCodeId()							+ " / " + "] 成功", user);		} catch (Exception e) {			atx.setException(e);			logger.error(e);			// 日志			LogManager					.writeUserLog("", "", Globals.OPERATION_TYPE_INSERT,							LogManager.RESULT_FAILURE,							"更新外出费用失败：" + e.toString(), user);		}	}	/**	 * @auther baixiaoliang 外出费用新增	 * @return void	 */	public void update() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		try {			SeBaTravelCostVO vo = new SeBaTravelCostVO();			// SeBaTravelCostVO_Ext voExt=new SeBaTravelCostVO_Ext();			HashMap<String, String> hm;			hm = RequestUtil.getValues(request);			vo.setValue(hm);			// voExt.setValue(hm);			vo.setUpdateUser(user.getAccount());			vo.setUpdateTime(Pub.getCurrentDate());			dao.update(vo);			vo.bindFieldToDic("TRAVEL_TIMES", "WCCS");			vo.bindFieldToDic("TRAVEL_DATE", "WCSJ");			vo.bindFieldToDic("VEHICLE_TYPE", "WCFS");			vo.bindFieldToDic("COSTS_TYPE", "FYLB");			// voExt.setCodeId(vo.getCodeId());			// voExt.bindFieldToDic("STATUS","YXBS");			// voExt.bindFieldToDic("USER_TYPE","CLYHLX");			// atx.setOutMsg(voExt.getRowXml(),"外出费用修改成功！");			atx.setOutMsg(vo.getRowXml(), "外出费用修改成功！");			// 日志			LogManager.writeUserLog("", "", Globals.OPERATION_TYPE_INSERT,					LogManager.RESULT_SUCCESS, "更新外出费用 [" + vo.getCodeId()							+ " / " + "] 成功", user);		} catch (Exception e) {			atx.setException(e);			logger.error(e);			// 日志			LogManager					.writeUserLog("", "", Globals.OPERATION_TYPE_INSERT,							LogManager.RESULT_FAILURE,							"更新外出费用失败：" + e.toString(), user);		}	}	/**	 * @auther baixiaoliang 外出费用删除	 * @return void	 */	public void delete() throws Exception {		RequestWrapper request = atx.getRequest();		String status = Pub.val(request, "status");		String codeId = Pub.val(request, "codeId");		try {			if (DicConstant.YXBS_02.equals(status)) {				dao.delete(codeId);				atx.setOutMsg("", "外出费用额删除成功！");			} else {				atx.setOutMsg("", "只有无效的才可以进行删除操作！");			}		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}	/**	 * @auther baixiaoliang 外出费用查询	 * @return void	 */	public void search() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		PageManager page = new PageManager();		String conditions = RequestUtil.getConditionsWhere(request, page);		try {			BaseResultSet bs = dao.search(page, user, conditions);			atx.setOutData("bs", bs);		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}	/**	 * @auther baixiaoliang 外出费用删除	 * @return void	 */	public void resetStatus() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		String status = Pub.val(request, "status");		String codeId = Pub.val(request, "codeId");		try {			SeBaTravelCostVO vo = new SeBaTravelCostVO();			vo.setCodeId(codeId);			vo.setUpdateUser(user.getAccount());			vo.setUpdateTime(Pub.getCurrentDate());			vo.setStatus(status);			dao.update(vo);			vo.bindFieldToDic("TRAVEL_TIMES", "WCCS");			vo.bindFieldToDic("TRAVEL_DATE", "WCSJ");			vo.bindFieldToDic("VEHICLE_TYPE", "WCFS");			vo.bindFieldToDic("COSTS_TYPE", "FYLB");			atx.setOutMsg("", "外出费用删除成功！");			// 日志			LogManager.writeUserLog("", "", Globals.OPERATION_TYPE_INSERT,					LogManager.RESULT_SUCCESS, "外出费用 [" + codeId + " / "							+ status + "] 成功", user);		} catch (Exception e) {			atx.setException(e);			logger.error(e);			// 日志			LogManager.writeUserLog("", "", Globals.OPERATION_TYPE_INSERT,					LogManager.RESULT_FAILURE,					codeId + "外出费用失败：" + e.toString(), user);		}	}	/**	 * 外出费用配导入临时表查询	 * 	 * @throws Exception	 *             Author baixiaoliang 2014-07-25	 */	public void searchImport() throws Exception {		// 定义request对象		User user = (User) atx.getSession().get(Globals.USER_KEY);		PageManager page = new PageManager();		RequestWrapper request = atx.getRequest();		try {			String conditions = RequestUtil.getConditionsWhere(request,page);			BaseResultSet bs = dao.searchTmpImportBs(page, user,conditions);			atx.setOutData("bs", bs);		} catch (Exception e) {			logger.error(e);			atx.setException(e);		}	}	/**	 * 	 * @date()2014年8月27日	 * @author Administrator	 * @to_do:主车厂外出费用导入校验方法：临时表数据校验	 * @param user	 * @param bParams	 * @return	 * @throws Exception	 */	public List<ExcelErrors> checkData() throws Exception {		User user = (User) atx.getSession().get(Globals.USER_KEY);		ExcelErrors errors = null;		List<ExcelErrors> errorList = new LinkedList<ExcelErrors>();/*		//1、重复数据校验，临时表中,则必须删除一个		QuerySet qs2 = dao.searchData(user); 		if(qs2.getRowCount() > 1)		{			String errorStr = "";			for(int j=0; j<qs2.getRowCount(); j++){				errors=new ExcelErrors();				String rowNum2 = qs2.getString(j+1, "ROW_NUM"); //行号				String orgCode = qs2.getString(j+1, "ORG_CODE"); 				String count = qs2.getString(j+1, "COUNT"); 				//errorStr = errorStr + rowNum2 + "行,";				errors.setRowNum(Integer.parseInt(rowNum2));				errorStr="服务商代码"+orgCode+"，与其他行重复;总计"+count+"条重复，请删除重复数据！";				errors.setErrorDesc(errorStr);				errorList.add(errors);			}						if (errorList != null && errorList.size() > 0) {				return errorList;			} else {				return null;			}		}*/		//根据CODE关联后更新中间临时表		dao.merge(user);		QuerySet qs = dao.searchTmpInfoQs(user);// 查询此用户下的所有外出费用临时表信息		if (qs.getRowCount() > 0) {			for (int i = 0; i < qs.getRowCount(); i++) {				errors = new ExcelErrors();				String p = "^(0|[1-9][0-9]*)$";// 校验钱				String rowNum = qs.getString(i + 1, "ROW_NUM"); // 行号				String cost = qs.getString(i + 1, "COST");				String costsType = qs.getString(i + 1, "COSTS_TYPE");				String endMiles = qs.getString(i + 1, "END_MILES");				String orgCode = qs.getString(i + 1, "ORG_CODE");				String orgId = qs.getString(i + 1, "ORG_ID");				String orgName = qs.getString(i + 1, "ORG_NAME");				String startMiles = qs.getString(i + 1, "START_MILES");				String travelDate = qs.getString(i + 1, "TRAVEL_DATE");				String travelStatus = qs.getString(i + 1, "TRAVEL_STATUS");				String travelTimes = qs.getString(i + 1, "TRAVEL_TIMES");				String vehicleType = qs.getString(i + 1, "VEHICLE_TYPE");				String createUser = qs.getString(i + 1, "USER_ACCOUNT");// 创建人				String costsTypeNa = qs.getString(i + 1, "COSTS_TYPE_NA");				String travelTimesNa = qs.getString(i + 1, "TRAVEL_TIMES_NA");				String travelDateNa = qs.getString(i + 1, "TRAVEL_DATE_NA");				String vehicleTypeNa = qs.getString(i + 1, "VEHICLE_TYPE_NA");				String statusNa = qs.getString(i+1, "STATUS_NA");				String status = qs.getString(i+1, "STATUS");								// 结束里程				if (null == endMiles || "".equals(endMiles)) {					errors=new ExcelErrors();					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("结束里程不能为空!");					errorList.add(errors);				}				// 开始里程				if (null == startMiles || "".equals(startMiles)) {					errors=new ExcelErrors();					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("开始里程不能为空!");					errorList.add(errors);				}				// 费用				if (null == cost || "".equals(cost)) {					errors=new ExcelErrors();					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("费用不能为空!");					errorList.add(errors);				}				// 备车类型				if (null == vehicleTypeNa || "".equals(vehicleTypeNa)) {					errors=new ExcelErrors();					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("备车类型不能为空!");					errorList.add(errors);				}				// 外出时间范围				if (null == travelDateNa || "".equals(travelDateNa)) {					errors=new ExcelErrors();					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("外出时间范围不能为空!");					errorList.add(errors);				}				// 服务商代码				if (null == orgCode || "".equals(orgCode)) {					errors=new ExcelErrors();					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("服务商代码不能为空!");					errorList.add(errors);				}				// 费用类型				if (null == costsTypeNa || "".equals(costsTypeNa)) {					errors=new ExcelErrors();					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("费用类型不能为空!");					errorList.add(errors);				}				// 外出次数				if (null == travelTimesNa || "".equals(travelTimesNa)) {					errors=new ExcelErrors();					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("外出次数不能为空!");					errorList.add(errors);				}				if (null == statusNa || "".equals(statusNa)) {					errors=new ExcelErrors();					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("状态不能为空!");					errorList.add(errors);				}				if (null == status || "".equals(status)) {					errors=new ExcelErrors();					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("状态不对!");					errorList.add(errors);				}					}						//3、重复数据校验，临时表中存在相同的仓库代码和配件代码信息，则必须删除一个			QuerySet qs2 = dao.searchData(user, ""); 			if(qs2.getRowCount() > 0)			{				for(int j=0; j<qs2.getRowCount(); j++){					String orgCode = qs2.getString(j+1, "ORG_CODE");					String errorStr = "";					QuerySet qs3 = dao.searchData(user, orgCode);					for(int k=0; k<qs3.getRowCount(); k++){						String rowNum3 = qs3.getString(k+1, "ROW_NUM"); //行号												errors=new ExcelErrors();						errors.setRowNum(Integer.parseInt(rowNum3));						if (k != (qs3.getRowCount() -1)) {							errors.setErrorDesc("服务商代码是重复数据!");							errorList.add(errors);						}	                    						errorStr = errorStr + rowNum3 + ",";					}										errorStr = errorStr.substring(0, errorStr.length()-1);//删除最后一个","号					errorStr = "服务商代码是重复数据，重复行是("+errorStr+")！";										//添加错误描述					//errors=new ExcelErrors();					errors.setErrorDesc(errorStr);					errorList.add(errors);				}			}		}		if (errorList != null && errorList.size() > 0) {			return errorList;		} else {			return null;		}	}	/**	 * 导入确定按钮：把临时表的数据放入到主表	 * 	 * @throws Exception	 */	public void insertImport() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		try {			String errorInfoRowNum = Pub.val(request, "errorDataRowNum");			dao.insertTmpInfs(user,errorInfoRowNum);			atx.setOutMsg("", "导入成功！");		} catch (Exception e) {			logger.error(e);			atx.setException(e);		}	}	/**	 * 导出表数据	 * 	 * @throws Exception	 */	public void download() throws Exception {		// 定义request对象		ResponseWrapper response = atx.getResponse();		RequestWrapper request = atx.getRequest();		PageManager page = new PageManager();		String conditions = RequestUtil.getConditionsWhere(request, page);		try {			List<HeaderBean> header = new ArrayList<HeaderBean>();			HeaderBean hBean = null;			hBean = new HeaderBean();    		hBean.setName("ROWNUM");    		hBean.setTitle("序号");    		header.add(0,hBean);			hBean = new HeaderBean();			hBean.setName("ORG_CODE");			hBean.setTitle("服务商代码");			header.add(1, hBean);			hBean = new HeaderBean();			hBean.setName("ORG_NAME");			hBean.setTitle("服务商名称");			header.add(2, hBean);			hBean = new HeaderBean();			hBean.setName("SNAME");			hBean.setTitle("办事处");			header.add(3, hBean);			hBean = new HeaderBean();			hBean.setName("COSTS_TYPE_NA");			hBean.setTitle("费用类别");			header.add(4, hBean);			hBean = new HeaderBean();			hBean.setName("TRAVEL_TIMES_NA");			hBean.setTitle("外出次数");			header.add(5, hBean);			hBean = new HeaderBean();			hBean.setName("TRAVEL_DATE_NA");			hBean.setTitle("外出时间");			header.add(6, hBean);			hBean = new HeaderBean();			hBean.setName("VEHICLE_TYPE_NA");			hBean.setTitle("备车类型");			header.add(7, hBean);			hBean = new HeaderBean();			hBean.setName("START_MILES");			hBean.setTitle("里程（开始）");			header.add(8, hBean);			hBean = new HeaderBean();			hBean.setName("END_MILES");			hBean.setTitle("里程（结束）");			header.add(9, hBean);			hBean = new HeaderBean();			hBean.setName("COST");			hBean.setTitle("费用（单价）");			header.add(10, hBean);            			hBean = new HeaderBean();			hBean.setName("STATUS_NA");			hBean.setTitle("状态");			header.add(11, hBean);						hBean = new HeaderBean();			hBean.setName("CREATE_USER");			hBean.setTitle("创建人");			header.add(12, hBean);			hBean = new HeaderBean();			hBean.setName("CREATE_TIME");			hBean.setTitle("创建时间");			header.add(13, hBean);			hBean = new HeaderBean();			hBean.setName("UPDATE_USER");			hBean.setTitle("更新人");			header.add(14, hBean);			hBean = new HeaderBean();			hBean.setName("UPDATE_TIME");			hBean.setTitle("更新时间");			header.add(15, hBean);			QuerySet querySet = dao.download(conditions);			ExportManager.exportFile(response.getHttpResponse(), "外出费用",					header, querySet);		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}		 /**     * 导出错误数据按钮：把临时表的错误数据导出到EXCEL     * @throws Exception     * Author suoxiuli 2014-11-5     */    public void expTmpErrorData()throws Exception{    	    	//获取封装后的request对象    	RequestWrapper request = atx.getRequest();    	User user = (User) atx.getSession().get(Globals.USER_KEY);    	// 将request流中的信息转化为where条件        String conditions = Pub.val(request, "errorDataRowNum");   	 // 定义response对象        ResponseWrapper responseWrapper= atx.getResponse();        try {        	            List<HeaderBean> header = new ArrayList<HeaderBean>();            HeaderBean hBean = null;            hBean = new HeaderBean();    		hBean.setName("ROW_NUM");    		hBean.setTitle("导入数据EXCEL行号");    		header.add(0,hBean);			hBean = new HeaderBean();			hBean.setName("ORG_CODE");			hBean.setTitle("服务商代码");			header.add(1, hBean);			hBean = new HeaderBean();			hBean.setName("ORG_NAME");			hBean.setTitle("服务商名称");			header.add(2, hBean);			hBean = new HeaderBean();			hBean.setName("SNAME");			hBean.setTitle("办事处");			header.add(3, hBean);			hBean = new HeaderBean();			hBean.setName("COSTS_TYPE_NA");			hBean.setTitle("费用类别");			header.add(4, hBean);			hBean = new HeaderBean();			hBean.setName("TRAVEL_TIMES_NA");			hBean.setTitle("外出次数");			header.add(5, hBean);			hBean = new HeaderBean();			hBean.setName("TRAVEL_DATE_NA");			hBean.setTitle("外出时间");			header.add(6, hBean);			hBean = new HeaderBean();			hBean.setName("VEHICLE_TYPE_NA");			hBean.setTitle("备车类型");			header.add(7, hBean);			hBean = new HeaderBean();			hBean.setName("START_MILES");			hBean.setTitle("里程（开始）");			header.add(8, hBean);			hBean = new HeaderBean();			hBean.setName("END_MILES");			hBean.setTitle("里程（结束）");			header.add(9, hBean);			hBean = new HeaderBean();			hBean.setName("COST");			hBean.setTitle("费用（单价）");			header.add(10, hBean);            			hBean = new HeaderBean();			hBean.setName("STATUS_NA");			hBean.setTitle("状态");			header.add(11, hBean);            QuerySet querySet = dao.expTmpErrorData(conditions,user);            ExportManager.exportFile(responseWrapper.getHttpResponse(), "外出费用", header, querySet);        } catch (Exception e) {        	atx.setException(e);            logger.error(e);        }    }}