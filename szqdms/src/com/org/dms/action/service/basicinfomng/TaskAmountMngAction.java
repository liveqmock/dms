package com.org.dms.action.service.basicinfomng;import com.org.dms.vo.service.SeBaTaskAmountVO;import com.org.dms.vo.service.SeBaTaskAmountVO_Ext;import com.org.dms.dao.service.basicinfomng.SeBaTaskAmountDao;import java.util.ArrayList;import java.util.HashMap;import java.util.LinkedList;import java.util.List;import org.apache.log4j.Logger;import com.org.dms.common.DicConstant;import com.org.framework.Globals;import com.org.framework.common.User;import com.org.mvc.context.ActionContext;import com.org.mvc.context.ResponseWrapper;import com.org.framework.common.BaseResultSet;import com.org.framework.common.PageManager;import com.org.framework.common.QuerySet;import com.org.framework.fileimport.ExcelErrors;import com.org.framework.fileimport.ExportManager;import com.org.framework.fileimport.HeaderBean;import com.org.framework.log.LogManager;import com.org.framework.util.Pub;import com.org.framework.util.RequestUtil;import com.org.mvc.context.RequestWrapper;/** * 工时订额维护 * <p> * Company: szq * </p> *  * @author baixiaoliang * @version 1.0 2014-7-14 */public class TaskAmountMngAction {	private Logger logger = com.org.framework.log.log			.getLogger("TaskAmountMngAction");	private ActionContext atx = ActionContext.getContext();	private SeBaTaskAmountDao dao = SeBaTaskAmountDao.getInstance(atx);	/**	 * @auther baixiaoliang 工时订额维护新增	 * @return void	 */	public void insert() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		try {			SeBaTaskAmountVO vo = new SeBaTaskAmountVO();			SeBaTaskAmountVO_Ext voExt = new SeBaTaskAmountVO_Ext();			HashMap<String, String> hm;			hm = RequestUtil.getValues(request);			vo.setValue(hm);			voExt.setValue(hm);			//判断是否已存在			QuerySet qs = dao.check(vo.getTimeCode());			if(qs.getRowCount() > 0)			{				String n = qs.getString(1, 1);				if(Integer.parseInt(n) > 0)				{					throw new Exception("工时订额已存在，保存失败！");				}			}			vo.setCreateUser(user.getAccount());			vo.setCreateTime(Pub.getCurrentDate());			// vo.setStatus(DicConstant.YXBS_02);			dao.insert(vo);			voExt.setAmountId(vo.getAmountId());			voExt.bindFieldToDic("STATUS", "YXBS");			voExt.bindFieldToDic("USER_TYPE", "CLYHLX");			atx.setOutMsg(voExt.getRowXml(), "工时订额维护新增成功！");			  //日志            LogManager.writeUserLog("","",Globals.OPERATION_TYPE_INSERT,LogManager.RESULT_SUCCESS                                    ,"添加工时订额 ["+vo.getAmountId()+" / "+vo.getTimeName()+"] 成功",user);		} catch (Exception e) {			atx.setException(e);			logger.error(e);			 //日志            LogManager.writeUserLog("", "", Globals.OPERATION_TYPE_INSERT, LogManager.RESULT_FAILURE,"添加工时订额失败："+e.toString(), user);		}	}	/**	 * @auther baixiaoliang 工时订额维护新增	 * @return void	 */	public void update() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		try {			SeBaTaskAmountVO vo = new SeBaTaskAmountVO();			SeBaTaskAmountVO_Ext voExt = new SeBaTaskAmountVO_Ext();			HashMap<String, String> hm;			hm = RequestUtil.getValues(request);			vo.setValue(hm);			voExt.setValue(hm);			vo.setUpdateUser(user.getAccount());			vo.setUpdateTime(Pub.getCurrentDate());			dao.update(vo);			voExt.setAmountId(vo.getAmountId());			voExt.bindFieldToDic("STATUS", "YXBS");			voExt.bindFieldToDic("USER_TYPE", "CLYHLX");			atx.setOutMsg(voExt.getRowXml(), "工时订额维护修改成功！");			  //日志            LogManager.writeUserLog("","",Globals.OPERATION_TYPE_INSERT,LogManager.RESULT_SUCCESS                                    ,"更新工时订额 ["+vo.getAmountId()+" / "+vo.getTimeName()+"] 成功",user);		} catch (Exception e) {			atx.setException(e);			logger.error(e);			 //日志            LogManager.writeUserLog("", "", Globals.OPERATION_TYPE_INSERT, LogManager.RESULT_FAILURE,"更新工时订额失败："+e.toString(), user);		}	}	/**	 * @auther baixiaoliang 工时订额维护无效	 * @return void	 */	public void resetStatus() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		String amountId = Pub.val(request, "amountId");		String status = Pub.val(request, "status");		try {			SeBaTaskAmountVO vo = new SeBaTaskAmountVO();			vo.setAmountId(amountId);			vo.setUpdateUser(user.getAccount());			vo.setUpdateTime(Pub.getCurrentDate());			//vo.setStatus(DicConstant.YXBS_02);			vo.setStatus(status);			dao.update(vo);			atx.setOutMsg(vo.getRowXml(), "工时订额状态置成无效成功！");			  //日志            LogManager.writeUserLog("","",Globals.OPERATION_TYPE_INSERT,LogManager.RESULT_SUCCESS                                    ,"工时订额 ["+amountId+" / "+status+"] 成功",user);		} catch (Exception e) {			atx.setException(e);			logger.error(e);			 //日志            LogManager.writeUserLog("", "", Globals.OPERATION_TYPE_INSERT, LogManager.RESULT_FAILURE,"工时订额失败："+e.toString(), user);		}	}	/**	 * @auther baixiaoliang 工时订额维护删除	 * @return void	 */	public void delete() throws Exception {		RequestWrapper request = atx.getRequest();		//获取当前登录user对象        User user = (User) atx.getSession().get(Globals.USER_KEY);		String status = Pub.val(request, "status");		String amountId = Pub.val(request, "amountId");		try {			if (DicConstant.YXBS_02.equals(status)) {				dao.delete(amountId);				atx.setOutMsg("", "工时订额维护额删除成功！");				  //日志	            LogManager.writeUserLog("","",Globals.OPERATION_TYPE_INSERT,LogManager.RESULT_SUCCESS	                                    ,"删除工时订额 ["+amountId+"] 成功",user);			} else {				atx.setOutMsg("", "只有无效的才可以进行删除操作！");			}		} catch (Exception e) {			atx.setException(e);			logger.error(e);			  LogManager.writeUserLog("","",Globals.OPERATION_TYPE_DELETE,LogManager.RESULT_FAILURE	                    ,"删除直发类型失败："+e.toString(),user);		}	}	/**	 * @auther baixiaoliang 工时订额维护查询	 * @return void	 */	public void search() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		PageManager page = new PageManager();		String conditions = RequestUtil.getConditionsWhere(request, page);		try {			BaseResultSet bs = dao.search(page, user, conditions);			atx.setOutData("bs", bs);		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}	/**	 * 工时定额配导入临时表查询	 * 	 * @throws Exception	 *             Author baixiaoliang 2014-07-25	 */	public void searchImport() throws Exception {		// 定义request对象		User user = (User) atx.getSession().get(Globals.USER_KEY);		PageManager page = new PageManager();		RequestWrapper request = atx.getRequest();		try {			String conditions = RequestUtil.getConditionsWhere(request,page);			BaseResultSet bs = dao.searchTmpImportBs(page, user,conditions);			atx.setOutData("bs", bs);		} catch (Exception e) {			logger.error(e);			atx.setException(e);		}	}	/**	 * 	 * @date()2014年8月27日	 * @author Administrator	 * @to_do:主车厂工时定额导入校验方法：临时表数据校验	 * @param user	 * @param bParams	 * @return	 * @throws Exception	 */	public List<ExcelErrors> checkData() throws Exception {		User user = (User) atx.getSession().get(Globals.USER_KEY);		ExcelErrors errors = null;		List<ExcelErrors> errorList = new LinkedList<ExcelErrors>();/*		//1、重复数据校验，临时表中,则必须删除一个		QuerySet qs2 = dao.searchData(user); 		if(qs2.getRowCount() > 1)		{			String errorStr = "";			for(int j=0; j<qs2.getRowCount(); j++){				String rowNum2 = qs2.getString(j+1, "ROW_NUM"); //行号				errorStr = errorStr + rowNum2 + "行,";			}			errorStr = errorStr.substring(0, errorStr.length()-1);//删除最后一个","号			errorStr = errorStr + "重复，请删除重复数据！";						errors=new ExcelErrors();			//添加错误描述			errors.setErrorDesc(errorStr);			errorList.add(errors);			if (errorList != null && errorList.size() > 0) {				return errorList;			} else {				return null;			}		}*/		//根据CODE关联后更新中间临时表		dao.merge(user);		QuerySet qs = dao.searchTmpInfoQs(user);// 查询此用户下的所有工时定额临时表信息		if (qs.getRowCount() > 0) {			for (int i = 0; i < qs.getRowCount(); i++) {				errors = new ExcelErrors();				String p = "^(0|[1-9][0-9]*)$";// 校验钱				  String amountSet = qs.getString(i+1, "AMOUNT_SET");				    String companyId = qs.getString(i+1, "COMPANY_ID");				    String modelsCode = qs.getString(i+1, "MODELS_CODE");				    String modelsId = qs.getString(i+1, "MODELS_ID");				    String orgId = qs.getString(i+1, "ORG_ID");				    String positionCode = qs.getString(i+1, "POSITION_CODE");				    String positionId = qs.getString(i+1, "POSITION_ID");				    String positionName = qs.getString(i+1, "POSITION_NAME");				    String remarks = qs.getString(i+1, "REMARKS");				    String rowNum = qs.getString(i+1, "ROW_NUM");				    String timeCode = qs.getString(i+1, "TIME_CODE");				    String timeName = qs.getString(i+1, "TIME_NAME");				    String tmpId = qs.getString(i+1, "TMP_ID");				    String userAccount = qs.getString(i+1, "USER_ACCOUNT");				    String userType = qs.getString(i+1, "USER_TYPE");				    String statusNa = qs.getString(i+1, "STATUS_NA");				    String status = qs.getString(i+1, "STATUS");												// 工时代码				if (null == timeCode || "".equals(timeCode)) {					errors=new ExcelErrors();					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("工时代码不能为空!");					errorList.add(errors);				}				if (null == statusNa || "".equals(statusNa)) {					errors=new ExcelErrors();					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("状态不能为空!");					errorList.add(errors);				}				if (null == status || "".equals(status)) {					errors=new ExcelErrors();					errors.setRowNum(Integer.parseInt(rowNum));					errors.setErrorDesc("状态不对!");					errorList.add(errors);				}						}			//3、重复数据校验，临时表中存在相同的仓库代码和配件代码信息，则必须删除一个			QuerySet qs2 = dao.searchData(user, ""); 			if(qs2.getRowCount() > 0)			{				for(int j=0; j<qs2.getRowCount(); j++){					String timeCode = qs2.getString(j+1, "TIME_CODE");					String errorStr = "";					QuerySet qs3 = dao.searchData(user, timeCode);					for(int k=0; k<qs3.getRowCount(); k++){						String rowNum3 = qs3.getString(k+1, "ROW_NUM"); //行号												errors=new ExcelErrors();						errors.setRowNum(Integer.parseInt(rowNum3));						if (k != (qs3.getRowCount() -1)) {							errors.setErrorDesc("工时代码重复数据!");							errorList.add(errors);						}	                    						errorStr = errorStr + rowNum3 + ",";					}										errorStr = errorStr.substring(0, errorStr.length()-1);//删除最后一个","号					errorStr = "工时代码是重复数据，重复行是("+errorStr+")！";										//添加错误描述					//errors=new ExcelErrors();					errors.setErrorDesc(errorStr);					errorList.add(errors);				}			}		}		if (errorList != null && errorList.size() > 0) {			return errorList;		} else {			return null;		}	}	/**	 * 导入确定按钮：把临时表的数据放入到主表	 * 	 * @throws Exception	 */	public void insertImport() throws Exception {		RequestWrapper request = atx.getRequest();		User user = (User) atx.getSession().get(Globals.USER_KEY);		try {			String errorInfoRowNum = Pub.val(request, "errorDataRowNum");			dao.insertTmpInfs(user,errorInfoRowNum);			atx.setOutMsg("", "导入成功！");		} catch (Exception e) {			logger.error(e);			atx.setException(e);		}	}	/**	 * 导出表数据	 * 	 * @throws Exception	 */	public void download() throws Exception {		// 定义request对象		ResponseWrapper response = atx.getResponse();		RequestWrapper request = atx.getRequest();		PageManager page = new PageManager();		String conditions = RequestUtil.getConditionsWhere(request, page);		try {			List<HeaderBean> header = new ArrayList<HeaderBean>();			HeaderBean hBean = null;			hBean = new HeaderBean();    		hBean.setName("ROWNUM");    		hBean.setTitle("序号");    		header.add(0,hBean);						hBean = new HeaderBean();			hBean.setName("TIME_CODE");			hBean.setTitle("工时代码");			header.add(1, hBean);			hBean = new HeaderBean();			hBean.setName("TIME_NAME");			hBean.setTitle("工时名称");			header.add(2, hBean);			hBean = new HeaderBean();			hBean.setName("AMOUNT_SET");			hBean.setTitle("工时定额");			header.add(3, hBean);			hBean = new HeaderBean();			hBean.setName("STATUS_NA");			hBean.setTitle("状态");			header.add(4, hBean);						hBean = new HeaderBean();			hBean.setName("CREATE_USER");			hBean.setTitle("创建人");			header.add(5, hBean);			hBean = new HeaderBean();			hBean.setName("CREATE_TIME");			hBean.setTitle("创建时间");			header.add(6, hBean);			hBean = new HeaderBean();			hBean.setName("UPDATE_USER");			hBean.setTitle("更新人");			header.add(7, hBean);			hBean = new HeaderBean();			hBean.setName("UPDATE_TIME");			hBean.setTitle("更新时间");			header.add(8, hBean);			QuerySet querySet = dao.download(conditions);			ExportManager.exportFile(response.getHttpResponse(), "工时定额",					header, querySet);		} catch (Exception e) {			atx.setException(e);			logger.error(e);		}	}			 /**     * 导出错误数据按钮：把临时表的错误数据导出到EXCEL     * @throws Exception     * Author suoxiuli 2014-11-5     */    public void expTmpErrorData()throws Exception{    	    	//获取封装后的request对象    	RequestWrapper request = atx.getRequest();    	User user = (User) atx.getSession().get(Globals.USER_KEY);    	// 将request流中的信息转化为where条件        String conditions = Pub.val(request, "errorDataRowNum");   	 	// 定义response对象        ResponseWrapper responseWrapper= atx.getResponse();        try {        	            List<HeaderBean> header = new ArrayList<HeaderBean>();            HeaderBean hBean = null;            hBean = new HeaderBean();    		hBean.setName("ROW_NUM");    		hBean.setTitle("导入数据EXCEL行号");    		header.add(0,hBean);			hBean = new HeaderBean();			hBean.setName("TIME_CODE");			hBean.setTitle("工时代码");			header.add(1, hBean);			hBean = new HeaderBean();			hBean.setName("TIME_NAME");			hBean.setTitle("工时名称");			header.add(2, hBean);			hBean = new HeaderBean();			hBean.setName("AMOUNT_SET");			hBean.setTitle("工时定额");			header.add(3, hBean);			hBean = new HeaderBean();			hBean.setName("STATUS_NA");			hBean.setTitle("状态");			header.add(4, hBean);            QuerySet querySet = dao.expTmpErrorData(conditions,user);            ExportManager.exportFile(responseWrapper.getHttpResponse(), "工时定额", header, querySet);        } catch (Exception e) {        	atx.setException(e);            logger.error(e);        }    }}