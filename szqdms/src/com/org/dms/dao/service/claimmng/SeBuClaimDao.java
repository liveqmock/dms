package com.org.dms.dao.service.claimmng;import com.org.dms.vo.service.SeBaClaimCodeVO;import com.org.dms.vo.service.SeBaExceedDateLogVO;import com.org.dms.vo.service.SeBuClaimVO;import com.org.framework.base.BaseDAO;import com.org.framework.common.BaseResultSet;import com.org.framework.common.PageManager;import com.org.framework.common.QuerySet;import com.org.framework.common.User;import com.org.mvc.context.ActionContext; /**   * SeBuClaimDao   * <p>Company: szq</p>   * @author baixiaoliang   * @version 1.0  2014-7-14  */public class SeBuClaimDao extends BaseDAO{ 		   //定义instance    public  static final SeBuClaimDao getInstance(ActionContext atx) {SeBuClaimDao dao = new SeBuClaimDao();  atx.setDBFactory(dao.factory);return dao; }  /**   * @auther baixiaoliang   * @return String  */ public boolean insert(SeBuClaimVO vo) throws Exception {         return factory.insert(vo);       } /**   *     * @return boolean   */ public boolean update(SeBuClaimVO vo) throws Exception {         return factory.update(vo);       }/**	 * 批量更新	 * @return boolean	 *//*public boolean updateAll(String claimIds,SeBuClaimVO vo) throws Exception {		StringBuffer sql = new StringBuffer();		sql.append(" update SE_BU_CLAIM SET ");				sql.append(" OVERDUE_DAYS = '" + vo.getOverdueDays() + "'");			sql.append(" where CLAIM_ID in (" + claimIds + ") ");		return factory.update(sql.toString(), null);	} *//** * 批量更新超单日期 * @return boolean */public boolean updateAll(String claimIds,SeBuClaimVO vo) throws Exception {	//先将超单修改插入轨迹表	StringBuffer sql2= new StringBuffer();	sql2.append(" INSERT INTO SE_BA_EXCEED_DATE_LOG(LOG_ID, CLAIM_ID, CLAIM_NO, ORG_ID, ORG_NAME,ORG_CODE,EXCEED_DAYS, UPDATE_USER,UPDATE_TIME)\n" );	sql2.append("select F_GETID(),B.CLAIM_ID, B.CLAIM_NO, B.ORG_ID, C.ONAME, C.CODE,\n" );	sql2.append("B.OVERDUE_DAYS,B.UPDATE_USER,B.UPDATE_TIME ");	sql2.append("  from SE_BU_CLAIM B, TM_ORG C\n" );	sql2.append(" where B.CLAIM_ID in (" + claimIds + ") ");	sql2.append("   AND B.ORG_ID = C.ORG_ID ");	boolean bs2=factory.update(sql2.toString(), null);		//索赔单表进行超单数据修改	StringBuffer sql = new StringBuffer();	sql.append(" update SE_BU_CLAIM SET ");		 sql.append(" OVERDUE_DAYS = '" + vo.getOverdueDays() + "'");		sql.append(" where CLAIM_ID in (" + claimIds + ") ");		boolean bs1= factory.update(sql.toString(), null);				return bs1&&bs2;}  /** @throws Exception    设定文件    * @return BaseResultSet    返回类型   */ public BaseResultSet search(PageManager page, User user, String conditions) throws Exception{	String wheres = conditions;	// wheres += " AND T.IF_OVERDUE='100201' and round(to_number(sysdate-T.APPLY_DATE)) >T.OVERDUE_DAYS ";	  page.setFilter(wheres);	  //定义返回结果集	  BaseResultSet bs = null;StringBuffer sql = new StringBuffer();sql.append("  SELECT  ");    sql.append(" T.ACTIVITY_ID,");    sql.append(" T.APPLY_ADDRES,");    sql.append(" T.APPLY_DATE,");    sql.append(" T.APPLY_USER_TYPE,");    sql.append(" T.BUY_DATE,");    sql.append(" T.CLAIM_ID,");    sql.append(" T.CLAIM_NO,");    sql.append(" T.CLAIM_STATUS,");    sql.append(" T.CLAIM_TYPE,");    sql.append(" T.COMPANY_ID,");    sql.append(" T.CREATE_TIME,");    sql.append(" T.CREATE_USER,");    sql.append(" T.FACTORY_DATE,");    sql.append(" T.FAULT_ADDRESS,");    sql.append(" T.FAULT_CODE,");    sql.append(" T.FAULT_DATE,");    sql.append(" T.FAULT_FROM,");    sql.append(" T.FAULT_ID,");    sql.append(" T.GUARANTEE_NO,");    sql.append(" T.IF_OVERDUE,");    sql.append(" T.IF_PRE_AUTHOR,");    sql.append(" T.LICENSE_PLATE,");    sql.append(" T.LINK_MAN,");    sql.append(" T.MAINTENANCE_DATE,");    sql.append(" T.MILEAGE,");    sql.append(" T.OEM_COMPANY_ID,");    sql.append(" T.ORG_ID,");    sql.append(" T.OUT_AMOUNT,");    sql.append(" T.OVERDUE_DAYS,");    sql.append(" T.PHONE,");    sql.append(" T.PRE_AUTHOR_ID,");    sql.append(" T.REMARKS,");    sql.append(" T.SECRET_LEVEL,");    sql.append(" T.STATUS,");    sql.append(" T.UPDATE_TIME,");    sql.append(" T.UPDATE_USER,");    sql.append(" T.USER_ADDRESS,");    sql.append(" T.USER_NAME,");    sql.append(" T.USER_NO,");    sql.append(" T.USER_TYPE,");    sql.append(" T.VEHICLE_ID,");    sql.append(" T.VEHICLE_USE,");    sql.append(" T.VIN,");    sql.append(" T.WORK_ID");sql.append(" FROM SE_BU_CLAIM T ");//执行方法，不需要传递conn参数bs = factory.select(sql.toString(), page);    bs.setFieldDateFormat("APPLY_DATE", "yyyy-MM-dd");    bs.setFieldDateFormat("BUY_DATE", "yyyy-MM-dd");    bs.setFieldDateFormat("CREATE_TIME", "yyyy-MM-dd");    bs.setFieldDateFormat("FACTORY_DATE", "yyyy-MM-dd");    bs.setFieldDateFormat("FAULT_DATE", "yyyy-MM-dd");    bs.setFieldDateFormat("MAINTENANCE_DATE", "yyyy-MM-dd");    bs.setFieldDateFormat("UPDATE_TIME", "yyyy-MM-dd");		bs.setFieldDic("STATUS","YXBS");	//	bs.setFieldDic("USER_TYPE","CLYHLX");//绑定组织字典，将ORG_ID翻译为组织名称//bs.setFieldOrgDeptSimpleName("ORG_ID");//bs.setFieldOrgCompanySimpleName("COMPANY_ID"); return bs; }   /** @throws Exception    设定文件    * @return BaseResultSet    返回类型   */ public BaseResultSet searchClaim(PageManager page, User user, String conditions) throws Exception{	String wheres = conditions;  wheres += " AND ROUND(TO_NUMBER(SYSDATE-T.APPLY_DATE)) >T.OVERDUE_DAYS ";	  page.setFilter(wheres);	  //定义返回结果集	  BaseResultSet bs = null;	  StringBuffer sql= new StringBuffer();	  sql.append("SELECT T.CLAIM_ID,T.CLAIM_NO,T.VEHICLE_ID,T.IF_OVERDUE,T.OVERDUE_DAYS,round(to_number(sysdate-T.APPLY_DATE)) EXCEED_DAYS ," );	  sql.append("T.ORG_ID " );	  sql.append(" FROM SE_BU_CLAIM T\n" );	//执行方法，不需要传递conn参数bs = factory.select(sql.toString(), page);    bs.setFieldDateFormat("CREATE_TIME", "yyyy-MM-dd");    bs.setFieldDateFormat("UPDATE_TIME", "yyyy-MM-dd");	bs.setFieldDic("STATUS","YXBS");	//	bs.setFieldDic("USER_TYPE","CLYHLX");//绑定组织字典，将ORG_ID翻译为组织名称   bs.setFieldOrgDeptSimpleName("ORG_ID");//bs.setFieldOrgCompanySimpleName("COMPANY_ID"); return bs; } /** @throws Exception    设定文件    * @return QuerySet    返回类型   */public QuerySet check(String claimId) throws Exception{QuerySet qs = null;StringBuffer sql = new StringBuffer();sql.append("  SELECT COUNT(1) NUMS FROM  SE_BU_CLAIM ");sql.append("  WHERE CLAIM_ID=");sql.append(claimId );qs = factory.select(null, sql.toString());return qs; }  /** @throws Exception    设定文件    * @return boolean    返回类型   */public boolean delete(String claimId) throws Exception{StringBuffer sql = new StringBuffer();sql.append("  DELETE SE_BU_CLAIM ");sql.append("  WHERE CLAIM_ID=");sql.append(claimId );return factory.delete(sql.toString(), null); } }
