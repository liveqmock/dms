package com.org.dms.dao.service.claimmng;import com.org.dms.common.DicConstant;import com.org.dms.vo.service.SeBuWorkDispatchUerRlVO;import com.org.dms.vo.service.SeBuWorkDispatchVO;import com.org.dms.vo.service.SeBuWorkOrderVO;import com.org.framework.base.BaseDAO;import com.org.framework.common.BaseResultSet;import com.org.framework.common.PageManager;import com.org.framework.common.QuerySet;import com.org.framework.common.User;import com.org.mvc.context.ActionContext; /**   * SeBuWorkDispatchDao   * <p>Company: szq</p>   * @author baixiaoliang   * @version 1.0  2014-7-14  */public class SeBuWorkDispatchDao extends BaseDAO{	public  static final SeBuWorkDispatchDao getInstance(ActionContext atx) 	{		SeBuWorkDispatchDao dao = new SeBuWorkDispatchDao(); 		atx.setDBFactory(dao.factory);		return dao;	}      /**    * 查询工单表 维修完工 (下端)   @throws Exception    设定文件      * @return BaseResultSet    返回类型     */   public BaseResultSet searchWorkOrder(PageManager page, User user, String conditions) throws Exception   {	   String wheres = conditions;	   wheres += " AND T.ORG_ID="+user.getOrgId(); 	   page.setFilter(wheres);	   BaseResultSet bs = null;	   StringBuffer sql= new StringBuffer();	   sql.append("SELECT T.APPLY_ADDRESS,\n" );	   sql.append("       T.APPLY_DATE,\n" );	   sql.append("       T.APPLY_MOBIL,\n" );	   sql.append("       T.APPLY_REMARKS,\n" );	   sql.append("       T.APPLY_USER,\n" );	   sql.append("       T.ARRIVE_DATE,\n" );	   sql.append("       T.COMPANY_ID,\n" );	   sql.append("       T.COMPLETE_DATE,\n" );	   sql.append("       T.CREATE_TIME,\n" );	   sql.append("       T.CREATE_USER,\n" );	   sql.append("       T.END_LATITUDE,\n" );	   sql.append("       T.END_LONGITUDE,\n" );	   sql.append("       T.GO_DATE,\n" );	   sql.append("       T.IF_OUT,\n" );	   sql.append("       T.OEM_COMPANY_ID,\n" );	   sql.append("       T.ORG_ID,\n" );	   sql.append("       T.REJECTION_DATE,\n" );	   sql.append("       T.REPAIR_DATE,\n" );	   sql.append("       T.REPAIR_USER,\n" );	   sql.append("       T.REP_USER_TEL,\n" );	   sql.append("       T.SECRET_LEVEL,\n" );	   sql.append("       T.START_LATITUDE,\n" );	   sql.append("       T.START_LONGITUDE,\n" );	   sql.append("       T.STATUS,\n" );	   sql.append("       T.UPDATE_TIME,\n" );	   sql.append("       T.UPDATE_USER,\n" );	   sql.append("       T.WORK_ID,\n" );	   sql.append("       T.WORK_NO,\n" );	   sql.append("       T.WORK_VIN,\n" );	   sql.append("       T.WORK_STATUS,\n" );	   sql.append("       T.WORK_TYPE,\n" );	   sql.append("       T.CALL_NUMBER,\n" );	   sql.append("       T.JOBORDER_OPERATOR,\n" );	   sql.append("       T.JOBORDER_TIME\n" );	   sql.append("  FROM SE_BU_WORK_ORDER T");	   bs = factory.select(sql.toString(), page);	   bs.setFieldDateFormat("APPLY_DATE", "yyyy-MM-dd HH:mm:ss");	   bs.setFieldDateFormat("ARRIVE_DATE", "yyyy-MM-dd HH:mm:ss");	   bs.setFieldDateFormat("COMPLETE_DATE", "yyyy-MM-dd HH:mm:ss");	   bs.setFieldDateFormat("CREATE_TIME", "yyyy-MM-dd");	   bs.setFieldDateFormat("GO_DATE", "yyyy-MM-dd HH:mm:ss");	   bs.setFieldDateFormat("REJECTION_DATE", "yyyy-MM-dd");	   bs.setFieldDateFormat("REPAIR_DATE", "yyyy-MM-dd HH:mm:ss");	   bs.setFieldDateFormat("JOBORDER_TIME", "yyyy-MM-dd");	   bs.setFieldDateFormat("UPDATE_TIME", "yyyy-MM-dd");	   bs.setFieldDic("STATUS","YXBS");	   bs.setFieldDic("WORK_STATUS","PGDZT");		   bs.setFieldDic("IF_OUT","SF");	   bs.setFieldDic("WORK_TYPE","PGLX");	   return bs;   }      /**    * 维修完工查询（车厂端）    * @param page    * @param user    * @param conditions    * @return    * @throws Exception    */   public BaseResultSet searchOemWorkOrder(PageManager page, User user, String conditions)throws Exception{	   String wheres = conditions;	   page.setFilter(wheres);	   BaseResultSet bs = null;	   StringBuffer sql= new StringBuffer();	   sql.append("SELECT T.APPLY_ADDRESS,\n" );	   sql.append("       T.APPLY_DATE,\n" );	   sql.append("       T.APPLY_MOBIL,\n" );	   sql.append("       T.APPLY_REMARKS,\n" );	   sql.append("       T.APPLY_USER,\n" );	   sql.append("       T.ARRIVE_DATE,\n" );	   sql.append("       T.COMPANY_ID,\n" );	   sql.append("       T.COMPLETE_DATE,\n" );	   sql.append("       T.CREATE_TIME,\n" );	   sql.append("       T.CREATE_USER,\n" );	   sql.append("       T.END_LATITUDE,\n" );	   sql.append("       T.END_LONGITUDE,\n" );	   sql.append("       T.GO_DATE,\n" );	   sql.append("       T.IF_OUT,\n" );	   sql.append("       T.OEM_COMPANY_ID,\n" );	   sql.append("       T.ORG_ID,\n" );	   sql.append("       T.REJECTION_DATE,\n" );	   sql.append("       T.REPAIR_DATE,\n" );	   sql.append("       T.REPAIR_USER,\n" );	   sql.append("       T.REP_USER_TEL,\n" );	   sql.append("       T.SECRET_LEVEL,\n" );	   sql.append("       T.START_LATITUDE,\n" );	   sql.append("       T.START_LONGITUDE,\n" );	   sql.append("       T.STATUS,\n" );	   sql.append("       T.UPDATE_TIME,\n" );	   sql.append("       T.UPDATE_USER,\n" );	   sql.append("       T.WORK_ID,\n" );	   sql.append("       T.WORK_NO,\n" );	   sql.append("       T.WORK_VIN,\n" );	   sql.append("       T.WORK_STATUS,\n" );	   sql.append("       T.WORK_TYPE,\n" );	   sql.append("       T.CALL_NUMBER,\n" );	   sql.append("       T.JOBORDER_OPERATOR,\n" );	   sql.append("       T.JOBORDER_TIME,\n" );	   sql.append("       T.ORG_ID ORG_NAME,\n" );	   sql.append("       T.ORG_ID ORG_CODE\n" );	   sql.append("  FROM SE_BU_WORK_ORDER T\n" );	   bs = factory.select(sql.toString(), page);	   bs.setFieldDateFormat("APPLY_DATE", "yyyy-MM-dd HH:mm:ss");	   bs.setFieldDateFormat("ARRIVE_DATE", "yyyy-MM-dd HH:mm:ss");	   bs.setFieldDateFormat("COMPLETE_DATE", "yyyy-MM-dd HH:mm:ss");	   bs.setFieldDateFormat("CREATE_TIME", "yyyy-MM-dd");	   bs.setFieldDateFormat("GO_DATE", "yyyy-MM-dd HH:mm:ss");	   bs.setFieldDateFormat("REJECTION_DATE", "yyyy-MM-dd");	   bs.setFieldDateFormat("REPAIR_DATE", "yyyy-MM-dd HH:mm:ss");	   bs.setFieldDateFormat("JOBORDER_TIME", "yyyy-MM-dd");	   bs.setFieldDateFormat("UPDATE_TIME", "yyyy-MM-dd");	   bs.setFieldDic("STATUS","YXBS");	   bs.setFieldDic("WORK_STATUS","PGDZT");		   bs.setFieldDic("IF_OUT","SF");	   bs.setFieldDic("WORK_TYPE","PGLX");	   bs.setFieldOrgDeptSimpleName("ORG_NAME");//简称	   bs.setFieldOrgDeptCode("ORG_CODE");	   return bs;   }   	 /**	   * @auther baixiaoliang	   * @return String	  */   public boolean insert(SeBuWorkDispatchVO vo) throws Exception {	   return factory.insert(vo);   }	 /**	  * 派工单表增加	   * @auther baixiaoliang	   * @return String	  */   public boolean insertWorkUser(SeBuWorkDispatchUerRlVO vo) throws Exception {	   return factory.insert(vo);   }	 /**	  * 增加派工单表派工信息和更新老派工信息无效	  * @auther baixiaoliang	  * @return String	 */   public boolean insertWorkDispatch(SeBuWorkDispatchVO vo,SeBuWorkOrderVO workOrderVo) throws Exception {	   //新更新本工单有效记录无效	   //   boolean bs2 = factory.update(upDatevo);	   StringBuffer sql = new StringBuffer();	   sql.append(" UPDATE SE_BU_WORK_DISPATCH SET ");	   sql.append(" STATUS = " + DicConstant.YXBS_02 + " ");	   sql.append(" WHERE WORK_ID =" + vo.getWorkId() + " ");	   sql.append(" AND STATUS= " + DicConstant.YXBS_01+ " ");	   boolean bs2= factory.update(sql.toString(), null);	   //新增加本工单的有效派工记录	   boolean bs1 = factory.insert(vo);	   boolean bs3 = factory.update(workOrderVo);	   return bs1 && bs2 && bs3;   }          public QuerySet getWorkOrderImp(String workId)throws Exception{	   StringBuffer sql= new StringBuffer();	   sql.append("SELECT I.JOBORDER_PK, I.JOBORDER_CODE\n" );	   sql.append("  FROM SE_BU_WORKORDER_IMP I, SE_BU_WORK_ORDER O\n" );	   sql.append(" WHERE I.JOBORDER_CODE = O.WORK_NO\n" );	   sql.append("   AND I.STATUS = 0\n" );//未处理的	   sql.append("   AND O.WORK_ID = "+workId+"");	   return factory.select(null, sql.toString());   }      /**    * 更新工单间接表    * @param workId    * @return    * @throws Exception    */   public boolean updateWorkImp(String workId)throws Exception{	   StringBuffer sql= new StringBuffer();	   sql.append("UPDATE SE_BU_WORKORDER_IMP I\n" );	   sql.append("   SET I.STATUS = 1\n" );	   sql.append(" WHERE EXISTS (SELECT 1\n" );	   sql.append("          FROM SE_BU_WORK_ORDER O\n" );	   sql.append("         WHERE I.JOBORDER_CODE = O.WORK_NO\n" );	   sql.append("           AND O.WORK_ID = "+workId+")");	   return factory.update(sql.toString(), null);   }   /**    * 派工人 已派工    * @param userIds    * @return    * @throws Exception    */   public boolean updateDispatchUser(String userIds)throws Exception{	   StringBuffer sql= new StringBuffer();	   sql.append("UPDATE SE_BU_WORK_DISPATCH_UER U\n" );	   sql.append("   SET U.USER_STATUS = "+DicConstant.YXBS_02+"\n" );	   sql.append(" WHERE U.USER_ID IN ("+userIds+")");	   return factory.update(sql.toString(), null);   }	 /**	   * 更新派工表	   * @return boolean 	  */   public boolean update(SeBuWorkDispatchVO vo) throws Exception {	   return factory.update(vo);   }      /**    * 修改派工人    * @param workId    * @return    * @throws Exception    */   public boolean updatedisPatch(String workId)throws Exception{	   StringBuffer sql= new StringBuffer();	   sql.append("UPDATE SE_BU_WORK_DISPATCH_UER U\n" );	   sql.append("   SET U.USER_STATUS = "+DicConstant.YXBS_01+"\n" );	   sql.append(" WHERE EXISTS (SELECT U.USER_ID\n" );	   sql.append("          FROM SE_BU_WORK_DISPATCH_UER_RL R, SE_BU_WORK_DISPATCH D\n" );	   sql.append("         WHERE R.USER_ID = U.USER_ID\n" );	   sql.append("           AND D.DISPATCH_ID = R.DISPATCH_ID\n" );	   sql.append("           AND D.WORK_ID = "+workId+")");	   return factory.update(sql.toString(), null);   }	 /**	  * 更新工单表	  * @auther baixiaoliang	  * @return String	 */   public boolean updatesertWorkOrder(SeBuWorkOrderVO vo) throws Exception {	   return factory.update(vo);   }        public boolean updateWorkOrder(SeBuWorkOrderVO vo) throws Exception {	   return factory.update(vo);   }   /**	 @throws Exception    设定文件 	   * @return BaseResultSet    返回类型 	  */   public BaseResultSet search(PageManager page, User user, String conditions) throws Exception   {	   String wheres = conditions;	   // wheres += " AND T.MODELS_ID = B.MODELS_ID AND T.POSITION_ID = C.POSITION_ID";	   String orgId=user.getOrgId();	   wheres += " AND T.ORG_ID = "+orgId+" \n"+			   " ORDER BY T.WORK_ID ";	   page.setFilter(wheres);	   //定义返回结果集	   BaseResultSet bs = null;	   StringBuffer sql = new StringBuffer();	   sql.append("  SELECT  ");	   sql.append(" T.COMPANY_ID,");	   sql.append(" T.CREATE_TIME,");	   sql.append(" T.CREATE_USER,");	   sql.append(" T.DISPATCH_ID,");	   sql.append(" T.IF_OUT,");	   sql.append(" T.IF_VEHICLE,");	   sql.append(" T.LICENSE_PLATE,");	   sql.append(" T.ORG_ID,");	   sql.append(" T.REMARKS,");	   sql.append(" T.STATUS,");	   sql.append(" T.UPDATE_TIME,");	   sql.append(" T.UPDATE_USER,");	   sql.append(" T.USER_ID,");	   sql.append(" T.USER_MOBIL,");	   sql.append(" T.USER_NAME,");	   sql.append(" T.VEHICLE_ID,");	   sql.append(" T.WORK_ID,");	   sql.append(" T.WORK_NO");	   sql.append(" FROM SE_BU_WORK_DISPATCH T ");		//执行方法，不需要传递conn参数	   bs = factory.select(sql.toString(), page);	   bs.setFieldDateFormat("CREATE_TIME", "yyyy-MM-dd");	   bs.setFieldDateFormat("UPDATE_TIME", "yyyy-MM-dd");	   bs.setFieldDic("STATUS","YXBS");	   bs.setFieldDic("IF_OUT","SF");	   return bs;   }  	 /**	 @throws Exception    设定文件 	   * @return QuerySet    返回类型 	  */	public QuerySet check(String dispatchId) throws Exception	{		QuerySet qs = null;		StringBuffer sql = new StringBuffer();		sql.append("  SELECT COUNT(1) NUMS FROM  SE_BU_WORK_DISPATCH ");		sql.append("  WHERE DISPATCH_ID=");		sql.append(dispatchId );		qs = factory.select(null, sql.toString());		return qs;	 }	 	 /**	 @throws Exception    设定文件 	   * @return boolean    返回类型 	  */		public boolean delete(String dispatchId) throws Exception	{		StringBuffer sql = new StringBuffer();		sql.append("  DELETE SE_BU_WORK_DISPATCH ");		sql.append("  WHERE DISPATCH_ID=");		sql.append(dispatchId );		return factory.delete(sql.toString(), null);	}		/**	 * 车厂端派工执行单查询	 * @return	 * @throws Exception	 */	public BaseResultSet searchWorkOrderDispatch(PageManager page, User user, String conditions)throws Exception{		String wheres = conditions;			   wheres += " AND T.ORG_ID = O.ORG_ID";		page.setFilter(wheres);		BaseResultSet bs = null;		StringBuffer sql= new StringBuffer();		sql.append("SELECT T.APPLY_ADDRESS,\n" );		sql.append("       T.APPLY_DATE,\n" );		sql.append("       T.APPLY_MOBIL,\n" );		sql.append("       T.APPLY_REMARKS,\n" );		sql.append("       T.APPLY_USER,\n" );		sql.append("       T.ARRIVE_DATE,\n" );		sql.append("       T.COMPANY_ID,\n" );		sql.append("       T.COMPLETE_DATE,\n" );		sql.append("       T.CREATE_TIME,\n" );		sql.append("       T.CREATE_USER,\n" );		sql.append("       T.END_LATITUDE,\n" );		sql.append("       T.END_LONGITUDE,\n" );		sql.append("       T.GO_DATE,\n" );		sql.append("       T.IF_OUT,\n" );		sql.append("       T.OEM_COMPANY_ID,\n" );		sql.append("       T.ORG_ID,\n" );		sql.append("       T.ORG_ID ORG_CODE,\n" );		sql.append("       T.ORG_ID ORG_NAME,\n" );		sql.append("       T.REJECTION_DATE,\n" );		sql.append("       T.REPAIR_DATE,\n" );		sql.append("       T.REPAIR_USER,\n" );		sql.append("       T.REP_USER_TEL,\n" );		sql.append("       T.SECRET_LEVEL,\n" );		sql.append("       T.START_LATITUDE,\n" );		sql.append("       T.START_LONGITUDE,\n" );		sql.append("       T.STATUS,\n" );		sql.append("       T.UPDATE_TIME,\n" );		sql.append("       T.UPDATE_USER,\n" );		sql.append("       T.WORK_ID,\n" );		sql.append("       T.WORK_NO,\n" );		sql.append("       T.WORK_VIN,\n" );		sql.append("       T.WORK_STATUS,\n" );		sql.append("       T.WORK_TYPE,\n" );		sql.append("       T.CALL_NUMBER,\n" );		sql.append("       T.JOBORDER_OPERATOR,\n" );		sql.append("       T.JOBORDER_TIME\n" );		sql.append("  FROM SE_BU_WORK_ORDER T, TM_ORG O\n" );		bs = factory.select(sql.toString(), page);		bs.setFieldDateFormat("APPLY_DATE", "yyyy-MM-dd HH:mm:ss");		bs.setFieldDateFormat("ARRIVE_DATE", "yyyy-MM-dd HH:mm:ss");		bs.setFieldDateFormat("COMPLETE_DATE", "yyyy-MM-dd HH:mm:ss");		bs.setFieldDateFormat("CREATE_TIME", "yyyy-MM-dd");		bs.setFieldDateFormat("GO_DATE", "yyyy-MM-dd HH:mm:ss");		bs.setFieldDateFormat("REJECTION_DATE", "yyyy-MM-dd");		bs.setFieldDateFormat("REPAIR_DATE", "yyyy-MM-dd HH:mm:ss");		bs.setFieldDateFormat("JOBORDER_TIME", "yyyy-MM-dd");		bs.setFieldDateFormat("UPDATE_TIME", "yyyy-MM-dd");		bs.setFieldDic("STATUS","YXBS");		bs.setFieldDic("WORK_STATUS","PGDZT");			bs.setFieldDic("IF_OUT","SF");		bs.setFieldDic("WORK_TYPE","PGLX");		bs.setFieldOrgDeptSimpleName("ORG_NAME");//简称		bs.setFieldOrgDeptCode("ORG_CODE");		return bs;	}}
