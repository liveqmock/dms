package com.org.dms.dao.service.basicinfomng;import java.util.ArrayList;import java.util.List;import com.org.dms.common.DicConstant;import com.org.dms.vo.service.SeBaFaultTasktimeVO;import com.org.dms.vo.service.SeBaFaultTasktimeTmpVO;import com.org.framework.base.BaseDAO;import com.org.framework.common.BaseResultSet;import com.org.framework.common.PageManager;import com.org.framework.common.QuerySet;import com.org.framework.common.User;import com.org.mvc.context.ActionContext; /**   * SeBaFaultTasktimeDao   * <p>Company: szq</p>   * @author baixiaoliang   * @version 1.0  2014-7-14  */public class SeBaFaultTasktimeDao extends BaseDAO{ 		   //定义instance    public  static final SeBaFaultTasktimeDao getInstance(ActionContext atx) {SeBaFaultTasktimeDao dao = new SeBaFaultTasktimeDao();  atx.setDBFactory(dao.factory);return dao; }  /**   * @auther baixiaoliang   * @return String  */ public boolean insert(SeBaFaultTasktimeVO vo) throws Exception {         return factory.insert(vo);       } /**   *     * @return boolean   */ public boolean update(SeBaFaultTasktimeVO vo) throws Exception {         return factory.update(vo);       } /** @throws Exception    设定文件    * @return BaseResultSet    返回类型   */ public BaseResultSet search(PageManager page, User user, String conditions,String partCode,String partName) throws Exception{	String wheres = conditions;	wheres += " AND T.PATTERN_ID = B.PATTERN_ID   AND T.AMOUNT_ID=D.AMOUNT_ID";	 wheres += " AND EXISTS\n" +   		  "     (SELECT 1 FROM PT_BA_INFO C WHERE C.F_POSITION_ID = B.POSITION_ID \n" ;	  if(!("".equals(partCode) || partCode==null)){	    	wheres+=" AND C.PART_CODE LIKE '%"+partCode+"%' \n";	    }	    if(!("".equals(partName) || partName==null)){	    	wheres+=" AND  C.PART_NAME LIKE '%"+partName+"%' \n";	    }	   	wheres +=      	  " )\n";	wheres += "    ORDER BY FAULT_PATTERN_CODE";	  page.setFilter(wheres);	  //定义返回结果集	  BaseResultSet bs = null;StringBuffer sql = new StringBuffer();sql.append("  SELECT  ");    sql.append(" T.AMOUNT_ID,");    sql.append(" T.COMPANY_ID,");    sql.append(" T.CREATE_TIME,");    sql.append(" T.CREATE_USER,");    sql.append(" T.FAULT_PATTERN_CODE,");    sql.append(" T.FAULT_PATTERN_NAME,");    sql.append(" T.OEM_COMPANY_ID,");    sql.append(" T.ORG_ID,");    sql.append(" T.PATTERN_ID,");    sql.append(" T.RELATION_ID,");    sql.append(" T.SECRET_LEVEL,");    sql.append(" T.STATUS,");    sql.append(" T.UPDATE_TIME,");    sql.append(" T.UPDATE_USER,");    sql.append(" T.TIME_CODE,");    sql.append(" T.TIME_NAME,");    sql.append(" B.FAULT_CODE,");    sql.append(" B.FAULT_NAME,");    sql.append(" B.POSITION_CODE,");    sql.append(" B.POSITION_NAME,");    sql.append("  D.AMOUNT_SET");sql.append(" FROM SE_BA_FAULT_TASKTIME T, ");sql.append("  SE_BA_FAULT_PATTERN B,SE_BA_TASK_AMOUNT D ");//执行方法，不需要传递conn参数bs = factory.select(sql.toString(), page);    bs.setFieldDateFormat("CREATE_TIME", "yyyy-MM-dd");    bs.setFieldDateFormat("UPDATE_TIME", "yyyy-MM-dd");    bs.setFieldDic("STATUS","YXBS");//绑定组织字典，将ORG_ID翻译为组织名称//bs.setFieldOrgDeptSimpleName("ORG_ID");//bs.setFieldOrgCompanySimpleName("COMPANY_ID"); return bs; } /** @throws Exception    设定文件    * @return QuerySet    返回类型   */public QuerySet check(String relationId) throws Exception{QuerySet qs = null;StringBuffer sql = new StringBuffer();sql.append("  SELECT COUNT(1) NUMS FROM  SE_BA_FAULT_TASKTIME ");sql.append("  WHERE RELATION_ID=");sql.append(relationId );qs = factory.select(null, sql.toString());return qs; }  /** @throws Exception    设定文件    * @return boolean    返回类型   */public boolean delete(String relationId) throws Exception{StringBuffer sql = new StringBuffer();sql.append("  DELETE SE_BA_FAULT_TASKTIME ");sql.append("  WHERE RELATION_ID=");sql.append(relationId );return factory.delete(sql.toString(), null); }/** *  * @param coefficientId * @return * @throws Exception */public boolean merge( User user) throws Exception {        StringBuffer sql2= new StringBuffer();    sql2.append("MERGE INTO SE_BA_FAULT_TASKTIME_TMP M\n" );    sql2.append("USING (SELECT\n" );    sql2.append("\n" );    sql2.append("        B.PATTERN_ID,\n" );    sql2.append("        B.FAULT_CODE,\n" );    sql2.append("        B.FAULT_NAME,\n" );    sql2.append("        C.AMOUNT_ID,\n" );    sql2.append("        C.TIME_CODE,\n" );    sql2.append("        C.TIME_NAME,K.ID STATUS\n\n" );    sql2.append("         FROM SE_BA_FAULT_TASKTIME_TMP T,\n" );    sql2.append("              SE_BA_FAULT_PATTERN      B,\n" );    sql2.append("              SE_BA_TASK_AMOUNT        C,DIC_TREE K\n" );    sql2.append("        WHERE T.TIME_CODE = C.TIME_CODE\n" );    sql2.append("          AND T.FAULT_PATTERN_CODE = B.FAULT_CODE AND  T.STATUS_NA=K.DIC_VALUE AND K.PARENT_ID=100200\n" );	sql2.append("  AND NOT EXISTS (SELECT  FAULT_PATTERN_CODE，TIME_CODE FROM SE_BA_FAULT_TASKTIME_TMP A\n" );   	sql2.append("  WHERE A.FAULT_PATTERN_CODE=T.FAULT_PATTERN_CODE\n" );    sql2.append("  AND A.TIME_CODE=T.TIME_CODE\n" );    sql2.append("  AND A.USER_ACCOUNT =T.USER_ACCOUNT\n" );	    sql2.append("  GROUP BY FAULT_PATTERN_CODE，TIME_CODE HAVING COUNT(*)>1)");    sql2.append("          AND T.USER_ACCOUNT = '" + user.getAccount() + "'\n");    sql2.append("          ) N\n" );    sql2.append("ON (M.FAULT_PATTERN_CODE = N.FAULT_CODE AND M.TIME_CODE = N.TIME_CODE)\n" );    sql2.append("WHEN MATCHED THEN\n" );    sql2.append("  UPDATE\n" );    sql2.append("     SET M.TIME_NAME  = N.TIME_NAME,\n" );    sql2.append("         M.PATTERN_ID = N.PATTERN_ID,\n" );    sql2.append("         M.AMOUNT_ID  = N.AMOUNT_ID,");    sql2.append("         M.STATUS = N.STATUS,\n");	    sql2.append("         M.FAULT_PATTERN_NAME=N.FAULT_NAME");		return factory.update(sql2.toString(), null);}public BaseResultSet searchTmpImportBs(PageManager page, User user,String conditions)		throws Exception {   	String wheres = conditions;	wheres += " AND USER_ACCOUNT = '"+user.getAccount()+"'";	wheres += " order by TMP_ID desc ";	page.setFilter(wheres);	BaseResultSet bs = null;	StringBuffer sql= new StringBuffer();	sql.append("SELECT\n" );	sql.append("T.TMP_ID,\n" );	sql.append("T.PATTERN_ID,\n" );	sql.append("T.FAULT_PATTERN_CODE,\n" );	sql.append("T.FAULT_PATTERN_NAME,\n" );	sql.append("T.AMOUNT_ID,\n" );	sql.append("T.TIME_CODE,\n" );	sql.append("T.TIME_NAME,\n" );	sql.append("T.COMPANY_ID,\n" );	sql.append("T.ORG_ID,\n" );	sql.append("T.CREATE_USER,\n" );	sql.append("T.CREATE_TIME,\n" );	sql.append("T.UPDATE_USER,\n" );	sql.append("T.UPDATE_TIME,\n" );	sql.append("T.STATUS,\n" );	sql.append("T.STATUS_NA,\n");	sql.append("T.OEM_COMPANY_ID,\n" );	sql.append("T.SECRET_LEVEL,\n" );	sql.append("T.USER_ACCOUNT,\n" );	sql.append("T.ROW_NUM\n" );	sql.append("FROM SE_BA_FAULT_TASKTIME_TMP T");	bs = factory.select(sql.toString(), page);	return bs;}/** * 获取临时表数据 *  * @param user * @return * @throws Exception */public QuerySet searchTmpInfoQs(User user) throws Exception {	StringBuffer sql= new StringBuffer();	sql.append("SELECT\n" );	sql.append("T.TMP_ID,\n" );	sql.append("T.PATTERN_ID,\n" );	sql.append("T.FAULT_PATTERN_CODE,\n" );	sql.append("T.FAULT_PATTERN_NAME,\n" );	sql.append("T.AMOUNT_ID,\n" );	sql.append("T.TIME_CODE,\n" );	sql.append("T.TIME_NAME,\n" );	sql.append("T.COMPANY_ID,\n" );	sql.append("T.ORG_ID,\n" );	sql.append("T.CREATE_USER,\n" );	sql.append("T.CREATE_TIME,\n" );	sql.append("T.UPDATE_USER,\n" );	sql.append("T.UPDATE_TIME,\n" );	sql.append("T.STATUS,\n" );	sql.append("T.STATUS_NA,\n");	sql.append("T.OEM_COMPANY_ID,\n" );	sql.append("T.SECRET_LEVEL,\n" );	sql.append("T.USER_ACCOUNT,\n" );	sql.append("T.ROW_NUM\n" );	sql.append("FROM SE_BA_FAULT_TASKTIME_TMP T");	sql.append(" WHERE T.USER_ACCOUNT = '" + user.getAccount() + "'\n");	sql.append("  AND NOT EXISTS (SELECT  FAULT_PATTERN_CODE，TIME_CODE FROM SE_BA_FAULT_TASKTIME_TMP A\n" );   	sql.append("  WHERE A.FAULT_PATTERN_CODE=T.FAULT_PATTERN_CODE\n" );    sql.append("  AND A.TIME_CODE=T.TIME_CODE\n" );    sql.append("  AND A.USER_ACCOUNT =T.USER_ACCOUNT\n" );	    sql.append("GROUP BY FAULT_PATTERN_CODE，TIME_CODE HAVING COUNT(*)>1)");	return factory.select(null, sql.toString());}public List<SeBaFaultTasktimeTmpVO> searchList(PageManager page, User user, Stringconditions) throws Exception {	List<SeBaFaultTasktimeTmpVO> list = new ArrayList<SeBaFaultTasktimeTmpVO>();	String wheres = conditions;	// wheres += " AND T.RULE_ID = B.RULE_ID AND B.STATUS='";	page.setFilter(wheres);	StringBuffer sql = new StringBuffer();	QuerySet qs = factory.select(null, sql.toString());	SeBaFaultTasktimeTmpVO vo = null;	if (qs.getRowCount() > 0) {		for (int i = 0; i < qs.getRowCount(); i++) {			vo = new SeBaFaultTasktimeTmpVO();			String amountId = qs.getString(i + 1, "amountId");			vo.setAmountId(amountId);			list.add(vo);		}	}	return list;}/** * 更新正式表数据 *  * @param user * @return * @throws Exception */public boolean insertTmpInfs(User user,String errorInfoRowNum) throws Exception {	StringBuffer sql= new StringBuffer();	sql.append("MERGE INTO SE_BA_FAULT_TASKTIME M\n" );	sql.append("USING (SELECT * FROM SE_BA_FAULT_TASKTIME_TMP T \n" );		sql.append(" WHERE T.USER_ACCOUNT = '" + user.getAccount() + "'\n");	if(!errorInfoRowNum.equals("")){		sql.append(" AND T.ROW_NUM not in ( "+errorInfoRowNum+")\n" );	}	sql.append(") N\n" );	sql.append("ON (M.FAULT_PATTERN_CODE = N.FAULT_PATTERN_CODE\n" );	sql.append(" AND M.TIME_CODE = N.TIME_CODE\n" );	sql.append(")\n" );	sql.append("    WHEN MATCHED THEN\n");	sql.append("      UPDATE\n");	sql.append("         SET\n");	sql.append("        M.STATUS = N.STATUS\n");	sql.append("WHEN NOT MATCHED THEN\n" );	sql.append("  INSERT\n" );	sql.append("  (RELATION_ID,PATTERN_ID,FAULT_PATTERN_CODE,FAULT_PATTERN_NAME,AMOUNT_ID,TIME_CODE,TIME_NAME,COMPANY_ID,ORG_ID,CREATE_USER,CREATE_TIME,UPDATE_USER,UPDATE_TIME,STATUS,OEM_COMPANY_ID,SECRET_LEVEL)\n" );	sql.append("  VALUES\n" );	sql.append("    (F_GETID,\n" );	sql.append("     N.PATTERN_ID,\n" );	sql.append("     N.FAULT_PATTERN_CODE,\n" );	sql.append("     N.FAULT_PATTERN_NAME,\n" );	sql.append("     N.AMOUNT_ID,\n" );	sql.append("     N.TIME_CODE,\n" );	sql.append("     N.TIME_NAME,\n" );	sql.append("     N.COMPANY_ID,\n" );	sql.append("     N.ORG_ID,\n" );	sql.append("     N.USER_ACCOUNT,\n" );	sql.append("     SYSDATE,\n" );	sql.append("     '',\n" );	sql.append("     NULL,\n" );	sql.append("     N.STATUS,\n" );	sql.append("     NULL,\n" );	sql.append("     NULL)");	//sql.append(" WHERE N.USER_ACCOUNT = '" + user.getAccount() + "'\n");	return factory.update(sql.toString(), null);}public QuerySet download(String conditions,String partCode,String partName) throws Exception {	StringBuffer sql= new StringBuffer();	sql.append("SELECT  ROWNUM,T.* FROM(");	sql.append("  SELECT   ");    sql.append(" T.AMOUNT_ID,");    sql.append(" T.COMPANY_ID,");    sql.append(" T.CREATE_TIME,");    sql.append(" T.CREATE_USER,");    sql.append(" T.FAULT_PATTERN_CODE,");    sql.append(" T.FAULT_PATTERN_NAME,");    sql.append(" T.OEM_COMPANY_ID,");    sql.append(" T.ORG_ID,");    sql.append(" T.PATTERN_ID,");    sql.append(" T.RELATION_ID,");    sql.append(" T.SECRET_LEVEL,");    sql.append(" T.STATUS,");    sql.append(" T.UPDATE_TIME,");    sql.append(" T.UPDATE_USER,");    sql.append(" T.TIME_CODE,");    sql.append(" T.TIME_NAME,");	sql.append(" G.DIC_VALUE STATUS_NA,D.AMOUNT_SET\n");    sql.append(" FROM SE_BA_FAULT_TASKTIME T, ");    sql.append("  SE_BA_FAULT_PATTERN B, DIC_TREE G,PT_BA_INFO C,SE_BA_TASK_AMOUNT D ");sql.append(" WHERE ");sql.append(conditions+"\n" );sql.append(" AND T.PATTERN_ID = B.PATTERN_ID ");sql.append("      AND T.STATUS = G.ID\n");sql.append("      AND G.PARENT_ID = '100200'\n");sql.append("      AND B.POSITION_ID=C.POSITION_ID(+)  AND T.AMOUNT_ID=D.AMOUNT_ID\n");sql.append(" AND EXISTS\n");sql.append("     (SELECT 1 FROM PT_BA_INFO C WHERE C.F_POSITION_ID = B.POSITION_ID \n") ;	  if(!("".equals(partCode) || partCode==null)){		  sql.append(" AND C.PART_CODE LIKE '%"+partCode+"%' \n");	    }	    if(!("".equals(partName) || partName==null)){	    	sql.append(" AND  C.PART_NAME LIKE '%"+partName+"%' \n");	    }sql.append(" )\n");sql.append("    ORDER BY FAULT_PATTERN_CODE");sql.append("    ) T ORDER BY ROWNUM");	// 执行方法，不需要传递conn参数	return factory.select(null, sql.toString());}public QuerySet expTmpErrorData(String conditions,User user) throws Exception {	StringBuffer sql = new StringBuffer();	sql.append("SELECT\n");	sql.append("T.TMP_ID,\n" );	sql.append("T.PATTERN_ID,\n" );	sql.append("T.FAULT_PATTERN_CODE,\n" );	sql.append("T.FAULT_PATTERN_NAME,\n" );	sql.append("T.AMOUNT_ID,\n" );	sql.append("T.TIME_CODE,\n" );	sql.append("T.TIME_NAME,\n" );	sql.append("T.COMPANY_ID,\n" );	sql.append("T.ORG_ID,\n" );	sql.append("T.CREATE_USER,\n" );	sql.append("T.CREATE_TIME,\n" );	sql.append("T.UPDATE_USER,\n" );	sql.append("T.UPDATE_TIME,\n" );	sql.append("T.STATUS,\n" );	sql.append("T.STATUS_NA,\n");	sql.append("T.OEM_COMPANY_ID,\n" );	sql.append("T.SECRET_LEVEL,\n" );	sql.append("T.USER_ACCOUNT,\n" );	sql.append("T.ROW_NUM\n" );	sql.append("FROM SE_BA_FAULT_TASKTIME_TMP T");	sql.append(" WHERE T.ROW_NUM IN ("+ conditions + ") \n");	sql.append(" AND T.USER_ACCOUNT='"+user.getAccount()+"' \n");	sql.append("    ORDER BY ROW_NUM");	//sql.append("    ) T ORDER BY ROWNUM");	// 执行方法，不需要传递conn参数	return factory.select(null, sql.toString());}/** * 检验临时中间表是否重复 * @param user * @return * @throws Exception */public QuerySet searchData(User user) throws Exception {	StringBuffer sql= new StringBuffer();	sql.append("SELECT * FROM SE_BA_FAULT_TASKTIME_TMP A WHERE\n" );	sql.append("EXISTS (\n" );	sql.append("SELECT  FAULT_PATTERN_CODE，TIME_CODE  FROM SE_BA_FAULT_TASKTIME_TMP B\n" );	sql.append(" WHERE A.FAULT_PATTERN_CODE=B.FAULT_PATTERN_CODE\n" );	sql.append("  AND A.TIME_CODE=B.TIME_CODE\n" );	sql.append("  AND A.USER_ACCOUNT=B.USER_ACCOUNT\n" );	sql.append("   AND B.USER_ACCOUNT = '" + user.getAccount() + "'\n");	sql.append("GROUP BY  FAULT_PATTERN_CODE，TIME_CODE HAVING COUNT(*)>1)");	return factory.select(null, sql.toString());}public QuerySet searchData(User user,String faultPatternCode,String timeCode)throws Exception{				    	    		 	StringBuffer sql= new StringBuffer();	if (!faultPatternCode.equals("")&&!timeCode.equals("") ) {    	sql.append("SELECT C.ROW_NUM,C.FAULT_PATTERN_CODE，C.TIME_CODE\n" );    	sql.append("  FROM SE_BA_FAULT_TASKTIME_TMP C,\n" );    	sql.append("       (" );	}	sql.append("SELECT  FAULT_PATTERN_CODE，TIME_CODE FROM SE_BA_FAULT_TASKTIME_TMP A\n" );   	sql.append("   WHERE A.USER_ACCOUNT = '"+user.getAccount()+"'\n" );	sql.append("GROUP BY FAULT_PATTERN_CODE，TIME_CODE HAVING COUNT(*)>1");	if (!faultPatternCode.equals("")&&!timeCode.equals("") ) {    	sql.append(") B\n" );    	sql.append(" WHERE C.FAULT_PATTERN_CODE=B.FAULT_PATTERN_CODE\n" );     	sql.append("   AND C.FAULT_PATTERN_CODE = '"+faultPatternCode+"'\n" );    	sql.append("  AND C.TIME_CODE=B.TIME_CODE\n" );    	sql.append("   AND C.TIME_CODE = '"+timeCode+"'\n" );    	sql.append("   AND C.USER_ACCOUNT ='"+user.getAccount()+"'\n" );    	sql.append("   ORDER BY C.ROW_NUM\n" );	}	return factory.select(null, sql.toString());}	/**	 * @title: searchPart	 * 查询所有配件	 * @date 2014年7月3日09:14:52	 */   public BaseResultSet searchPart(PageManager page, User user, String conditions) throws Exception   {   	String wheres = conditions;   	wheres +="ORDER BY T.PART_ID ";   	page.setFilter(wheres);   	//定义返回结果集   	BaseResultSet bs = null;   	StringBuffer sql= new StringBuffer();   	sql.append("SELECT T.PART_ID,\n" );   	sql.append("       T.PART_CODE,\n" );   	sql.append("       T.PART_NAME,\n" );   	sql.append("       T.PART_NO,\n" );   	sql.append("       T.UNIT,\n" );   	sql.append("       T.PART_TYPE,\n" );   	sql.append("       T.ATTRIBUTE,\n" );   	sql.append("       T.MIN_PACK,\n" );   	sql.append("       T.MIN_UNIT,\n" );   	sql.append("       T.IF_DIRECT,\n" );   	sql.append("       T.IF_OUT,\n" );   	sql.append("       T.IF_BOOK,\n" );   	sql.append("       T.IF_RETURN,\n" );   	sql.append("       T.IF_ASSEMBLY,\n" );   	sql.append("       T.F_POSITION_ID BELONG_ASSEMBLY,\n" );   	sql.append("       T.F_POSITION_CODE,\n" );   	sql.append("       T.F_POSITION_NAME,\n" );   	sql.append("       T.IF_SCAN,\n" );   	sql.append("       T.IF_SUPLY,\n" );   	sql.append("       T.PART_STATUS,\n" );   	sql.append("       T.IF_STREAM,\n" );   	sql.append("       T.REMARKS,\n" );   	sql.append("       T.PCH_PRICE,\n" );   	sql.append("       T.SE_CLPRICE,\n" );   	sql.append("       T.SE_REPRICE,\n" );   	sql.append("       T.ARMY_PRICE,\n" );   	sql.append("       T.PLAN_PRICE,\n" );   	sql.append("       T.CREATE_USER,\n" );   	sql.append("       T.CREATE_TIME,\n" );   	sql.append("       T.UPDATE_USER,\n" );   	sql.append("       T.UPDATE_TIME\n" );   	sql.append("  FROM PT_BA_INFO T");   	//执行方法，不需要传递conn参数   	bs = factory.select(sql.toString(), page);   	bs.setFieldDic("UNIT","JLDW");   	return bs;   }   public BaseResultSet vehicleSearch(PageManager page, User user, String conditions) throws Exception   {	   String wheres = conditions;	   wheres +="AND C.STATUS = "+DicConstant.YXBS_01+" "	   		  + "AND M.VEHICLE_ID = C.VEHICLE_ID "	   		  + "AND C.ORG_ID = "+user.getOrgId()+" "	   		  + "ORDER BY C.CLAIM_NO ";	   page.setFilter(wheres);	   //定义返回结果集	   BaseResultSet bs = null;	   StringBuffer sql= new StringBuffer();	   sql.append("SELECT C.CLAIM_NO,\n" );	   sql.append("       C.ORG_ID ORG_CODE,\n" );	   sql.append("       C.ORG_ID ORG_NAME,\n" );	   sql.append("       C.VIN,\n" );	   sql.append("       C.CLAIM_TYPE,\n" );	   sql.append("       C.CLAIM_STATUS,\n" );	   sql.append("       C.CLAIM_ID,\n" );	   sql.append("       C.MILEAGE,\n" );	   sql.append("       C.REPAIR_DATE,\n" );	   sql.append("       C.VEHICLE_ID,\n" );	   sql.append("       C.STATUS\n" );	   sql.append("  FROM SE_BU_CLAIM C,MAIN_VEHICLE M");	   //执行方法，不需要传递conn参数	   bs = factory.select(sql.toString(), page);	   bs.setFieldDic("CLAIM_TYPE","SPDLX");	   bs.setFieldDic("CLAIM_STATUS","SPDZT");	   bs.setFieldOrgDeptCode("ORG_CODE");	   bs.setFieldOrgDeptSimpleName("ORG_NAME");	   bs.setFieldDateFormat("REPAIR_DATE", "yyyy-MM-dd");	   return bs;   }   public BaseResultSet bscVehicleSearch(PageManager page, User user, String conditions) throws Exception   {	   String wheres = conditions;	   wheres +="AND C.STATUS = "+DicConstant.YXBS_01+" "	   		  +" AND G.ORG_ID = C.ORG_ID "	   		  + "AND G.PID = G1.ORG_ID "			  + "AND M.VEHICLE_ID = C.VEHICLE_ID "			  + "AND G1.ORG_ID = "+user.getOrgId()+" "			  + "ORDER BY C.CLAIM_NO ";	   page.setFilter(wheres);	   //定义返回结果集	   BaseResultSet bs = null;	   StringBuffer sql= new StringBuffer();	   sql.append("SELECT C.CLAIM_NO,\n" );	   sql.append("       C.ORG_ID ORG_CODE,\n" );	   sql.append("       C.ORG_ID ORG_NAME,\n" );	   sql.append("       C.VIN,\n" );	   sql.append("       C.CLAIM_TYPE,\n" );	   sql.append("       C.CLAIM_STATUS,\n" );	   sql.append("       C.CLAIM_ID,\n" );	   sql.append("       C.MILEAGE,\n" );	   sql.append("       C.REPAIR_DATE,\n" );	   sql.append("       C.VEHICLE_ID,\n" );	   sql.append("       C.STATUS\n" );	   sql.append("   FROM SE_BU_CLAIM C, MAIN_VEHICLE M, TM_ORG G, TM_ORG G1");	   //执行方法，不需要传递conn参数	   bs = factory.select(sql.toString(), page);	   bs.setFieldDic("CLAIM_TYPE","SPDLX");	   bs.setFieldDic("CLAIM_STATUS","SPDZT");	   bs.setFieldOrgDeptCode("ORG_CODE");	   bs.setFieldOrgDeptSimpleName("ORG_NAME");	   bs.setFieldDateFormat("REPAIR_DATE", "yyyy-MM-dd");	   return bs;   }   public BaseResultSet ccVehicleSearch(PageManager page, User user, String conditions) throws Exception   {	   String wheres = conditions;	   wheres +="AND C.STATUS = "+DicConstant.YXBS_01+" "			   + "AND M.VEHICLE_ID = C.VEHICLE_ID "			   + "ORDER BY C.CLAIM_NO ";	   page.setFilter(wheres);	   //定义返回结果集	   BaseResultSet bs = null;	   StringBuffer sql= new StringBuffer();	   sql.append("SELECT C.CLAIM_NO,\n" );	   sql.append("       C.ORG_ID ORG_CODE,\n" );	   sql.append("       C.ORG_ID ORG_NAME,\n" );	   sql.append("       C.VIN,\n" );	   sql.append("       C.CLAIM_TYPE,\n" );	   sql.append("       C.CLAIM_STATUS,\n" );	   sql.append("       C.CLAIM_ID,\n" );	   sql.append("       C.MILEAGE,\n" );	   sql.append("       C.REPAIR_DATE,\n" );	   sql.append("       C.VEHICLE_ID,\n" );	   sql.append("       C.STATUS\n" );	   sql.append("   FROM SE_BU_CLAIM C, MAIN_VEHICLE M");	   //执行方法，不需要传递conn参数	   bs = factory.select(sql.toString(), page);	   bs.setFieldDic("CLAIM_TYPE","SPDLX");	   bs.setFieldDic("CLAIM_STATUS","SPDZT");	   bs.setFieldOrgDeptCode("ORG_CODE");	   bs.setFieldOrgDeptSimpleName("ORG_NAME");	   bs.setFieldDateFormat("REPAIR_DATE", "yyyy-MM-dd");	   return bs;   }   public BaseResultSet ccVehicleReportSearch(PageManager page, User user, String conditions) throws Exception   {	   String wheres = conditions;	   wheres +="AND C.STATUS = "+DicConstant.YXBS_01+""	   		  + "AND G.ORG_ID = C.ORG_ID "	   		  + "AND C.CLAIM_ID = P.CLAIM_ID "	   		  + "AND C.CLAIM_STATUS = 301015 "			  + "AND M.VEHICLE_ID = C.VEHICLE_ID "			  + "ORDER BY C.CLAIM_NO ";	   page.setFilter(wheres);	   //定义返回结果集	   BaseResultSet bs = null;	   StringBuffer sql= new StringBuffer();	   sql.append("SELECT C.CLAIM_NO,\n" );	   sql.append("       C.VIN,\n" );	   sql.append("       C.CLAIM_TYPE,\n" );	   sql.append("       C.CLAIM_STATUS,\n" );	   sql.append("       C.CLAIM_ID,\n" );	   sql.append("       C.MILEAGE,\n" );	   sql.append("       C.VEHICLE_ID,\n" );	   sql.append("       C.STATUS,\n" );	   sql.append("       C.FAULT_DATE,\n" );	   sql.append("       C.REPAIR_DATE,\n" );	   sql.append("       G.CODE,\n" );	   sql.append("       G.ONAME,\n" );	   sql.append("       P.OLD_PART_CODE,\n" );	   sql.append("       P.OLD_PART_NAME,\n" );	   sql.append("       P.MEASURES,");	   sql.append("       (SELECT A.SL FROM\n" );	   sql.append("       (SELECT COUNT(1) SL,SP.OLD_PART_ID,MV.VEHICLE_ID\n" );	   sql.append("        FROM MAIN_VEHICLE MV, SE_BU_CLAIM SC, SE_BU_CLAIM_FAULT_PART SP\n" );	   sql.append("       WHERE SC.VEHICLE_ID = MV.VEHICLE_ID\n" );	   sql.append("         AND SP.CLAIM_ID = SC.CLAIM_ID\n" );	   sql.append("       GROUP BY  MV.VEHICLE_ID,SP.OLD_PART_ID) A\n" );	   sql.append("       WHERE A.OLD_PART_ID = P.OLD_PART_ID\n" );	   sql.append("        AND A.VEHICLE_ID = C.VEHICLE_ID  ) WXCS,\n" );	   sql.append("       (SELECT S.SUPPLIER_NAME\n" );	   sql.append("          FROM PT_BA_SUPPLIER S\n" );	   sql.append("         WHERE S.SUPPLIER_ID = P.OLD_SUPPLIER_ID) OLD_SUP_NAME,\n" );	   sql.append("       (SELECT S.SUPPLIER_NAME\n" );	   sql.append("          FROM PT_BA_SUPPLIER S\n" );	   sql.append("         WHERE S.SUPPLIER_ID = P.NEW_SUPPLIER_ID) NEW_SUP_NAME\n" );	   sql.append("  FROM SE_BU_CLAIM C, MAIN_VEHICLE M, SE_BU_CLAIM_FAULT_PART P,TM_ORG G");	   //执行方法，不需要传递conn参数	   bs = factory.select(sql.toString(), page);	   bs.setFieldDic("MEASURES","CLFS");	   bs.setFieldDic("CLAIM_STATUS","SPDZT");	   bs.setFieldOrgDeptCode("ORG_CODE");	   bs.setFieldOrgDeptSimpleName("ORG_NAME");	   bs.setFieldDateFormat("REPAIR_DATE", "yyyy-MM-dd");	   return bs;   }   /**    * @title: searchPart    * 查询所有配件    * @date 2014年7月3日09:14:52    */   public BaseResultSet claimSearch(PageManager page, User user, String conditions) throws Exception   {	   String wheres = conditions;	   wheres +="AND C.STATUS = "+DicConstant.YXBS_01+" "			   + "AND M.VEHICLE_ID = C.VEHICLE_ID "			   + "AND C.CLAIM_TYPE IN (301402,301405 )"			   + "ORDER BY C.CLAIM_NO ";	   page.setFilter(wheres);	   //定义返回结果集	   BaseResultSet bs = null;	   StringBuffer sql= new StringBuffer();	   sql.append("SELECT C.CLAIM_NO,\n" );	   sql.append("       C.ORG_ID ORG_CODE,\n" );	   sql.append("       C.ORG_ID ORG_NAME,\n" );	   sql.append("       C.VIN,\n" );	   sql.append("       C.CLAIM_TYPE,\n" );	   sql.append("       C.CLAIM_STATUS,\n" );	   sql.append("       C.CLAIM_ID,\n" );	   sql.append("       C.MILEAGE,\n" );	   sql.append("       C.REPAIR_DATE,\n" );	   sql.append("       C.VEHICLE_ID,\n" );	   sql.append("       C.STATUS\n" );	   sql.append("  FROM SE_BU_CLAIM C,MAIN_VEHICLE M");	   //执行方法，不需要传递conn参数	   bs = factory.select(sql.toString(), page);	   bs.setFieldDic("CLAIM_TYPE","SPDLX");	   bs.setFieldDic("CLAIM_STATUS","SPDZT");	   bs.setFieldOrgDeptCode("ORG_CODE");	   bs.setFieldOrgDeptSimpleName("ORG_NAME");	   bs.setFieldDateFormat("REPAIR_DATE", "yyyy-MM-dd");	   return bs;   }   public QuerySet ccVehicleDownload(String conditions)throws Exception{				    	    				   StringBuffer sql= new StringBuffer();	   sql.append("SELECT C.CLAIM_NO,\n" );	   sql.append("       C.VIN,\n" );	   sql.append("       C.CLAIM_TYPE,\n" );	   sql.append("       C.CLAIM_STATUS,\n" );	   sql.append("       C.CLAIM_ID,\n" );	   sql.append("       C.MILEAGE,\n" );	   sql.append("       C.VEHICLE_ID,\n" );	   sql.append("       C.STATUS,\n" );	   sql.append("       C.FAULT_DATE,\n" );	   sql.append("       C.REPAIR_DATE,\n" );	   sql.append("       G.CODE,\n" );	   sql.append("       G.ONAME,\n" );	   sql.append("       P.OLD_PART_CODE,\n" );	   sql.append("       P.OLD_PART_NAME,\n" );	   sql.append("       (SELECT TR.DIC_VALUE FROM DIC_TREE TR WHERE TR.ID = P.MEASURES) MEASURES,\n" );	   sql.append("       (SELECT A.SL\n" );	   sql.append("          FROM (SELECT COUNT(1) SL, SP.OLD_PART_ID, MV.VEHICLE_ID\n" );	   sql.append("                  FROM MAIN_VEHICLE           MV,\n" );	   sql.append("                       SE_BU_CLAIM            SC,\n" );	   sql.append("                       SE_BU_CLAIM_FAULT_PART SP\n" );	   sql.append("                 WHERE SC.VEHICLE_ID = MV.VEHICLE_ID\n" );	   sql.append("                   AND SP.CLAIM_ID = SC.CLAIM_ID\n" );	   sql.append("                 GROUP BY MV.VEHICLE_ID, SP.OLD_PART_ID) A\n" );	   sql.append("         WHERE A.OLD_PART_ID = P.OLD_PART_ID\n" );	   sql.append("           AND A.VEHICLE_ID = C.VEHICLE_ID) WXCS,\n" );	   sql.append("       (SELECT S.SUPPLIER_NAME\n" );	   sql.append("          FROM PT_BA_SUPPLIER S\n" );	   sql.append("         WHERE S.SUPPLIER_ID = P.OLD_SUPPLIER_ID) OLD_SUP_NAME,\n" );	   sql.append("       (SELECT S.SUPPLIER_NAME\n" );	   sql.append("          FROM PT_BA_SUPPLIER S\n" );	   sql.append("         WHERE S.SUPPLIER_ID = P.NEW_SUPPLIER_ID) NEW_SUP_NAME\n" );	   sql.append("  FROM SE_BU_CLAIM C, MAIN_VEHICLE M, SE_BU_CLAIM_FAULT_PART P, TM_ORG G\n" );	   sql.append(" WHERE "+conditions+"\n" );	   sql.append("   AND C.STATUS = 100201\n" );	   sql.append("   AND G.ORG_ID = C.ORG_ID\n" );	   sql.append("   AND C.CLAIM_ID = P.CLAIM_ID\n" );	   sql.append("   AND C.CLAIM_STATUS = 301015\n" );	   sql.append("   AND M.VEHICLE_ID = C.VEHICLE_ID\n" );	   sql.append(" ORDER BY C.CLAIM_NO");		return factory.select(null, sql.toString());	}}
