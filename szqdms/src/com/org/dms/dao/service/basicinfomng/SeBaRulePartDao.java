package com.org.dms.dao.service.basicinfomng;import java.util.ArrayList;import java.util.List;import com.org.dms.common.DicConstant;import com.org.dms.vo.service.SeBaRulePartVO;import com.org.framework.base.BaseDAO;import com.org.framework.common.BaseResultSet;import com.org.framework.common.PageManager;import com.org.framework.common.QuerySet;import com.org.framework.common.User;import com.org.mvc.context.ActionContext;/** * SeBaRulePartDao * <p> * Company: szq * </p> *  * @author baixiaoliang * @version 1.0 2014-7-14 */public class SeBaRulePartDao extends BaseDAO {	// 定义instance	public static final SeBaRulePartDao getInstance(ActionContext atx) {		SeBaRulePartDao dao = new SeBaRulePartDao();		atx.setDBFactory(dao.factory);		return dao;	}	/**	 * @auther baixiaoliang	 * @return String	 */	public boolean insert(SeBaRulePartVO vo) throws Exception {		return factory.insert(vo);	}	/**	 * @auther baixiaoliang	 * @return String	 */	public boolean insertTb(SeBaRulePartVO vo) throws Exception {		BaseResultSet bs = null;		StringBuffer sql = new StringBuffer();		sql.append("  INSERT INTO SE_BA_RULE_PART_TMP ( ");		sql.append(" PART_ID,");		sql.append(" RULE_ID");		sql.append(" SELECT ");		sql.append(" C.PART_ID,");		sql.append(" B.RULE_ID");		sql.append(" FROM SE_BA_RULE_PART_TMP T,SE_BA_RULE B ,PT_BA_INFO C");		sql.append(" WHERE T.RULE_ID = B.RULE_ID  AND T.PART_ID = C.PART_ID ");		/*		 * sql.append(" AND B.RULE_CODE = "); sql.append("'");		 * sql.append(vo.getRuleCode()); sql.append("'");		 * sql.append("AND C.PART_CODE = "); sql.append("'");		 * sql.append(vo.getPartCode()); sql.append("'");		 */		return factory.update(sql.toString(), null);	}	/**	 * 	 * @return boolean	 */	public boolean update(SeBaRulePartVO vo) throws Exception {		return factory.update(vo);	}	/**	 * @throws Exception	 *             设定文件	 * @return BaseResultSet 返回类型	 */	public BaseResultSet search(PageManager page, User user, String conditions,			String ruleId) throws Exception {		String wheres = conditions;		wheres += " AND T.RULE_ID = B.RULE_ID AND B.STATUS='"				+ DicConstant.YXBS_01 + "'";		if (ruleId != null && !"".equals(ruleId))			wheres += " AND T.RULE_ID= " + ruleId;				wheres += "    ORDER BY RULE_CODE";		page.setFilter(wheres);		// 定义返回结果集		BaseResultSet bs = null;		StringBuffer sql = new StringBuffer();		sql.append("  SELECT  ");		sql.append(" T.COMPANY_ID,");		sql.append(" T.CREATE_TIME,");		sql.append(" T.CREATE_USER,");		sql.append(" T.MILEAGE,");		sql.append(" T.MONTHS,");		sql.append(" T.OEM_COMPANY_ID,");		sql.append(" T.ORG_ID,");		sql.append(" T.PART_CODE,");		sql.append(" T.PART_ID,");		sql.append(" T.PART_NAME,");		sql.append(" T.RELATION_ID,");		sql.append(" B.RULE_CODE,");		sql.append(" T.RULE_ID,");		sql.append(" B.RULE_NAME,");		sql.append(" T.SECRET_LEVEL,");		sql.append(" T.STATUS,");		sql.append(" T.UPDATE_TIME,");		sql.append(" T.UPDATE_USER");		sql.append(" FROM SE_BA_RULE_PART T,SE_BA_RULE B ");		// 执行方法，不需要传递conn参数		bs = factory.select(sql.toString(), page);		bs.setFieldDateFormat("CREATE_TIME", "yyyy-MM-dd");		bs.setFieldDateFormat("UPDATE_TIME", "yyyy-MM-dd");		bs.setFieldDic("STATUS", "YXBS");		// bs.setFieldDic("USER_TYPE","CLYHLX");		// 绑定组织字典，将ORG_ID翻译为组织名称		// bs.setFieldOrgDeptSimpleName("ORG_ID");		// bs.setFieldOrgCompanySimpleName("COMPANY_ID");		return bs;	}	/**	 * @title: searchPart 查询所有配件	 * @date 2014年7月3日09:14:52	 */	public BaseResultSet searchPart(PageManager page, User user,			String conditions, String ruleId) throws Exception {		String wheres = conditions;		wheres += " AND NOT EXISTS (SELECT B.PART_ID   FROM SE_BA_RULE_PART B WHERE T.PART_ID = B.PART_ID AND B.RULE_ID = '"				+ ruleId + "') " + "ORDER BY T.PART_CODE ";		page.setFilter(wheres);		// 定义返回结果集		BaseResultSet bs = null;		StringBuffer sql = new StringBuffer();		sql.append("SELECT T.PART_ID,\n");		sql.append("       T.PART_CODE,\n");		sql.append("       T.PART_NAME,\n");		sql.append("       T.PART_NO,\n");		sql.append("       T.UNIT,\n");		sql.append("       T.PART_TYPE,\n");		sql.append("       T.ATTRIBUTE,\n");		sql.append("       T.MIN_PACK,\n");		sql.append("       T.MIN_UNIT,\n");		sql.append("       T.IF_DIRECT,\n");		sql.append("       T.IF_OUT,\n");		sql.append("       T.IF_BOOK,\n");		sql.append("       T.IF_RETURN,\n");		sql.append("       T.IF_ASSEMBLY,\n");		sql.append("       T.F_POSITION_ID BELONG_ASSEMBLY,\n");		sql.append("       T.IF_SCAN,\n");		sql.append("       T.IF_SUPLY,\n");		sql.append("       T.PART_STATUS,\n");		sql.append("       T.IF_STREAM,\n");		sql.append("       T.REMARKS,\n");		sql.append("       T.PCH_PRICE,\n");		sql.append("       T.SE_CLPRICE,\n");		sql.append("       T.ARMY_PRICE,\n");		sql.append("       T.PLAN_PRICE,\n");		sql.append("       T.CREATE_USER,\n");		sql.append("       T.CREATE_TIME,\n");		sql.append("       T.UPDATE_USER,\n");		sql.append("       T.UPDATE_TIME\n");		sql.append("  FROM PT_BA_INFO T");		// 执行方法，不需要传递conn参数		bs = factory.select(sql.toString(), page);		return bs;	}	/**	 * @title: searchServiceParts 查询规则配件关系	 * @date 2014年7月2日09:14:52	 */	public BaseResultSet searchServiceParts(PageManager page, User user, String	conditions, String ruleId) throws Exception {		String wheres = conditions;		wheres += " AND T.RULE_ID = " + ruleId + "\n"				+ "ORDER BY T.RELATION_ID ";		page.setFilter(wheres);		// 定义返回结果集		BaseResultSet bs = null;		StringBuffer sql = new StringBuffer();		sql.append("SELECT ");		sql.append(" T.COMPANY_ID,");		sql.append(" T.CREATE_TIME,");		sql.append(" T.CREATE_USER,");		sql.append(" T.MILEAGE,");		sql.append(" T.MONTHS,");		sql.append(" T.OEM_COMPANY_ID,");		sql.append(" T.ORG_ID,");		sql.append(" T.PART_CODE,");		sql.append(" T.PART_ID,");		sql.append(" T.PART_NAME,");		sql.append(" T.RELATION_ID,");		sql.append(" T.RULE_CODE,");		sql.append(" T.RULE_ID,");		sql.append(" T.RULE_NAME,");		sql.append(" T.SECRET_LEVEL,");		sql.append(" T.STATUS,");		sql.append(" T.UPDATE_TIME,");		sql.append(" T.UPDATE_USER");		sql.append("  FROM SE_BA_RULE_PART T");		// 执行方法，不需要传递conn参数		bs = factory.select(sql.toString(), page);		return bs;	}	/**	 * 新增配件	 * 	 * @param vo	 * @return	 * @throws Exception	 */	public boolean insertParts(SeBaRulePartVO vo) throws Exception {		return factory.insert(vo);	}	/**	 * @throws Exception	 *             设定文件	 * @return QuerySet 返回类型	 */	public QuerySet check(String relationId) throws Exception {		QuerySet qs = null;		StringBuffer sql = new StringBuffer();		sql.append("  SELECT COUNT(1) NUMS FROM  SE_BA_RULE_PART ");		sql.append("  WHERE RELATION_ID=");		sql.append(relationId);		qs = factory.select(null, sql.toString());		return qs;	}	/**	 * @title: deleteVINByMxids	 * @return	 * @throws Exception	 *             设定文件	 * @return boolean 返回类型	 * @date 2014年7月3日11:17:22	 */	public boolean deleteRulePart(String mxids) throws Exception {		StringBuffer sql = new StringBuffer();		sql.append(" DELETE SE_BA_RULE_PART A WHERE A.RELATION_ID IN (" + mxids				+ ")   \n");		return factory.delete(sql.toString(), null);	}	/**	 * @throws Exception	 *             设定文件	 * @return boolean 返回类型	 */	public boolean delete(String relationId) throws Exception {		StringBuffer sql = new StringBuffer();		sql.append("  DELETE SE_BA_RULE_PART ");		sql.append("  WHERE RELATION_ID=");		sql.append(relationId);		return factory.delete(sql.toString(), null);	}	/**	 * 	 * @param coefficientId	 * @return	 * @throws Exception	 */	public boolean merge( User user) throws Exception {	     StringBuffer sql2= new StringBuffer();         sql2.append("MERGE INTO SE_BA_RULE_PART_TMP M\n" );         sql2.append("USING (SELECT\n" );         sql2.append("T.RULE_CODE,T.PART_CODE,C.PART_ID, B.RULE_ID,B.RULE_NAME,C.PART_NAME\n" );         sql2.append(" FROM SE_BA_RULE_PART_TMP T,SE_BA_RULE B ,PT_BA_INFO C\n" );         sql2.append("WHERE T.RULE_CODE = B.RULE_CODE  AND T.PART_CODE = C.PART_CODE\n" );         sql2.append("  AND NOT EXISTS (SELECT  RULE_CODE ,PART_CODE  FROM SE_BA_RULE_PART_TMP A\n" );         sql2.append("  WHERE A.RULE_CODE = T.RULE_CODE\n" );         sql2.append("   AND A.PART_CODE = T.PART_CODE\n" );         sql2.append("   AND A.USER_ACCOUNT =T.USER_ACCOUNT\n" );         sql2.append("GROUP BY RULE_CODE,PART_CODE HAVING COUNT(*)>1)");         sql2.append(" AND T.USER_ACCOUNT = '" + user.getAccount() + "'\n");         sql2.append(") N\n" );         sql2.append("ON (M.RULE_CODE = N.RULE_CODE  AND M.PART_CODE = N.PART_CODE  )\n" );         sql2.append("WHEN MATCHED THEN\n" );         sql2.append("UPDATE  SET M.PART_ID=N.PART_ID,  RULE_ID =N.RULE_ID , M.PART_NAME=N.PART_NAME,  M.RULE_NAME =N.RULE_NAME");				return factory.update(sql2.toString(), null);	}	public BaseResultSet searchTmpImportBs(PageManager page, User user,String conditions)			throws Exception {		String wheres = conditions;    	wheres += " AND USER_ACCOUNT = '"+user.getAccount()+"'";		wheres += " order by TMP_ID desc ";		page.setFilter(wheres);		BaseResultSet bs = null;		StringBuffer sql = new StringBuffer();		sql.append("SELECT A.TMP_ID,\n");		sql.append("A.RULE_ID,\n");		sql.append("A.RULE_CODE,\n");		sql.append("A.RULE_NAME,\n");		sql.append("A.MONTHS,\n");		sql.append("A.MILEAGE,\n");		sql.append("A.PART_ID,\n");		sql.append("A.PART_CODE,\n");		sql.append("A.PART_NAME,\n");		sql.append("A.USER_ACCOUNT,\n");		sql.append("A.ROW_NUM\n");		sql.append("FROM SE_BA_RULE_PART_TMP A");		bs = factory.select(sql.toString(), page);		return bs;	}	/**	 * 获取规则配件关系临时表数据	 * 	 * @param user	 * @return	 * @throws Exception	 */	public QuerySet searchTmpInfoQs(User user) throws Exception {		StringBuffer sql = new StringBuffer();		sql.append("SELECT T.TMP_ID,\n");		sql.append("T.RULE_ID,\n");		sql.append("T.RULE_CODE,\n");		sql.append("T.RULE_NAME,\n");		sql.append("T.MONTHS,\n");		sql.append("T.MILEAGE,\n");		sql.append("T.PART_ID,\n");		sql.append("T.PART_CODE,\n");		sql.append("T.PART_NAME,\n");		sql.append("T.USER_ACCOUNT,\n");		sql.append("T.ROW_NUM\n");		sql.append("FROM SE_BA_RULE_PART_TMP T");		sql.append(" WHERE T.USER_ACCOUNT = '" + user.getAccount() + "'\n");		sql.append("  AND NOT EXISTS (SELECT  RULE_CODE ,PART_CODE COUNT FROM SE_BA_RULE_PART_TMP A\n" );		sql.append("  WHERE A.RULE_CODE = T.RULE_CODE\n" );    	sql.append("   AND A.PART_CODE = T.PART_CODE\n" );       	sql.append("   AND A.USER_ACCOUNT = '"+user.getAccount()+"'\n" );        sql.append("GROUP BY RULE_CODE,PART_CODE HAVING COUNT(*)>1)");		/*		 * sql.append("FROM SE_BA_RULE_PART_TMP A , SE_BA_RULE W, PT_BA_INFO P");		 * sql.append(" WHERE W.STATUS = '100201'\n" );		 * sql.append("   AND W.RULE_CODE = T.RULE_CODE\n" );		 * sql.append("   AND P.STATUS = 100201\n" );		 * sql.append("   AND P.PART_CODE = T.PART_CODE\n" );		 * sql.append("   AND T.USER_ACCOUNT = '"+user.getAccount()+"'\n" );		 * sql.append("   AND NOT EXISTS \n" ); sql.append(		 * "   (SELECT 1 FROM SE_BA_RULE_PART S WHERE T.RULE_CODE=S.RULE_CODE AND T.PART_CODE=S.PART_CODE)\n"		 * );		 */		return factory.select(null, sql.toString());	}		public List<SeBaRulePartVO> searchList(PageManager page, User user, String			conditions) throws Exception {	    List<SeBaRulePartVO> list=new ArrayList<SeBaRulePartVO> ();		String wheres = conditions;		//wheres += " AND T.RULE_ID = B.RULE_ID AND B.STATUS='";		page.setFilter(wheres);		StringBuffer sql = new StringBuffer();				QuerySet qs= factory.select(null, sql.toString());		SeBaRulePartVO vo=null;		if(qs.getRowCount()>0){			for(int i=0;i<qs.getRowCount();i++){				vo=new SeBaRulePartVO();				String ruleId = qs.getString(i+1, "RULE_ID"); 							vo.setRuleId(ruleId);				list.add(vo);			}		}			return list;	}	public QuerySet download(String conditions) throws Exception {				// 定义返回结果集		StringBuffer sql = new StringBuffer();		sql.append("SELECT  ROWNUM,T.* FROM(");		sql.append("  SELECT  ");		sql.append(" T.COMPANY_ID,");		sql.append(" T.CREATE_TIME,");		sql.append(" T.CREATE_USER,");		sql.append(" T.MILEAGE,");		sql.append(" T.MONTHS,");		sql.append(" T.OEM_COMPANY_ID,");		sql.append(" T.ORG_ID,");		sql.append(" T.PART_CODE,");		sql.append(" T.PART_ID,");		sql.append(" T.PART_NAME,");		sql.append(" T.RELATION_ID,");		sql.append(" B.RULE_CODE,");		sql.append(" T.RULE_ID,");		sql.append(" B.RULE_NAME,");		sql.append(" T.SECRET_LEVEL,");		sql.append(" T.STATUS,");		sql.append(" T.UPDATE_TIME,");		sql.append(" T.UPDATE_USER,");		sql.append(" C.DIC_VALUE STATUS_NA");		sql.append(" FROM SE_BA_RULE_PART T,SE_BA_RULE B,DIC_TREE C ");		sql.append(" WHERE  T.RULE_ID = B.RULE_ID AND B.STATUS=C.ID AND B.STATUS=' ");		sql.append( DicConstant.YXBS_01);		sql.append(  "'");		sql.append(" AND "+conditions+"\n" );		sql.append("    ORDER BY RULE_CODE");		sql.append("    ) T ORDER BY ROWNUM");		// 执行方法，不需要传递conn参数		return factory.select(null, sql.toString());	}	public QuerySet expTmpErrorData(String conditions,User user) throws Exception {		StringBuffer sql = new StringBuffer();		//sql.append("SELECT  ROWNUM,T.* FROM(");		sql.append("SELECT T.TMP_ID,\n");		sql.append("T.RULE_ID,\n");		sql.append("T.RULE_CODE,\n");		sql.append("T.RULE_NAME,\n");		sql.append("T.MONTHS,\n");		sql.append("T.MILEAGE,\n");		sql.append("T.PART_ID,\n");		sql.append("T.PART_CODE,\n");		sql.append("T.PART_NAME,\n");		sql.append("T.USER_ACCOUNT,\n");		sql.append("T.ROW_NUM\n");		sql.append("FROM SE_BA_RULE_PART_TMP T");		sql.append(" WHERE T.ROW_NUM IN ("+ conditions + ") \n");		sql.append(" AND T.USER_ACCOUNT='"+user.getAccount()+"' \n");		sql.append("    ORDER BY ROW_NUM");		//sql.append("    ) T ORDER BY ROWNUM");		// 执行方法，不需要传递conn参数		return factory.select(null, sql.toString());	}	/**	 * 更新正式表数据	 * 	 * @param user	 * @return	 * @throws Exception	 */	public boolean insertTmpInfs(User user,String errorInfoRowNum) throws Exception {		StringBuffer sql= new StringBuffer();		sql.append(" MERGE INTO SE_BA_RULE_PART M\n" );		sql.append("USING (SELECT\n" );		sql.append("*\n" );		sql.append(" FROM SE_BA_RULE_PART_TMP T\n" );		if(!errorInfoRowNum.equals("")){			sql.append(" WHERE T.ROW_NUM not in ( "+errorInfoRowNum+")\n" );		}		sql.append(") N\n" );		sql.append("ON (M.RULE_CODE = N.RULE_CODE  AND M.PART_CODE = N.PART_CODE  )\n" );		sql.append("WHEN MATCHED THEN\n" );		sql.append("UPDATE  SET M.MONTHS=N.MONTHS,  M.MILEAGE =N.MILEAGE\n" );		sql.append("WHEN NOT MATCHED THEN\n" );		sql.append("  INSERT\n" );		sql.append("  (M.RELATION_ID,\n" );		sql.append("M.RULE_ID,\n" );		sql.append("M.RULE_CODE,\n" );		sql.append("M.RULE_NAME,\n" );		sql.append("M.MONTHS,\n" );		sql.append("M.MILEAGE,\n" );		sql.append("M.PART_ID,\n" );		sql.append("M.PART_CODE,\n" );		sql.append("M.PART_NAME,\n" );		sql.append("M.COMPANY_ID,\n" );		sql.append("M.ORG_ID,\n" );		sql.append("M.CREATE_USER,\n" );		sql.append("M.CREATE_TIME,\n" );		sql.append("M.UPDATE_USER,\n" );		sql.append("M.UPDATE_TIME,\n" );		sql.append("M.STATUS,\n" );		sql.append("M.OEM_COMPANY_ID,\n" );		sql.append("M.SECRET_LEVEL)\n" );		sql.append("  VALUES\n" );		sql.append("    (F_GETID,\n" );		sql.append("   N.RULE_ID,\n" );		sql.append("N.RULE_CODE,\n" );		sql.append("N.RULE_NAME,\n" );		sql.append("N.MONTHS,\n" );		sql.append("N.MILEAGE,\n" );		sql.append("N.PART_ID,\n" );		sql.append("N.PART_CODE,\n" );		sql.append("N.PART_NAME,\n" );		sql.append("'',\n" );		sql.append("'',\n" );		sql.append("N.USER_ACCOUNT,\n" );		sql.append("sysdate,\n" );		sql.append("'',\n" );		sql.append("NULL,\n" );		sql.append("'100201',\n" );		sql.append("'',\n" );		sql.append("'')");		sql.append(" WHERE N.USER_ACCOUNT = '" + user.getAccount() + "'\n");		return factory.update(sql.toString(), null);	}		   public QuerySet searchData(User user,String ruleCode,String partCode)throws Exception{				    	    						 	StringBuffer sql= new StringBuffer();		  	if (!ruleCode.equals("") &&!partCode.equals("")) {		    	sql.append("SELECT C.ROW_NUM,C.RULE_CODE,C.PART_CODE\n" );		    	sql.append("  FROM SE_BA_RULE_PART_TMP C,\n" );		    	sql.append("       (" );	    	}	    	sql.append("SELECT  RULE_CODE ,PART_CODE FROM SE_BA_RULE_PART_TMP A\n" );	       	sql.append("   WHERE A.USER_ACCOUNT = '"+user.getAccount()+"'\n" );	    	sql.append("GROUP BY RULE_CODE,PART_CODE HAVING COUNT(*)>1");	    	if (!ruleCode.equals("") &&!partCode.equals("")) {		    	sql.append(") B\n" );		    	sql.append(" WHERE C.RULE_CODE = B.RULE_CODE\n" );		    	sql.append("   AND C.RULE_CODE = '"+ruleCode+"'\n" );		    	sql.append("   AND C.PART_CODE = B.PART_CODE\n" );		    	sql.append("   AND C.PART_CODE = '"+partCode+"'\n" );		    	sql.append("   AND C.USER_ACCOUNT ='"+user.getAccount()+"'\n" );		    	sql.append("   ORDER BY C.ROW_NUM\n" );	    	}			return factory.select(null, sql.toString());		}}