package com.org.dms.dao.service.basicinfomng;import java.util.ArrayList;import java.util.List;import com.org.dms.vo.service.SeBaExcitationCoefficientVO;import com.org.dms.vo.service.SeBaExcitationTmpVO;import com.org.dms.vo.service.SeBaExcitationTmpVO;import com.org.framework.base.BaseDAO;import com.org.framework.common.BaseResultSet;import com.org.framework.common.PageManager;import com.org.framework.common.QuerySet;import com.org.framework.common.User;import com.org.mvc.context.ActionContext;/** * SeBaExcitationCoefficientDao * <p> * Company: szq * </p> *  * @author baixiaoliang * @version 1.0 2014-7-14 */public class SeBaExcitationCoefficientDao extends BaseDAO {	// 定义instance	public static final SeBaExcitationCoefficientDao getInstance(			ActionContext atx) {		SeBaExcitationCoefficientDao dao = new SeBaExcitationCoefficientDao();		atx.setDBFactory(dao.factory);		return dao;	}	/**	 * @auther baixiaoliang	 * @return String	 */	public boolean insert(SeBaExcitationCoefficientVO vo) throws Exception {		return factory.insert(vo);	}	/**	 * 	 * @return boolean	 */	public boolean update(SeBaExcitationCoefficientVO vo) throws Exception {		return factory.update(vo);	}	/**	 * @throws Exception	 *             设定文件	 * @return BaseResultSet 返回类型	 */	public BaseResultSet search(PageManager page, User user, String conditions)			throws Exception {		String wheres = conditions;		wheres += " AND T.ENGINE = B.TYPE_ID(+) AND T.MODEL_ID = C.MODELS_ID(+) ORDER BY ORG_CODE";		page.setFilter(wheres);		// 定义返回结果集		BaseResultSet bs = null;		StringBuffer sql = new StringBuffer();		sql.append("  SELECT  ");		sql.append(" T.COEFFICIENT_ID,");		sql.append(" TO_CHAR(T.COEFFICIENT_RADIO,'fm9999990.00') COEFFICIENT_RADIO,");		sql.append(" T.COEFFICIENT_TYPE,");		sql.append(" T.COMPANY_ID,");		sql.append(" T.CREATE_TIME,");		sql.append(" T.CREATE_USER,");		sql.append(" T.ORG_CODE,");		sql.append(" T.ORG_ID,");		sql.append(" T.ORG_NAME,");		sql.append(" T.ENGINE,");		sql.append(" T.OEM_COMPANY_ID,");		sql.append(" T.REMARKS,");		sql.append(" T.SECRET_LEVEL,");		sql.append(" T.STATUS,");		sql.append(" T.UPDATE_TIME,");		sql.append(" B.TYPE_ID,");		sql.append(" B.TYPE_CODE,");		sql.append(" B.TYPE_NAME,");		sql.append(" T.START_DATE,");		sql.append(" T.END_DATE,");		sql.append(" T.UPDATE_USER,");		sql.append(" C.MODELS_NAME,");		sql.append(" C.MODELS_ID MODEL_ID,");		sql.append(" C.MODELS_CODE");		sql.append(" FROM SE_BA_EXCITATION_COEFFICIENT T ");		sql.append(" ,SE_BA_ENGINE_TYPE B ");		sql.append(" ,MAIN_MODELS C ");		// 执行方法，不需要传递conn参数		bs = factory.select(sql.toString(), page);		bs.setFieldDateFormat("CREATE_TIME", "yyyy-MM-dd");		bs.setFieldDateFormat("UPDATE_TIME", "yyyy-MM-dd");		bs.setFieldDic("STATUS", "YXBS");		bs.setFieldDateFormat("START_DATE", "yyyy-MM-dd");		bs.setFieldDateFormat("END_DATE", "yyyy-MM-dd");		bs.setFieldDic("COEFFICIENT_TYPE", "JLLX");		// bs.setFieldDic("USER_TYPE","CLYHLX");		// 绑定组织字典，将ORG_ID翻译为组织名称		// bs.setFieldOrgDeptSimpleName("ORG_ID");		// bs.setFieldOrgCompanySimpleName("COMPANY_ID");		return bs;	}	/**	 * @throws Exception	 *             设定文件	 * @return QuerySet 返回类型	 */	public QuerySet check(String coefficientId) throws Exception {		QuerySet qs = null;		StringBuffer sql = new StringBuffer();		sql.append("  SELECT COUNT(1) NUMS FROM  SE_BA_EXCITATION_COEFFICIENT ");		sql.append("  WHERE COEFFICIENT_ID=");		sql.append(coefficientId);		qs = factory.select(null, sql.toString());		return qs;	}	/**	 * @throws Exception	 *             设定文件	 * @return boolean 返回类型	 */	public boolean delete(String coefficientId) throws Exception {		StringBuffer sql = new StringBuffer();		sql.append("  DELETE SE_BA_EXCITATION_COEFFICIENT ");		sql.append("  WHERE COEFFICIENT_ID=");		sql.append(coefficientId);		return factory.delete(sql.toString(), null);	}	/**	 * 	 * @param coefficientId	 * @return	 * @throws Exception	 */	public boolean merge( User user) throws Exception {        	    StringBuffer sql2= new StringBuffer();        sql2.append("MERGE INTO SE_BA_EXCITATION_TMP M\n" );        sql2.append("USING (SELECT\n" );        sql2.append("              B.TYPE_ID,\n" );        sql2.append("              B.TYPE_CODE,\n" );        sql2.append("              B.TYPE_NAME,\n" );        sql2.append("              C.MODELS_NAME,\n" );        sql2.append("              C.MODELS_ID,\n" );        sql2.append("              C.MODELS_CODE,\n" );        sql2.append("              D.DIC_VALUE COEFFICIENT_TYPE_NA,\n" );        sql2.append("              D.ID COEFFICIENT_TYPE,K.ID STATUS\n" );        sql2.append("         FROM SE_BA_EXCITATION_TMP T,\n" );        sql2.append("              SE_BA_ENGINE_TYPE    B,\n" );        sql2.append("              MAIN_MODELS          C,\n" );        sql2.append("              DIC_TREE             D,\n" );        sql2.append("              DIC_TREE K\n" );        sql2.append("        WHERE T.TYPE_CODE = B.TYPE_CODE\n" );        sql2.append("          AND T.MODELS_CODE = C.MODELS_CODE\n" );//        sql2.append("          AND T.COEFFICIENT_TYPE = D.DIC_CODE\n" );        sql2.append("           AND T.COEFFICIENT_TYPE_NA = D.DIC_VALUE\n" );        sql2.append("          AND D.PARENT_ID = '303300' AND  T.STATUS_NA=K.DIC_VALUE AND K.PARENT_ID=100200\n" );        sql2.append(" AND NOT EXISTS (SELECT  TYPE_CODE，MODELS_CODE，COEFFICIENT_TYPE_NA FROM SE_BA_EXCITATION_TMP A\n" );		sql2.append("              WHERE A.USER_ACCOUNT =T.USER_ACCOUNT\n" );		sql2.append("  AND A.TYPE_CODE=T.TYPE_CODE\n" );    	sql2.append("  AND A.MODELS_CODE=T.MODELS_CODE\n" );    	sql2.append("   AND A.COEFFICIENT_TYPE_NA=T.COEFFICIENT_TYPE_NA\n" );		sql2.append("GROUP BY TYPE_CODE，MODELS_CODE，COEFFICIENT_TYPE_NA HAVING COUNT(*)>1)");        sql2.append("          AND T.USER_ACCOUNT = '" + user.getAccount() + "'\n");        sql2.append("\n" );        sql2.append("       ) N\n" );        sql2.append("ON (M.TYPE_CODE = N.TYPE_CODE AND M.MODELS_CODE = N.MODELS_CODE AND M.COEFFICIENT_TYPE_NA=N.COEFFICIENT_TYPE_NA )\n" );        sql2.append("WHEN MATCHED THEN\n" );        sql2.append("  UPDATE\n" );        sql2.append("     SET M.COEFFICIENT_TYPE = N.COEFFICIENT_TYPE,\n" );        sql2.append("         M.ENGINE           = N.TYPE_ID,\n" );        sql2.append("         M.MODELS_ID        = N.MODELS_ID,");        sql2.append("         M.MODELS_NAME        = N.MODELS_NAME,");        sql2.append("         M.STATUS = N.STATUS,");        sql2.append("         M.TYPE_NAME        = N.TYPE_NAME");				return factory.update(sql2.toString(), null);	}	public BaseResultSet searchTmpImportBs(PageManager page, User user,String conditions)			throws Exception {	  	String wheres = conditions;    	wheres += " AND USER_ACCOUNT = '"+user.getAccount()+"'";		wheres += " order by TMP_ID desc ";		page.setFilter(wheres);		BaseResultSet bs = null;		StringBuffer sql = new StringBuffer();		sql.append("  SELECT  ");	    sql.append(" T.COEFFICIENT_RADIO,");	    sql.append(" T.COEFFICIENT_TYPE,");	    sql.append(" T.COEFFICIENT_TYPE_NA,");	    sql.append(" T.COMPANY_ID,");	    sql.append(" T.CREATE_TIME,");	    sql.append(" T.CREATE_USER,");	    sql.append(" T.END_DATE,");	    sql.append(" T.ENGINE,");	    sql.append(" T.MODELS_CODE,");	    sql.append(" T.MODELS_ID,");	    sql.append(" T.MODELS_NAME,");	    sql.append(" T.OEM_COMPANY_ID,");	    sql.append(" T.OFFICE_ID,");	    sql.append(" T.ORG_CODE,");	    sql.append(" T.ORG_ID,");	    sql.append(" T.ORG_NAME,");	    sql.append(" T.REMARKS,");	    sql.append(" T.ROW_NUM,");	    sql.append(" T.SECRET_LEVEL,");	    sql.append(" T.START_DATE,");	    sql.append(" T.STATUS,");	    sql.append(" T.STATUS_NA,");	    sql.append(" T.TMP_ID,");	    sql.append(" T.TYPE_CODE,");	    sql.append(" T.TYPE_NAME,");	    sql.append(" T.UPDATE_TIME,");	    sql.append(" T.UPDATE_USER,");	    sql.append(" T.USER_ACCOUNT");	    sql.append(" FROM SE_BA_EXCITATION_TMP T ");		bs = factory.select(sql.toString(), page);		return bs;	}	/**	 * 获取临时表数据	 * 	 * @param user	 * @return	 * @throws Exception	 */	public QuerySet searchTmpInfoQs(User user) throws Exception {		StringBuffer sql = new StringBuffer();		sql.append("  SELECT  ");	    sql.append(" T.COEFFICIENT_RADIO,");	    sql.append(" T.COEFFICIENT_TYPE,");	    sql.append(" T.COEFFICIENT_TYPE_NA,");	    sql.append(" T.COMPANY_ID,");	    sql.append(" T.CREATE_TIME,");	    sql.append(" T.CREATE_USER,");	    sql.append(" T.END_DATE,");	    sql.append(" T.ENGINE,");	    sql.append(" T.MODELS_CODE,");	    sql.append(" T.MODELS_ID,");	    sql.append(" T.MODELS_NAME,");	    sql.append(" T.OEM_COMPANY_ID,");	    sql.append(" T.OFFICE_ID,");	    sql.append(" T.ORG_CODE,");	    sql.append(" T.ORG_ID,");	    sql.append(" T.ORG_NAME,");	    sql.append(" T.REMARKS,");	    sql.append(" T.ROW_NUM,");	    sql.append(" T.SECRET_LEVEL,");	    sql.append(" T.START_DATE,");	    sql.append(" T.STATUS,");	    sql.append(" T.STATUS_NA,");	    sql.append(" T.TMP_ID,");	    sql.append(" T.TYPE_CODE,");	    sql.append(" T.TYPE_NAME,");	    sql.append(" T.UPDATE_TIME,");	    sql.append(" T.UPDATE_USER,");	    sql.append(" T.USER_ACCOUNT");	sql.append(" FROM SE_BA_EXCITATION_TMP T ");		sql.append(" WHERE T.USER_ACCOUNT = '" + user.getAccount() + "'\n");	       sql.append(" AND NOT EXISTS (SELECT  TYPE_CODE，MODELS_CODE，COEFFICIENT_TYPE_NA FROM SE_BA_EXCITATION_TMP A\n" );			sql.append("              WHERE A.USER_ACCOUNT =T.USER_ACCOUNT\n" );			sql.append("  AND A.TYPE_CODE=T.TYPE_CODE\n" );	    	sql.append("  AND A.MODELS_CODE=T.MODELS_CODE\n" );	    	sql.append("   AND A.COEFFICIENT_TYPE_NA=T.COEFFICIENT_TYPE_NA\n" );			sql.append("GROUP BY TYPE_CODE，MODELS_CODE，COEFFICIENT_TYPE_NA HAVING COUNT(*)>1)");		return factory.select(null, sql.toString());	}	public List<SeBaExcitationTmpVO> searchList(PageManager page, User user,			String			conditions) throws Exception {		List<SeBaExcitationTmpVO> list = new ArrayList<SeBaExcitationTmpVO>();		String wheres = conditions;		// wheres += " AND T.RULE_ID = B.RULE_ID AND B.STATUS='";		page.setFilter(wheres);		StringBuffer sql = new StringBuffer();		QuerySet qs = factory.select(null, sql.toString());		SeBaExcitationTmpVO vo = null;		if (qs.getRowCount() > 0) {			for (int i = 0; i < qs.getRowCount(); i++) {				vo = new SeBaExcitationTmpVO();				String coefficientRadio = qs.getString(i + 1, "coefficientRadio");				vo.setCoefficientRadio(coefficientRadio);				list.add(vo);			}		}		return list;	}	/**	 * 更新正式表数据	 * 	 * @param user	 * @return	 * @throws Exception	 */	public boolean insertTmpInfs(User user,String errorInfoRowNum) throws Exception {		StringBuffer sql= new StringBuffer();		sql.append("MERGE INTO SE_BA_EXCITATION_COEFFICIENT M\n" );		sql.append("    USING (SELECT * FROM SE_BA_EXCITATION_TMP T\n" );		sql.append(" WHERE T.USER_ACCOUNT = '" + user.getAccount() + "'\n");		if(!errorInfoRowNum.equals("")){			sql.append(" AND T.ROW_NUM not in ( "+errorInfoRowNum+")\n" );		}		sql.append("\n" );		sql.append("    ) N\n" );		sql.append("    ON (M.COEFFICIENT_TYPE=N.COEFFICIENT_TYPE\n" );		sql.append("     AND M.ENGINE=N.ENGINE AND M.MODEL_ID=N.MODELS_ID\n" );		sql.append("    )\n" );		sql.append("    WHEN MATCHED THEN\n" );		sql.append("  UPDATE\n" );		sql.append("     SET  M.COEFFICIENT_RADIO= N.COEFFICIENT_RADIO\n" );		sql.append("      ，M.STATUS = N.STATUS\n");		sql.append("\n" );		sql.append("    WHEN NOT MATCHED THEN\n" );		sql.append("      INSERT(COEFFICIENT_ID,COEFFICIENT_TYPE,COEFFICIENT_RADIO,ENGINE,\n" );		sql.append("      CREATE_USER,CREATE_TIME,M.STATUS,M.MODEL_ID,M.START_DATE,M.END_DATE)\n" );		sql.append("      VALUES\n" );		sql.append("        (F_GETID,\n" );		sql.append("         N.COEFFICIENT_TYPE,\n" );		sql.append("         N.COEFFICIENT_RADIO,\n" );		sql.append("         N.ENGINE,\n" );		sql.append("         N.USER_ACCOUNT,\n" );		sql.append("         SYSDATE,\n" );		sql.append("         N.STATUS,\n" );		sql.append("         N.MODELS_ID,\n" );		sql.append("         N.START_DATE,\n" );		sql.append("         N.END_DATE)");		// sql.append(" WHERE N.USER_ACCOUNT = '" + user.getAccount() + "'\n");		return factory.update(sql.toString(), null);	}	public QuerySet download(String conditions) throws Exception {		StringBuffer sql = new StringBuffer();		sql.append("SELECT  ROWNUM,T.* FROM(");		sql.append("  SELECT ");		sql.append(" T.COEFFICIENT_ID,");		sql.append(" T.COEFFICIENT_RADIO,");		sql.append(" T.COEFFICIENT_TYPE,");		sql.append(" T.COMPANY_ID,");		sql.append(" T.CREATE_TIME,");		sql.append(" T.CREATE_USER,");		sql.append(" T.ORG_CODE,");		sql.append(" T.ORG_ID,");		sql.append(" T.ORG_NAME,");		sql.append(" T.ENGINE,");		sql.append(" T.OEM_COMPANY_ID,");		sql.append(" T.REMARKS,");		sql.append(" T.SECRET_LEVEL,");		sql.append(" T.STATUS,");		sql.append(" T.UPDATE_TIME,");		sql.append(" B.TYPE_ID,");		sql.append(" B.TYPE_CODE,");		sql.append(" B.TYPE_NAME,");		sql.append(" TO_CHAR(T.START_DATE,'YYYY-MM-DD') START_DATE,");		sql.append(" TO_CHAR(T.END_DATE,'YYYY-MM-DD') END_DATE,");		sql.append(" T.UPDATE_USER,");		sql.append(" C.MODELS_NAME,");		sql.append(" C.MODELS_ID,");		sql.append(" D.DIC_VALUE COEFFICIENT_TYPE_NA,");		sql.append(" C.MODELS_CODE，");		sql.append(" G.DIC_VALUE STATUS_NA\n");		sql.append(" FROM SE_BA_EXCITATION_COEFFICIENT T ");		sql.append(" ,SE_BA_ENGINE_TYPE B ");		sql.append(" ,MAIN_MODELS C ");		sql.append(" ,DIC_TREE D , DIC_TREE G");		sql.append(" WHERE T.ENGINE = B.TYPE_ID AND T.MODEL_ID = C.MODELS_ID");		sql.append(" AND T.COEFFICIENT_TYPE=D.ID AND D.PARENT_ID='303300'");		sql.append(" AND T.STATUS = G.ID\n");		sql.append(" AND G.PARENT_ID = '100200'\n");		sql.append(" AND "+conditions+"\n" );		sql.append("    ORDER BY ORG_CODE");		sql.append("    ) T ORDER BY ROWNUM");		// 执行方法，不需要传递conn参数		return factory.select(null, sql.toString());	}	public QuerySet expTmpErrorData(String conditions,User user) throws Exception {		StringBuffer sql = new StringBuffer();		sql.append("SELECT\n");	    sql.append(" T.COEFFICIENT_RADIO,");	    sql.append(" T.COEFFICIENT_TYPE,");	    sql.append(" T.COEFFICIENT_TYPE_NA,");	    sql.append(" T.COMPANY_ID,");	    sql.append(" T.CREATE_TIME,");	    sql.append(" T.CREATE_USER,");	    sql.append(" TO_CHAR(T.END_DATE,'YYYY-MM-DD') END_DATE,");	    sql.append(" T.ENGINE,");	    sql.append(" T.MODELS_CODE,");	    sql.append(" T.MODELS_ID,");	    sql.append(" T.MODELS_NAME,");	    sql.append(" T.OEM_COMPANY_ID,");	    sql.append(" T.OFFICE_ID,");	    sql.append(" T.ORG_CODE,");	    sql.append(" T.ORG_ID,");	    sql.append(" T.ORG_NAME,");	    sql.append(" T.REMARKS,");	    sql.append(" T.ROW_NUM,");	    sql.append(" T.SECRET_LEVEL,");	    sql.append(" TO_CHAR(T.START_DATE,'YYYY-MM-DD') START_DATE,");	    sql.append(" T.STATUS,");	    sql.append(" T.STATUS_NA,");	    sql.append(" T.TMP_ID,");	    sql.append(" T.TYPE_CODE,");	    sql.append(" T.TYPE_NAME,");	    sql.append(" T.UPDATE_TIME,");	    sql.append(" T.UPDATE_USER,");	    sql.append(" T.USER_ACCOUNT");	sql.append(" FROM SE_BA_EXCITATION_TMP T ");		sql.append(" WHERE T.ROW_NUM IN ("+ conditions + ") \n");		sql.append(" AND T.USER_ACCOUNT='"+user.getAccount()+"' \n");		sql.append("    ORDER BY ROW_NUM");		//sql.append("    ) T ORDER BY ROWNUM");		// 执行方法，不需要传递conn参数		return factory.select(null, sql.toString());	}	  public QuerySet searchData(User user)throws Exception{					    	    	StringBuffer sql= new StringBuffer();	    	sql.append("SELECT * FROM SE_BA_EXCITATION_TMP A WHERE\n" );	    	sql.append("EXISTS (\n" );	    	sql.append("SELECT  TYPE_CODE，MODELS_CODE，COEFFICIENT_TYPE FROM SE_BA_EXCITATION_TMP B\n" );	    	sql.append(" WHERE A.TYPE_CODE=B.TYPE_CODE\n" );	    	sql.append("  AND A.MODELS_CODE=B.MODELS_CODE\n" );	    	sql.append("   AND A.COEFFICIENT_TYPE=B.COEFFICIENT_TYPE\n" );	    	sql.append("  AND A.USER_ACCOUNT=B.USER_ACCOUNT\n" );	    	sql.append("   AND B.USER_ACCOUNT = '"+user.getAccount()+"'\n" );	    	sql.append("GROUP BY TYPE_CODE，MODELS_CODE，COEFFICIENT_TYPE HAVING COUNT(*)>1)");						return factory.select(null, sql.toString());		}	  	  public QuerySet searchData(User user,String typeCode,String modelsCode,String coefficientTypeNA)throws Exception{				    	    						 	StringBuffer sql= new StringBuffer();			if (!typeCode.equals("") &&!modelsCode.equals("") &&!coefficientTypeNA.equals("") ) {		    	sql.append("SELECT C.ROW_NUM,C.TYPE_CODE，C.MODELS_CODE，C.COEFFICIENT_TYPE_NA\n" );		    	sql.append("  FROM SE_BA_EXCITATION_TMP C,\n" );		    	sql.append("       (" );	    	}		 	sql.append("SELECT  TYPE_CODE，MODELS_CODE，COEFFICIENT_TYPE_NA FROM SE_BA_EXCITATION_TMP A\n" );		  	sql.append("   WHERE A.USER_ACCOUNT = '"+user.getAccount()+"'\n" );	    	sql.append("GROUP BY TYPE_CODE，MODELS_CODE，COEFFICIENT_TYPE_NA HAVING COUNT(*)>1");	    	if (!typeCode.equals("")&&!modelsCode.equals("") &&!coefficientTypeNA.equals("")  ) {		    	sql.append(") B\n" );		    	sql.append(" WHERE C.TYPE_CODE=B.TYPE_CODE\n" );		    	sql.append("  AND  C.MODELS_CODE=B.MODELS_CODE\n" );		    	sql.append("   AND C.COEFFICIENT_TYPE_NA=B.COEFFICIENT_TYPE_NA\n" );		    	sql.append("   AND C.TYPE_CODE = '"+typeCode+"'\n" );		    	sql.append("   AND C.MODELS_CODE = '"+modelsCode+"'\n" );		    	sql.append("   AND C.COEFFICIENT_TYPE_NA = '"+coefficientTypeNA+"'\n" );		    	sql.append("   AND C.USER_ACCOUNT ='"+user.getAccount()+"'\n" );		    	sql.append("   ORDER BY C.ROW_NUM\n" );	    	}			return factory.select(null, sql.toString());		}}