package com.org.dms.dao.service.basicinfomng;import java.util.ArrayList;import java.util.List;import com.org.dms.vo.service.SeBaTaskAmountVO;import com.org.framework.base.BaseDAO;import com.org.framework.common.BaseResultSet;import com.org.framework.common.PageManager;import com.org.framework.common.QuerySet;import com.org.framework.common.User;import com.org.mvc.context.ActionContext;/** * SeBaTaskAmountDao * <p> * Company: szq * </p> *  * @author baixiaoliang * @version 1.0 2014-7-14 */public class SeBaTaskAmountDao extends BaseDAO {	// 定义instance	public static final SeBaTaskAmountDao getInstance(ActionContext atx) {		SeBaTaskAmountDao dao = new SeBaTaskAmountDao();		atx.setDBFactory(dao.factory);		return dao;	}	/**	 * @auther baixiaoliang	 * @return String	 */	public boolean insert(SeBaTaskAmountVO vo) throws Exception {		return factory.insert(vo);	}	/**	 * 	 * @return boolean	 */	public boolean update(SeBaTaskAmountVO vo) throws Exception {		return factory.update(vo);	}	/**	 * @throws Exception	 *             设定文件	 * @return BaseResultSet 返回类型	 */	public BaseResultSet search(PageManager page, User user, String conditions)			throws Exception {		String wheres = conditions;		//wheres += " AND T.MODELS_ID = B.MODELS_ID AND T.POSITION_ID = C.POSITION_ID";		wheres +="    ORDER BY TIME_CODE";		page.setFilter(wheres);		// 定义返回结果集		BaseResultSet bs = null;		StringBuffer sql = new StringBuffer();		sql.append("  SELECT  ");		sql.append(" T.AMOUNT_ID,");		sql.append(" T.AMOUNT_SET,");		sql.append(" T.COMPANY_ID,");		sql.append(" T.CREATE_TIME,");		sql.append(" T.CREATE_USER,");		sql.append(" T.MODELS_CODE,");		sql.append(" T.MODELS_ID,");		sql.append(" T.OEM_COMPANY_ID,");		sql.append(" T.ORG_ID,");		sql.append(" T.POSITION_CODE,");		sql.append(" T.POSITION_ID,");		sql.append(" T.REMARKS,");		sql.append(" T.SECRET_LEVEL,");		sql.append(" T.STATUS,");		sql.append(" T.TIME_CODE,");		sql.append(" T.TIME_NAME,");		sql.append(" T.UPDATE_TIME,");		sql.append(" T.UPDATE_USER,");	//	sql.append(" B.MODELS_NAME,");	//	sql.append(" C.POSITION_NAME,");		sql.append(" T.USER_TYPE");		sql.append(" FROM SE_BA_TASK_AMOUNT T ");		//sql.append("       MAIN_MODELS B ,");	//	sql.append("       SE_BA_VEHICLE_POSITION C ");		// 执行方法，不需要传递conn参数		bs = factory.select(sql.toString(), page);		bs.setFieldDateFormat("CREATE_TIME", "yyyy-MM-dd");		bs.setFieldDateFormat("UPDATE_TIME", "yyyy-MM-dd");		bs.setFieldDic("STATUS", "YXBS");		bs.setFieldDic("USER_TYPE", "CLYHLX");		// 绑定组织字典，将ORG_ID翻译为组织名称		// bs.setFieldOrgDeptSimpleName("ORG_ID");		// bs.setFieldOrgCompanySimpleName("COMPANY_ID");		return bs;	}	/**	 * @throws Exception	 *             设定文件	 * @return QuerySet 返回类型	 */	public QuerySet check(String timeCode) throws Exception {		QuerySet qs = null;		StringBuffer sql = new StringBuffer();		sql.append("  SELECT COUNT(1) NUMS FROM  SE_BA_TASK_AMOUNT ");		sql.append("  WHERE TIME_CODE='");		sql.append(timeCode);		sql.append("'");		qs = factory.select(null, sql.toString());		return qs;	}	/**	 * @throws Exception	 *             设定文件	 * @return boolean 返回类型	 */	public boolean delete(String amountId) throws Exception {		StringBuffer sql = new StringBuffer();		sql.append("  DELETE SE_BA_TASK_AMOUNT ");		sql.append("  WHERE AMOUNT_ID=");		sql.append(amountId);		return factory.delete(sql.toString(), null);	}	/**	 * 	 * @param coefficientId	 * @return	 * @throws Exception	 */	public boolean merge( User user) throws Exception {        		 StringBuffer sql2= new StringBuffer();                  sql2.append("MERGE INTO SE_BA_TASK_AMOUNT_TMP M\n" );         sql2.append("          USING (SELECT\n" );         sql2.append("\n" );         sql2.append("                  T.TIME_CODE,C.ID STATUS\n" );         sql2.append("                   FROM SE_BA_TASK_AMOUNT_TMP T,DIC_TREE C\n" );         sql2.append("                  WHERE T.STATUS_NA=C.DIC_VALUE AND C.PARENT_ID=100200\n" );         sql2.append("AND NOT EXISTS (SELECT  1 FROM SE_BA_TASK_AMOUNT_TMP A\n");		sql2.append(" WHERE A.TIME_CODE=T.TIME_CODE\n");			sql2.append("  AND A.USER_ACCOUNT=T.USER_ACCOUNT\n");		sql2.append("GROUP BY TIME_CODE HAVING COUNT(*)>1)");         sql2.append("           AND T.USER_ACCOUNT = '" + user.getAccount() + "'\n");         sql2.append("                 ) N\n" );         sql2.append("          ON (M.TIME_CODE = N.TIME_CODE )\n" );         sql2.append("          WHEN MATCHED THEN\n" );         sql2.append("            UPDATE SET M.STATUS = N.STATUS ");				return factory.update(sql2.toString(), null);	}		public BaseResultSet searchTmpImportBs(PageManager page, User user,String conditions)			throws Exception {		String wheres = conditions;    	wheres += " AND USER_ACCOUNT = '"+user.getAccount()+"'";		wheres += " order by TMP_ID desc ";		page.setFilter(wheres);		BaseResultSet bs = null;		StringBuffer sql= new StringBuffer();		sql.append("SELECT\n" );		sql.append("T.TMP_ID,\n" );		sql.append("T.TIME_CODE,\n" );		sql.append("T.TIME_NAME,\n" );		sql.append("T.USER_TYPE,\n" );		sql.append("T.AMOUNT_SET,\n" );		sql.append("T.MODELS_ID,\n" );		sql.append("T.MODELS_CODE,\n" );		sql.append("T.POSITION_ID,\n" );		sql.append("T.POSITION_CODE,\n" );		sql.append("T.POSITION_NAME,\n" );		sql.append("T.REMARKS,\n" );		sql.append("T.COMPANY_ID,\n" );		sql.append("T.ORG_ID,\n" );		sql.append("T.USER_ACCOUNT,\n" );		sql.append("T.ROW_NUM,\n" );		sql.append("T.STATUS,\n" );		sql.append("T.STATUS_NA\n" );		sql.append("FROM SE_BA_TASK_AMOUNT_TMP T");		//sql.append(" WHERE T.USER_ACCOUNT = '" + user.getAccount() + "'\n");		bs = factory.select(sql.toString(), page);		return bs;	}	/**	 * 获取临时表数据	 * 	 * @param user	 * @return	 * @throws Exception	 */	public QuerySet searchTmpInfoQs(User user) throws Exception {		StringBuffer sql= new StringBuffer();		sql.append("SELECT\n" );		sql.append("T.TMP_ID,\n" );		sql.append("T.TIME_CODE,\n" );		sql.append("T.TIME_NAME,\n" );		sql.append("T.USER_TYPE,\n" );		sql.append("T.AMOUNT_SET,\n" );		sql.append("T.MODELS_ID,\n" );		sql.append("T.MODELS_CODE,\n" );		sql.append("T.POSITION_ID,\n" );		sql.append("T.POSITION_CODE,\n" );		sql.append("T.POSITION_NAME,\n" );		sql.append("T.REMARKS,\n" );		sql.append("T.COMPANY_ID,\n" );		sql.append("T.ORG_ID,\n" );		sql.append("T.USER_ACCOUNT,\n" );		sql.append("T.ROW_NUM,\n" );		sql.append("T.STATUS,\n" );		sql.append("T.STATUS_NA\n" );		sql.append("FROM SE_BA_TASK_AMOUNT_TMP T");		sql.append(" WHERE T.USER_ACCOUNT = '" + user.getAccount() + "'\n");	     sql.append("AND NOT EXISTS (SELECT  1 FROM SE_BA_TASK_AMOUNT_TMP A\n");			sql.append(" WHERE A.TIME_CODE=T.TIME_CODE\n");				sql.append("  AND A.USER_ACCOUNT=T.USER_ACCOUNT\n");			sql.append("GROUP BY TIME_CODE HAVING COUNT(*)>1)");		return factory.select(null, sql.toString());	}	public List<SeBaTaskAmountVO> searchList(PageManager page, User user, String	conditions) throws Exception {		List<SeBaTaskAmountVO> list = new ArrayList<SeBaTaskAmountVO>();		String wheres = conditions;		// wheres += " AND T.RULE_ID = B.RULE_ID AND B.STATUS='";		page.setFilter(wheres);		StringBuffer sql = new StringBuffer();		QuerySet qs = factory.select(null, sql.toString());		SeBaTaskAmountVO vo = null;		if (qs.getRowCount() > 0) {			for (int i = 0; i < qs.getRowCount(); i++) {				vo = new SeBaTaskAmountVO();				String amountId = qs.getString(i + 1, "amountId");				vo.setAmountId(amountId);				list.add(vo);			}		}		return list;	}	/**	 * 更新正式表数据	 * 	 * @param user	 * @return	 * @throws Exception	 */	public boolean insertTmpInfs(User user,String errorInfoRowNum) throws Exception {		StringBuffer sql= new StringBuffer();		sql.append("MERGE INTO SE_BA_TASK_AMOUNT M\n" );		sql.append("      USING (SELECT * FROM SE_BA_TASK_AMOUNT_TMP T\n" );		if(!errorInfoRowNum.equals("")){			sql.append(" WHERE T.ROW_NUM not in ( "+errorInfoRowNum+")\n" );		}		sql.append("       ) N\n" );		sql.append("      ON (M.TIME_CODE = N.TIME_CODE\n" );		sql.append("    AND N.USER_ACCOUNT = '" + user.getAccount() + "'\n");		sql.append("      )\n" );		sql.append("      WHEN MATCHED THEN\n" );		sql.append("        UPDATE\n" );		sql.append("           SET\n" );		sql.append("               M.AMOUNT_SET=N.AMOUNT_SET,\n" );		sql.append("               M.UPDATE_USER  = N.USER_ACCOUNT,\n" );		sql.append("               M.UPDATE_TIME  = SYSDATE,\n" );		sql.append("               M.STATUS = N.STATUS\n" );		sql.append("      WHEN NOT MATCHED THEN\n" );		sql.append("        INSERT\n" );		sql.append("        (AMOUNT_ID,TIME_CODE,TIME_NAME,USER_TYPE,AMOUNT_SET,MODELS_ID,MODELS_CODE,POSITION_ID,POSITION_CODE,REMARKS,\n" );		sql.append("        COMPANY_ID,ORG_ID,CREATE_USER,CREATE_TIME,UPDATE_USER,UPDATE_TIME,STATUS,OEM_COMPANY_ID,SECRET_LEVEL)\n" );		sql.append("        VALUES\n" );		sql.append("          (F_GETID,\n" );		sql.append("           N.Time_Code,\n" );		sql.append("           N.Time_Name,\n" );		sql.append("            N.User_Type,\n" );		sql.append("            N.Amount_Set,\n" );		sql.append("            N.Models_Id,\n" );		sql.append("            N.Models_Code,\n" );		sql.append("           N.POSITION_ID,\n" );		sql.append("           N.POSITION_CODE,\n" );		sql.append("           N.REMARKS,\n" );		sql.append("           N.COMPANY_ID,\n" );		sql.append("           N.ORG_ID,\n" );		sql.append("           N.USER_ACCOUNT,\n" );		sql.append("           sysdate,\n" );		sql.append("             '',\n" );		sql.append("           null,\n" );		sql.append("           N.STATUS,\n" );		sql.append("           NULL,\n" );		sql.append("           null)");		sql.append(" WHERE N.USER_ACCOUNT = '" + user.getAccount() + "'\n");		return factory.update(sql.toString(), null);	}	public QuerySet download(String conditions) throws Exception {		StringBuffer sql= new StringBuffer();		sql.append("SELECT  ROWNUM,T.* FROM(");		sql.append("  SELECT  ");		sql.append(" T.TIME_CODE,");		sql.append(" T.TIME_NAME,");		sql.append(" C.DIC_VALUE STATUS_NA,");		sql.append(" T.UPDATE_TIME,");		sql.append(" T.UPDATE_USER,");		sql.append(" T.CREATE_TIME,");		sql.append(" T.CREATE_USER,");		sql.append(" T.AMOUNT_SET");		sql.append(" FROM SE_BA_TASK_AMOUNT T ,DIC_TREE C ");		sql.append(" WHERE T.STATUS=C.ID");		sql.append("      AND C.PARENT_ID = '100200'\n" );		sql.append(" AND "+conditions+"\n" );		sql.append("    ORDER BY TIME_CODE");		sql.append("    ) T ORDER BY ROWNUM");		// 执行方法，不需要传递conn参数		return factory.select(null, sql.toString());	}	public QuerySet expTmpErrorData(String conditions,User user) throws Exception {		StringBuffer sql = new StringBuffer();		//sql.append("SELECT  ROWNUM,T.* FROM(");		sql.append("SELECT ROW_NUM,\n");		sql.append("T.TMP_ID,\n" );		sql.append("T.TIME_CODE,\n" );		sql.append("T.TIME_NAME,\n" );		sql.append("T.USER_TYPE,\n" );		sql.append("T.AMOUNT_SET,\n" );		sql.append("T.MODELS_ID,\n" );		sql.append("T.MODELS_CODE,\n" );		sql.append("T.POSITION_ID,\n" );		sql.append("T.POSITION_CODE,\n" );		sql.append("T.POSITION_NAME,\n" );		sql.append("T.REMARKS,\n" );		sql.append("T.COMPANY_ID,\n" );		sql.append("T.ORG_ID,\n" );		sql.append("T.USER_ACCOUNT,\n" );		sql.append("T.STATUS,\n" );		sql.append("T.STATUS_NA\n" );		sql.append("FROM SE_BA_TASK_AMOUNT_TMP T");		sql.append(" WHERE T.ROW_NUM IN ("+ conditions + ") \n");		sql.append(" AND T.USER_ACCOUNT='"+user.getAccount()+"' \n");		sql.append("    ORDER BY ROW_NUM");		//sql.append("    ) T ORDER BY ROWNUM");		// 执行方法，不需要传递conn参数		return factory.select(null, sql.toString());	}	/**	 * 检验临时中间表是否重复	 * @param user	 * @return	 * @throws Exception	 */	public QuerySet searchData(User user) throws Exception {		StringBuffer sql = new StringBuffer();		sql.append("SELECT * FROM SE_BA_TASK_AMOUNT_TMP A WHERE\n");		sql.append("EXISTS (\n");		sql.append("SELECT  TIME_CODE FROM SE_BA_TASK_AMOUNT_TMP B\n");		sql.append(" WHERE A.TIME_CODE=B.TIME_CODE\n");		sql.append("  AND A.USER_ACCOUNT=B.USER_ACCOUNT\n");		sql.append("   AND B.USER_ACCOUNT = '" + user.getAccount() + "'\n");		sql.append("GROUP BY TIME_CODE HAVING COUNT(*)>1)");		return factory.select(null, sql.toString());	}	   public QuerySet searchData(User user,String timeCode)throws Exception{				    	    						 	StringBuffer sql= new StringBuffer();			if (!timeCode.equals("") ) {		    	sql.append("SELECT C.ROW_NUM,C.TIME_CODE\n" );		    	sql.append("  FROM SE_BA_TASK_AMOUNT_TMP C,\n" );		    	sql.append("       (" );	    	}	    	sql.append("SELECT  TIME_CODE ,COUNT(*) COUNT FROM SE_BA_TASK_AMOUNT_TMP A\n" );	       	sql.append("   WHERE A.USER_ACCOUNT = '"+user.getAccount()+"'\n" );	    	sql.append("GROUP BY TIME_CODE HAVING COUNT(*)>1");	    	if (!timeCode.equals("") ) {		    	sql.append(") B\n" );		    	sql.append(" WHERE C.TIME_CODE = B.TIME_CODE\n" );		    	sql.append("   AND C.TIME_CODE = '"+timeCode+"'\n" );		    	sql.append("   AND C.USER_ACCOUNT ='"+user.getAccount()+"'\n" );		    	sql.append("   ORDER BY C.ROW_NUM\n" );	    	}			return factory.select(null, sql.toString());		}}