package com.org.dms.dao.service.basicinfomng;import java.util.ArrayList;import java.util.List;import com.org.dms.vo.service.SeBaTravelCostVO;import com.org.framework.base.BaseDAO;import com.org.framework.common.BaseResultSet;import com.org.framework.common.PageManager;import com.org.framework.common.QuerySet;import com.org.framework.common.User;import com.org.mvc.context.ActionContext;/** * SeBaTravelCostDao * <p> * Company: szq * </p> *  * @author baixiaoliang * @version 1.0 2014-7-14 */public class SeBaTravelCostDao extends BaseDAO {	// 定义instance	public static final SeBaTravelCostDao getInstance(ActionContext atx) {		SeBaTravelCostDao dao = new SeBaTravelCostDao();		atx.setDBFactory(dao.factory);		return dao;	}	/**	 * @auther baixiaoliang	 * @return String	 */	public boolean insert(SeBaTravelCostVO vo) throws Exception {		return factory.insert(vo);	}	/**	 * @auther baixiaoliang	 * @return String	 */	public boolean insertMultilist(SeBaTravelCostVO vo) throws Exception {		boolean b1 = factory.insert(vo);		StringBuffer sql = new StringBuffer();		sql.append("MERGE INTO SE_BA_TRAVEL_COST M\n");		sql.append("USING (SELECT T.CODE_ID,C.ORG_ID\n");		sql.append("         FROM SE_BA_TRAVEL_COST T,TM_ORG B,TM_ORG C WHERE T.ORG_ID=B.ORG_ID AND B.PID=C.ORG_ID ");		sql.append(		"AND T.CODE_ID='");		sql.append(		vo.getCodeId());		sql.append(		"') N\n");		sql.append("ON (M.CODE_ID = N.CODE_ID)\n");		sql.append("WHEN MATCHED THEN\n");		sql.append("  UPDATE\n");		sql.append("     SET M.OFFICE_ID=N.ORG_ID");		boolean b2 = factory.update(sql.toString(), null);		return b1 && b2;	}	/**	 * 	 * @return boolean	 */	public boolean update(SeBaTravelCostVO vo) throws Exception {		return factory.update(vo);	}	/**	 * @throws Exception	 *             设定文件	 * @return BaseResultSet 返回类型	 */	public BaseResultSet search(PageManager page, User user, String conditions)			throws Exception {		String wheres = conditions;		//wheres += " AND T.ORG_ID=F.ORG_ID AND F.PID=M.ORG_ID ";		wheres += " AND T.OFFICE_ID=F.ORG_ID ";		wheres +="    ORDER BY ORG_CODE";		page.setFilter(wheres);		// 定义返回结果集		BaseResultSet bs = null;		StringBuffer sql = new StringBuffer();		sql.append("  SELECT  ");		sql.append(" T.CODE_ID,");		sql.append(" T.COMPANY_ID,");		sql.append(" T.COST,");		sql.append(" T.COSTS_TYPE,");		sql.append(" T.CREATE_TIME,");		sql.append(" T.CREATE_USER,");		sql.append(" T.END_MILES,");		sql.append(" T.OEM_COMPANY_ID,");		sql.append(" T.OFFICE_ID,");		sql.append(" T.ORG_CODE,");		sql.append(" T.ORG_ID,");		sql.append(" T.ORG_NAME,");		sql.append(" T.SECRET_LEVEL,");		sql.append(" T.START_MILES,");		sql.append(" T.STATUS,");		sql.append(" T.TRAVEL_DATE,");		sql.append(" T.TRAVEL_STATUS,");		sql.append(" T.TRAVEL_TIMES,");		sql.append(" T.UPDATE_TIME,");		sql.append(" T.UPDATE_USER,");		sql.append(" T.VEHICLE_TYPE,");		sql.append(" F.SNAME");		sql.append(" FROM SE_BA_TRAVEL_COST T,TM_ORG F");		// 执行方法，不需要传递conn参数		bs = factory.select(sql.toString(), page);		bs.setFieldDateFormat("CREATE_TIME", "yyyy-MM-dd");		bs.setFieldDateFormat("UPDATE_TIME", "yyyy-MM-dd");		bs.setFieldDic("STATUS", "YXBS");		bs.setFieldDic("TRAVEL_TIMES", "WCCS");		bs.setFieldDic("TRAVEL_DATE", "WCSJ");		bs.setFieldDic("VEHICLE_TYPE", "WCFS");		bs.setFieldDic("COSTS_TYPE", "FYLB");		// 绑定组织字典，将ORG_ID翻译为组织名称		// bs.setFieldOrgDeptSimpleName("ORG_ID");		// bs.setFieldOrgCompanySimpleName("COMPANY_ID");		return bs;	}	/**	 * @throws Exception	 *             设定文件	 * @return QuerySet 返回类型	 */	public QuerySet check(String orgCode) throws Exception {		QuerySet qs = null;		StringBuffer sql = new StringBuffer();		sql.append("  SELECT COUNT(1) NUMS FROM  SE_BA_TRAVEL_COST ");		sql.append("  WHERE ORG_CODE='");		sql.append(orgCode);		sql.append("'");		qs = factory.select(null, sql.toString());		return qs;	}	/**	 * @throws Exception	 *             设定文件	 * @return boolean 返回类型	 */	public boolean delete(String codeId) throws Exception {		StringBuffer sql = new StringBuffer();		sql.append("  DELETE SE_BA_TRAVEL_COST ");		sql.append("  WHERE CODE_ID=");		sql.append(codeId);		return factory.delete(sql.toString(), null);	}	/**	 * 	 * @param coefficientId	 * @return	 * @throws Exception	 */	public boolean merge( User user) throws Exception {        		StringBuffer sql2= new StringBuffer();        sql2.append("MERGE INTO SE_BA_TRAVEL_COST_TMP M\n" );        sql2.append("           USING (\n" );        sql2.append("           SELECT\n" );        sql2.append("           T.ORG_CODE, T.COST,T.START_MILES,T.END_MILES, B.ID COSTS_TYPE,C.ID TRAVEL_TIMES,D.ID TRAVEL_DATE,\n" );        sql2.append("           E.ID VEHICLE_TYPE,T.COSTS_TYPE_NA,T.TRAVEL_TIMES_NA,T.TRAVEL_DATE_NA,T.VEHICLE_TYPE_NA,T.TRAVEL_STATUS_NA,F.ONAME,F.ORG_ID,G.ORG_ID OFFICE_ID,\n" );        sql2.append("           K.ID STATUS\n" );        sql2.append("            FROM SE_BA_TRAVEL_COST_TMP T,DIC_TREE B,DIC_TREE C,DIC_TREE D,DIC_TREE E,TM_ORG F,TM_ORG G,DIC_TREE K\n" );        sql2.append("           WHERE T.COSTS_TYPE_NA = B.DIC_VALUE AND B.PARENT_ID='305100'\n" );        sql2.append("           AND T.TRAVEL_TIMES_NA = C.DIC_VALUE AND C.PARENT_ID='301200'\n" );        sql2.append("           AND T.TRAVEL_DATE_NA = D.DIC_VALUE AND D.PARENT_ID='302300'\n" );        sql2.append("            AND T.VEHICLE_TYPE_NA = E.DIC_VALUE AND E.PARENT_ID= '301300'\n" );        sql2.append("            AND T.ORG_CODE=F.CODE  AND  F.PID=G.ORG_ID AND  T.STATUS_NA=K.DIC_VALUE AND K.PARENT_ID=100200\n" );        sql2.append("            AND NOT EXISTS (SELECT  ORG_CODE COUNT FROM SE_BA_TRAVEL_COST_TMP A\n" );        sql2.append("              WHERE A.USER_ACCOUNT =T.USER_ACCOUNT\n" );        sql2.append("              AND A.ORG_CODE=T.ORG_CODE\n" );        sql2.append("             GROUP BY ORG_CODE HAVING COUNT(*)>1)\n" );        sql2.append("           AND T.USER_ACCOUNT = '" + user.getAccount() + "'\n");        sql2.append("           ) N\n" );        sql2.append("           ON (M.ORG_CODE = N.ORG_CODE    )\n" );        sql2.append("           WHEN MATCHED THEN\n" );        sql2.append("           UPDATE  SET  M.COSTS_TYPE= N.COSTS_TYPE,M.TRAVEL_TIMES=N.TRAVEL_TIMES,\n" );        sql2.append("            M.TRAVEL_DATE=N.TRAVEL_DATE,M.VEHICLE_TYPE=N.VEHICLE_TYPE,M.ORG_ID=N.ORG_ID ,M.ORG_NAME=N.ONAME,");        sql2.append("         M.OFFICE_ID=N.OFFICE_ID,M.STATUS = N.STATUS");				return factory.update(sql2.toString(), null);	}	public BaseResultSet searchTmpImportBs(PageManager page, User user,String conditions)			throws Exception {	/*	page.setFilter("");*/		    	String wheres = conditions;    	wheres += " AND USER_ACCOUNT = '"+user.getAccount()+"'";		wheres += " order by TMP_ID desc ";		page.setFilter(wheres);		BaseResultSet bs = null;		StringBuffer sql= new StringBuffer();		sql.append("SELECT\n" );		sql.append("T.COSTS_TYPE_NA,\n" );		sql.append("T.TMP_ID,\n" );		sql.append("T.TRAVEL_TIMES_NA,\n" );		sql.append("T.TRAVEL_DATE_NA,\n" );		sql.append("T.VEHICLE_TYPE_NA,\n" );		sql.append("T.TRAVEL_STATUS_NA,\n" );		sql.append("T.ORG_ID,\n" );		sql.append("T.STATUS,\n" );		sql.append("T.STATUS_NA,\n" );		sql.append("T.ORG_CODE,\n" );		sql.append("T.ORG_NAME,\n" );		sql.append("T.COSTS_TYPE,\n" );		sql.append("T.TRAVEL_TIMES,\n" );		sql.append("T.TRAVEL_DATE,\n" );		sql.append("T.VEHICLE_TYPE,\n" );		sql.append("T.START_MILES,\n" );		sql.append("T.END_MILES,\n" );		sql.append("T.COST,\n" );		sql.append("T.TRAVEL_STATUS,\n" );		sql.append("T.OFFICE_ID,\n" );		sql.append("T.USER_ACCOUNT,\n" );		sql.append("T.ROW_NUM\n" );		sql.append("FROM SE_BA_TRAVEL_COST_TMP T");	/*	sql.append(" WHERE T.USER_ACCOUNT = '" + user.getAccount() + "'\n");		if(!errorInfoRowNum.equals("")){			sql.append(" AND T.ROW_NUM not in ( "+errorInfoRowNum+")\n" );		}*/		bs = factory.select(sql.toString(), page);		return bs;	}	/**	 * 获取临时表数据	 * 	 * @param user	 * @return	 * @throws Exception	 */	public QuerySet searchTmpInfoQs(User user) throws Exception {		StringBuffer sql= new StringBuffer();		sql.append("SELECT\n" );		sql.append("T.COSTS_TYPE_NA,\n" );		sql.append("T.TMP_ID,\n" );		sql.append("T.TRAVEL_TIMES_NA,\n" );		sql.append("T.TRAVEL_DATE_NA,\n" );		sql.append("T.VEHICLE_TYPE_NA,\n" );		sql.append("T.TRAVEL_STATUS_NA,\n" );		sql.append("T.ORG_ID,\n" );		sql.append("T.STATUS,\n" );		sql.append("T.STATUS_NA,\n" );		sql.append("T.ORG_CODE,\n" );		sql.append("T.ORG_NAME,\n" );		sql.append("T.COSTS_TYPE,\n" );		sql.append("T.TRAVEL_TIMES,\n" );		sql.append("T.TRAVEL_DATE,\n" );		sql.append("T.VEHICLE_TYPE,\n" );		sql.append("T.START_MILES,\n" );		sql.append("T.END_MILES,\n" );		sql.append("T.COST,\n" );		sql.append("T.TRAVEL_STATUS,\n" );		sql.append("T.OFFICE_ID,\n" );		sql.append("T.USER_ACCOUNT,\n" );		sql.append("T.ROW_NUM\n" );		sql.append("FROM SE_BA_TRAVEL_COST_TMP T");		sql.append(" WHERE T.USER_ACCOUNT = '" + user.getAccount() + "'\n");        sql.append("            AND NOT EXISTS (SELECT  ORG_CODE COUNT FROM SE_BA_TRAVEL_COST_TMP A\n" );        sql.append("              WHERE A.USER_ACCOUNT =T.USER_ACCOUNT\n" );        sql.append("              AND A.ORG_CODE=T.ORG_CODE\n" );        sql.append("             GROUP BY ORG_CODE HAVING COUNT(*)>1)\n" );		/*		 * sql.append("FROM SE_BA_RULE_PART_TMP A , SE_BA_RULE W, PT_BA_INFO P");		 * sql.append(" WHERE W.STATUS = '100201'\n" );		 * sql.append("   AND W.RULE_CODE = T.RULE_CODE\n" );		 * sql.append("   AND P.STATUS = 100201\n" );		 * sql.append("   AND P.PART_CODE = T.PART_CODE\n" );		 * sql.append("   AND T.USER_ACCOUNT = '"+user.getAccount()+"'\n" );		 * sql.append("   AND NOT EXISTS \n" ); sql.append(		 * "   (SELECT 1 FROM SE_BA_RULE_PART S WHERE T.RULE_CODE=S.RULE_CODE AND T.PART_CODE=S.PART_CODE)\n"		 * );		 */		return factory.select(null, sql.toString());	}	public List<SeBaTravelCostVO> searchList(PageManager page, User user, String	conditions) throws Exception {		List<SeBaTravelCostVO> list = new ArrayList<SeBaTravelCostVO>();		String wheres = conditions;		// wheres += " AND T.RULE_ID = B.RULE_ID AND B.STATUS='";		page.setFilter(wheres);		StringBuffer sql = new StringBuffer();		QuerySet qs = factory.select(null, sql.toString());		SeBaTravelCostVO vo = null;		if (qs.getRowCount() > 0) {			for (int i = 0; i < qs.getRowCount(); i++) {				vo = new SeBaTravelCostVO();				String companyId = qs.getString(i + 1, "companyId");				vo.setCompanyId(companyId);				list.add(vo);			}		}		return list;	}	/**	 * 更新正式表数据	 * 	 * @param user	 * @return	 * @throws Exception	 */	public boolean insertTmpInfs(User user,String errorInfoRowNum) throws Exception {		StringBuffer sql = new StringBuffer();		sql.append("MERGE INTO SE_BA_TRAVEL_COST M\n");		sql.append("USING (SELECT * FROM SE_BA_TRAVEL_COST_TMP T ");		sql.append(" WHERE T.USER_ACCOUNT = '" + user.getAccount() + "'\n");		if(!errorInfoRowNum.equals("")){			sql.append(" AND T.ROW_NUM not in ( "+errorInfoRowNum+")\n" );		}		sql.append(" ) N\n");		sql.append("ON (M.ORG_CODE = N.ORG_CODE\n");		sql.append("AND M.COSTS_TYPE = N.COSTS_TYPE ");		sql.append(" AND M.TRAVEL_TIMES = N.TRAVEL_TIMES ");		sql.append(" AND M.TRAVEL_DATE = N.TRAVEL_DATE ");		sql.append(" AND M.VEHICLE_TYPE = N.VEHICLE_TYPE ");		sql.append(")");		sql.append("WHEN MATCHED THEN\n");		sql.append("  UPDATE\n");		sql.append("     SET ");		/*		 * sql.append("     SET M.COSTS_TYPE   = N.COSTS_TYPE,\n" );		 * sql.append("         M.TRAVEL_TIMES = N.TRAVEL_TIMES,\n" );		 * sql.append("         M.TRAVEL_DATE  = N.TRAVEL_DATE,\n" );		 * sql.append("         M.VEHICLE_TYPE = N.VEHICLE_TYPE,\n" );		 */		sql.append("         M.COST         = N.COST,\n");		sql.append("         M.START_MILES  = N.START_MILES,\n");		sql.append("         M.END_MILES    = N.END_MILES,\n");		sql.append("         M.UPDATE_USER  = N.USER_ACCOUNT,\n");		sql.append("               M.STATUS = N.STATUS,\n" );		sql.append("         M.UPDATE_TIME  = SYSDATE\n");		sql.append("\n");		sql.append("WHEN NOT MATCHED THEN\n");		sql.append("  INSERT\n");		sql.append("  (CODE_ID,ORG_CODE,ORG_NAME,COSTS_TYPE,TRAVEL_TIMES,TRAVEL_DATE,VEHICLE_TYPE,START_MILES,END_MILES,COST,\n");		sql.append("  TRAVEL_STATUS,OFFICE_ID,COMPANY_ID,ORG_ID,CREATE_USER,CREATE_TIME,UPDATE_USER,UPDATE_TIME,STATUS,OEM_COMPANY_ID,SECRET_LEVEL)\n");		sql.append("  VALUES\n");		sql.append("    (F_GETID,\n");		sql.append("     N.ORG_CODE,\n");		sql.append("     N.ORG_NAME,\n");		sql.append("     N.COSTS_TYPE,\n");		sql.append("     N.TRAVEL_TIMES,\n");		sql.append("     N.TRAVEL_DATE,\n");		sql.append("     N.VEHICLE_TYPE,\n");		sql.append("     N.START_MILES,\n");		sql.append("     N.END_MILES,\n");		sql.append("     N.COST,\n");		sql.append("     '',\n");		sql.append("     N.OFFICE_ID,\n");		sql.append("     '',\n");		sql.append("     N.ORG_ID,\n");		sql.append("     N.USER_ACCOUNT,\n");		sql.append("     SYSDATE,\n");		sql.append("     '',\n");		sql.append("     '',\n");		sql.append("     N.STATUS,\n");		sql.append("     '',\n");		sql.append("     '')");		sql.append(" WHERE N.USER_ACCOUNT = '" + user.getAccount() + "'\n");		return factory.update(sql.toString(), null);	}	public QuerySet download(String conditions) throws Exception {		StringBuffer sql = new StringBuffer();		sql.append("SELECT  ROWNUM,T.* FROM(");		sql.append("SELECT T.ORG_CODE,\n");		sql.append("       T.ORG_NAME,\n");		sql.append("       F.SNAME,\n");		sql.append("\n");		sql.append("       B.DIC_VALUE COSTS_TYPE_NA,\n");		sql.append("       C.DIC_VALUE TRAVEL_TIMES_NA,\n");		sql.append("       D.DIC_VALUE TRAVEL_DATE_NA,\n");		sql.append("       E.DIC_VALUE VEHICLE_TYPE_NA,\n");		sql.append("       T.START_MILES,\n");		sql.append("       T.END_MILES,\n");		sql.append(" T.UPDATE_TIME,");		sql.append(" T.UPDATE_USER,");		sql.append(" T.CREATE_TIME,");		sql.append(" T.CREATE_USER,");		sql.append(" K.DIC_VALUE STATUS_NA,");		sql.append("       T.COST\n");		sql.append("  FROM SE_BA_TRAVEL_COST T,\n");		sql.append("       DIC_TREE          B,\n");		sql.append("       DIC_TREE          C,\n");		sql.append("       DIC_TREE          D,\n");		sql.append("       DIC_TREE          E,\n");		sql.append("       TM_ORG            F,\n");		sql.append("       DIC_TREE          K\n");		sql.append(" WHERE T.COSTS_TYPE = B.ID\n");		sql.append("   AND B.PARENT_ID = '305100'\n");		sql.append("   AND T.TRAVEL_TIMES = C.ID\n");		sql.append("   AND C.PARENT_ID = '301200'\n");		sql.append("   AND T.TRAVEL_DATE = D.ID\n");		sql.append("   AND D.PARENT_ID = '302300'\n");		sql.append("   AND T.VEHICLE_TYPE = E.ID\n");		sql.append("   AND E.PARENT_ID = '301300'\n");		sql.append("   AND T.OFFICE_ID = F.ORG_ID");		sql.append("  AND T.STATUS=K.ID");		sql.append("      AND K.PARENT_ID = '100200'\n" );		sql.append(" AND "+conditions+"\n" );		sql.append("    ORDER BY T.ORG_CODE");		sql.append("    ) T ORDER BY ROWNUM");		// 执行方法，不需要传递conn参数		return factory.select(null, sql.toString());	}	public QuerySet expTmpErrorData(String conditions,User user) throws Exception {		StringBuffer sql = new StringBuffer();		//sql.append("SELECT  ROWNUM,T.* FROM(");		sql.append("SELECT ROW_NUM, T.ORG_CODE,\n");		sql.append("       T.ORG_NAME,\n");		sql.append("       T.OFFICE_NA SNAME,\n");		sql.append("       T.COSTS_TYPE_NA,\n");		sql.append("       T.TRAVEL_TIMES_NA,\n");		sql.append("       T.TRAVEL_DATE_NA,\n");		sql.append("       T.VEHICLE_TYPE_NA,\n");		sql.append("       T.START_MILES,\n");		sql.append("       T.END_MILES,\n");		//sql.append(" T.UPDATE_TIME,");		//sql.append(" T.UPDATE_USER,");	//	sql.append(" T.CREATE_TIME,");	//	sql.append(" T.CREATE_USER,");		sql.append(" T.STATUS_NA,");		sql.append("       T.COST\n");		sql.append("  FROM SE_BA_TRAVEL_COST_TMP T\n");		sql.append("WHERE T.ROW_NUM IN ("+ conditions + ") \n");		sql.append(" AND T.USER_ACCOUNT='"+user.getAccount()+"' \n");		sql.append("    ORDER BY ROW_NUM");		//sql.append("    ) T ORDER BY ROWNUM");		// 执行方法，不需要传递conn参数		return factory.select(null, sql.toString());	}	   public QuerySet searchData(User user)throws Exception{				    	    		   /* 	StringBuffer sql= new StringBuffer();	    	sql.append("SELECT * FROM SE_BA_TRAVEL_COST_TMP A WHERE\n" );	    	sql.append("EXISTS (\n" );	    	sql.append("SELECT  min(row_num),ORG_CODE ,COUNT(*) number FROM SE_BA_TRAVEL_COST_TMP B\n" );	    	sql.append(" WHERE A.ORG_CODE=B.ORG_CODE\n" );	    	sql.append("  AND A.USER_ACCOUNT=B.USER_ACCOUNT\n" );	    	sql.append("   AND B.USER_ACCOUNT = '"+user.getAccount()+"'\n" );	    	sql.append("GROUP BY ORG_CODE HAVING COUNT(*)>1)");*/		 	StringBuffer sql= new StringBuffer();	     	    	sql.append("SELECT  MIN(ROW_NUM) ROW_NUM,ORG_CODE ,COUNT(*) COUNT FROM SE_BA_TRAVEL_COST_TMP A\n" );	       	sql.append("   WHERE A.USER_ACCOUNT = '"+user.getAccount()+"'\n" );	    	sql.append("GROUP BY ORG_CODE HAVING COUNT(*)>1");			return factory.select(null, sql.toString());		}	   public QuerySet searchData(User user,String orgCode)throws Exception{				    	    						 	StringBuffer sql= new StringBuffer();				if (!orgCode.equals("") ) {			    	sql.append("SELECT C.ROW_NUM,C.ORG_CODE\n" );			    	sql.append("  FROM SE_BA_TRAVEL_COST_TMP C,\n" );			    	sql.append("       (" );		    	}		    	sql.append("SELECT  ORG_CODE ,COUNT(*) COUNT FROM SE_BA_TRAVEL_COST_TMP A\n" );		       	sql.append("   WHERE A.USER_ACCOUNT = '"+user.getAccount()+"'\n" );		    	sql.append("GROUP BY ORG_CODE HAVING COUNT(*)>1");		    	if (!orgCode.equals("") ) {			    	sql.append(") B\n" );			    	sql.append(" WHERE C.ORG_CODE = B.ORG_CODE\n" );			    	sql.append("   AND C.ORG_CODE = '"+orgCode+"'\n" );			    	sql.append("   AND C.USER_ACCOUNT ='"+user.getAccount()+"'\n" );			    	sql.append("   ORDER BY C.ROW_NUM\n" );		    	}				return factory.select(null, sql.toString());			}}