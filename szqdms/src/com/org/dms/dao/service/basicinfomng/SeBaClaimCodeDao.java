package com.org.dms.dao.service.basicinfomng;import java.util.ArrayList;import java.util.List;import com.org.dms.vo.service.SeBaClaimCodeVO;import com.org.dms.vo.service.SeBaClaimCodeVO;import com.org.framework.base.BaseDAO;import com.org.framework.common.BaseResultSet;import com.org.framework.common.PageManager;import com.org.framework.common.QuerySet;import com.org.framework.common.User;import com.org.mvc.context.ActionContext;/** * SeBaClaimCodeDao * <p> * Company: szq * </p> *  * @author baixiaoliang * @version 1.0 2014-7-14 */public class SeBaClaimCodeDao extends BaseDAO {	// 定义instance	public static final SeBaClaimCodeDao getInstance(ActionContext atx) {		SeBaClaimCodeDao dao = new SeBaClaimCodeDao();		atx.setDBFactory(dao.factory);		return dao;	}	/**	 * @auther baixiaoliang	 * @return String	 */	public boolean insert(SeBaClaimCodeVO vo) throws Exception {		return factory.insert(vo);	}	public boolean insertMultilist(SeBaClaimCodeVO vo) throws Exception {		boolean b1 = factory.insert(vo);		StringBuffer sql = new StringBuffer();		sql.append("MERGE INTO SE_BA_CLAIM_CODE M\n");		sql.append("USING (SELECT T.CODE_ID,C.ORG_ID\n");		sql.append("         FROM SE_BA_CLAIM_CODE T,TM_ORG B,TM_ORG C WHERE T.ORG_ID=B.ORG_ID AND B.PID=C.ORG_ID ");		sql.append(		"AND T.CODE_ID='");		sql.append(		vo.getCodeId());		sql.append(		"') N\n");		sql.append("ON (M.CODE_ID = N.CODE_ID)\n");		sql.append("WHEN MATCHED THEN\n");		sql.append("  UPDATE\n");		sql.append("     SET M.OFFICE_ID=N.ORG_ID");		boolean b2 = factory.update(sql.toString(), null);		return b1 && b2;	}	/**	 * 	 * @return boolean	 */	public boolean update(SeBaClaimCodeVO vo) throws Exception {		return factory.update(vo);	}	/**	 * 批量更新	 * 	 * @return boolean	 */	public boolean updateAll(String codeIds, SeBaClaimCodeVO vo)			throws Exception {		StringBuffer sql = new StringBuffer();		sql.append(" update SE_BA_CLAIM_CODE SET ");		if (vo.getBaseTaskTime() != null) {			sql.append(" BASE_TASK_TIME = '" + vo.getBaseTaskTime() + "',");		}		if (vo.getUserType() != null) {			sql.append(" USER_TYPE = '" + vo.getUserType() + "',");		}		sql.append(" UNIT_PRICE = '" + vo.getUnitPrice() + "'");		sql.append(" where CODE_ID in (" + codeIds + ") ");		return factory.update(sql.toString(), null);	}	/**	 * @throws Exception	 *             设定文件	 * @return BaseResultSet 返回类型	 */	public BaseResultSet search(PageManager page, User user, String conditions)			throws Exception {		String wheres = conditions;		wheres += " AND T.ORG_ID=B.ORG_ID AND B.PID=C.ORG_ID ";		page.setFilter(wheres);		// 定义返回结果集		BaseResultSet bs = null;		StringBuffer sql = new StringBuffer();		sql.append("  SELECT  ");		sql.append(" T.BASE_TASK_TIME,");		sql.append(" T.CODE_ID,");		sql.append(" T.COMPANY_ID,");		sql.append(" T.CREATE_TIME,");		sql.append(" T.CREATE_USER,");		sql.append(" T.ORG_CODE,");		sql.append(" T.OEM_COMPANY_ID,");		sql.append(" T.ORG_ID,");		sql.append(" T.ORG_NAME,");		sql.append(" T.SECRET_LEVEL,");		sql.append(" T.STATUS,");		sql.append(" T.TASK_TIME_RATIO,");		sql.append(" T.UNIT_PRICE,");		sql.append(" T.UPDATE_TIME,");		sql.append(" T.UPDATE_USER,");		sql.append(" T.USER_TYPE,");		sql.append(" T.START_DATE,");		sql.append(" T.END_DATE,");		sql.append(" T.TIME_TYPE,");		sql.append(" C.SNAME");		sql.append(" FROM SE_BA_CLAIM_CODE T,TM_ORG B ,TM_ORG C");		// 执行方法，不需要传递conn参数		bs = factory.select(sql.toString(), page);		bs.setFieldDateFormat("CREATE_TIME", "yyyy-MM-dd");		bs.setFieldDateFormat("UPDATE_TIME", "yyyy-MM-dd");		bs.setFieldDateFormat("START_DATE", "yyyy-MM-dd");		bs.setFieldDateFormat("END_DATE", "yyyy-MM-dd");		bs.setFieldDic("STATUS", "YXBS");		bs.setFieldDic("USER_TYPE", "CLYHLX");		bs.setFieldDic("TIME_TYPE", "WCSJ");		// 绑定组织字典，将ORG_ID翻译为组织名称		// bs.setFieldOrgDeptSimpleName("ORG_ID");		// bs.setFieldOrgCompanySimpleName("COMPANY_ID");		return bs;	}	/**	 * @throws Exception	 *             设定文件	 * @return QuerySet 返回类型	 */	public QuerySet check(String orgCode,String timeType) throws Exception {		QuerySet qs = null;		StringBuffer sql = new StringBuffer();		sql.append("  SELECT COUNT(1) NUMS FROM  SE_BA_CLAIM_CODE ");		sql.append("  WHERE ORG_CODE='");		sql.append(orgCode);		sql.append("'");		sql.append(" AND TIME_TYPE='");		sql.append(timeType);		sql.append("'");		qs = factory.select(null, sql.toString());		return qs;	}	/**	 * @throws Exception	 *             设定文件	 * @return boolean 返回类型	 */	public boolean delete(String codeId) throws Exception {		StringBuffer sql = new StringBuffer();		sql.append("  DELETE SE_BA_CLAIM_CODE ");		sql.append("  WHERE CODE_ID=");		sql.append(codeId);		return factory.delete(sql.toString(), null);	}	/**	 * 	 * @param coefficientId	 * @return	 * @throws Exception	 */	public boolean merge(User user) throws Exception {		StringBuffer sql2 = new StringBuffer();		sql2.append("MERGE INTO SE_BA_CLAIM_CODE_TMP M\n");		sql2.append("USING (SELECT T.ORG_CODE,\n");		sql2.append("              B.ID TIME_TYPE,\n");		sql2.append("              T.Time_Type_Na,\n");		sql2.append("              F.ONAME,\n");		sql2.append("              F.ORG_ID,\n");		sql2.append("              G.ORG_ID OFFICE_ID,\n");		sql2.append("              T.BASE_TASK_TIME,\n");		sql2.append("              T.TASK_TIME_RATIO,\n");		sql2.append("              T.UNIT_PRICE,\n");		sql2.append("              T.START_DATE,\n");		sql2.append("              T.END_DATE,K.ID STATUS\n");		sql2.append("         FROM SE_BA_CLAIM_CODE_TMP T, DIC_TREE B, TM_ORG F, TM_ORG G,DIC_TREE K\n");		sql2.append("        WHERE T.Time_Type_Na = B.DIC_VALUE\n");		sql2.append("          AND B.PARENT_ID = '302300'\n");		sql2.append("          AND T.ORG_CODE = F.CODE\n");		sql2.append("          AND F.PID = G.ORG_ID AND  T.STATUS_NA=K.DIC_VALUE AND K.PARENT_ID=100200\n");	     sql2.append("            AND NOT EXISTS (SELECT  ORG_CODE  FROM SE_BA_CLAIM_CODE_TMP A\n" );	        sql2.append("              WHERE A.USER_ACCOUNT =T.USER_ACCOUNT\n" );	        sql2.append("              AND A.ORG_CODE=T.ORG_CODE\n" );	        sql2.append("             GROUP BY ORG_CODE HAVING COUNT(*)>1)\n" );				sql2.append("          AND T.USER_ACCOUNT = '" + user.getAccount()				+ "'\n");		sql2.append("           ) N\n");		sql2.append("ON (M.ORG_CODE = N.ORG_CODE )\n");		sql2.append("WHEN MATCHED THEN\n");		sql2.append("  UPDATE\n");		sql2.append("     SET M.BASE_TASK_TIME  = N.BASE_TASK_TIME,\n");		sql2.append("         M.TASK_TIME_RATIO = N.TASK_TIME_RATIO,\n");		sql2.append("         M.UNIT_PRICE      = N.UNIT_PRICE,\n");		sql2.append("         M.START_DATE      = N.START_DATE,\n");		sql2.append("         M.END_DATE        = N.END_DATE,\n");		sql2.append("         M.TIME_TYPE=N.TIME_TYPE,M.STATUS = N.STATUS,\n");		sql2.append("         M.OFFICE_ID=N.OFFICE_ID,M.ORG_ID=N.ORG_ID ,M.ORG_NAME=N.ONAME");		return factory.update(sql2.toString(), null);	}	public BaseResultSet searchTmpImportBs(PageManager page, User user,String conditions)			throws Exception {	   	String wheres = conditions;    	wheres += " AND USER_ACCOUNT = '"+user.getAccount()+"'";		wheres += " order by TMP_ID desc ";		page.setFilter(wheres);		BaseResultSet bs = null;		StringBuffer sql = new StringBuffer();		sql.append("SELECT\n");		sql.append("T.TMP_ID,\n");		sql.append("T.ORG_CODE,\n");		sql.append("T.ORG_NAME,\n");		sql.append("T.BASE_TASK_TIME,\n");		sql.append("T.TASK_TIME_RATIO,\n");		sql.append("T.USER_TYPE,\n");		sql.append("T.UNIT_PRICE,\n");		sql.append("T.COMPANY_ID,\n");		sql.append("T.ORG_ID,\n");		sql.append("T.STATUS,\n");		sql.append("T.OEM_COMPANY_ID,\n");		sql.append("T.SECRET_LEVEL,\n");		sql.append("T.OFFICE_ID,\n");		sql.append("T.START_DATE,\n");		sql.append("T.END_DATE,\n");		sql.append("T.USER_ACCOUNT,\n");		sql.append("T.ROW_NUM,\n");		sql.append("T.TIME_TYPE,\n");		sql.append("T.TIME_TYPE_NA,\n");		sql.append("T.STATUS_NA\n");		sql.append("FROM SE_BA_CLAIM_CODE_TMP T");		bs = factory.select(sql.toString(), page);		return bs;	}	/**	 * 获取临时表数据	 * 	 * @param user	 * @return	 * @throws Exception	 */	public QuerySet searchTmpInfoQs(User user) throws Exception {		StringBuffer sql = new StringBuffer();		sql.append("SELECT\n");		sql.append("T.TMP_ID,\n");		sql.append("T.ORG_CODE,\n");		sql.append("T.ORG_NAME,\n");		sql.append("T.BASE_TASK_TIME,\n");		sql.append("T.TASK_TIME_RATIO,\n");		sql.append("T.USER_TYPE,\n");		sql.append("T.UNIT_PRICE,\n");		sql.append("T.COMPANY_ID,\n");		sql.append("T.ORG_ID,\n");		sql.append("T.STATUS,\n");		sql.append("T.OEM_COMPANY_ID,\n");		sql.append("T.SECRET_LEVEL,\n");		sql.append("T.OFFICE_ID,\n");		sql.append("T.START_DATE,\n");		sql.append("T.END_DATE,\n");		sql.append("T.USER_ACCOUNT,\n");		sql.append("T.ROW_NUM,\n");		sql.append("T.TIME_TYPE,\n");		sql.append("T.TIME_TYPE_NA,\n");		sql.append("T.STATUS_NA\n");		sql.append("FROM SE_BA_CLAIM_CODE_TMP T");		sql.append(" WHERE T.USER_ACCOUNT = '" + user.getAccount() + "'\n");	    sql.append("            AND NOT EXISTS (SELECT  ORG_CODE  FROM SE_BA_CLAIM_CODE_TMP A\n" );        sql.append("              WHERE A.USER_ACCOUNT =T.USER_ACCOUNT\n" );        sql.append("              AND A.ORG_CODE=T.ORG_CODE\n" );        sql.append("             GROUP BY ORG_CODE HAVING COUNT(*)>1)\n" );		/*		 * sql.append("FROM SE_BA_RULE_PART_TMP A , SE_BA_RULE W, PT_BA_INFO P");		 * sql.append(" WHERE W.STATUS = '100201'\n" );		 * sql.append("   AND W.RULE_CODE = T.RULE_CODE\n" );		 * sql.append("   AND P.STATUS = 100201\n" );		 * sql.append("   AND P.PART_CODE = T.PART_CODE\n" );		 * sql.append("   AND T.USER_ACCOUNT = '"+user.getAccount()+"'\n" );		 * sql.append("   AND NOT EXISTS \n" ); sql.append(		 * "   (SELECT 1 FROM SE_BA_RULE_PART S WHERE T.RULE_CODE=S.RULE_CODE AND T.PART_CODE=S.PART_CODE)\n"		 * );		 */		return factory.select(null, sql.toString());	}	public List<SeBaClaimCodeVO> searchList(PageManager page, User user, String	conditions) throws Exception {		List<SeBaClaimCodeVO> list = new ArrayList<SeBaClaimCodeVO>();		String wheres = conditions;		// wheres += " AND T.RULE_ID = B.RULE_ID AND B.STATUS='";		page.setFilter(wheres);		StringBuffer sql = new StringBuffer();		QuerySet qs = factory.select(null, sql.toString());		SeBaClaimCodeVO vo = null;		if (qs.getRowCount() > 0) {			for (int i = 0; i < qs.getRowCount(); i++) {				vo = new SeBaClaimCodeVO();				String codeId = qs.getString(i + 1, "RULE_ID");				vo.setCodeId(codeId);				list.add(vo);			}		}		return list;	}	/**	 * 更新正式表数据	 * 	 * @param user	 * @return	 * @throws Exception	 */	public boolean insertTmpInfs(User user,String errorInfoRowNum) throws Exception {		StringBuffer sql = new StringBuffer();		sql.append("MERGE INTO SE_BA_CLAIM_CODE M\n");		sql.append("    USING (SELECT * FROM SE_BA_CLAIM_CODE_TMP T\n");		sql.append(" WHERE T.USER_ACCOUNT = '" + user.getAccount() + "'\n");		if(!errorInfoRowNum.equals("")){			sql.append(" AND T.ROW_NUM not in ( "+errorInfoRowNum+")\n" );		}		sql.append("     ) N\n");		sql.append("    ON (M.ORG_CODE = N.ORG_CODE\n");		sql.append("    AND M.TIME_TYPE = N.TIME_TYPE\n");		sql.append("    AND N.USER_ACCOUNT = '" + user.getAccount() + "'\n");		sql.append("    )\n");		sql.append("    WHEN MATCHED THEN\n");		sql.append("      UPDATE\n");		sql.append("         SET\n");		sql.append("             M.BASE_TASK_TIME = N.BASE_TASK_TIME,\n");		sql.append("             M.TASK_TIME_RATIO  = N.TASK_TIME_RATIO,\n");		sql.append("             M.UNIT_PRICE    = N.UNIT_PRICE,\n");		sql.append("               M.START_DATE    = N.START_DATE,\n");		sql.append("                 M.END_DATE    = N.END_DATE,\n");		sql.append("             M.UPDATE_USER  = N.USER_ACCOUNT,\n");		sql.append("               M.STATUS = N.STATUS,\n");		sql.append("             M.UPDATE_TIME  = SYSDATE\n");		sql.append("    WHEN NOT MATCHED THEN\n");		sql.append("      INSERT\n");		sql.append("      (CODE_ID,ORG_CODE,ORG_NAME,BASE_TASK_TIME,TASK_TIME_RATIO,USER_TYPE,UNIT_PRICE,");		sql.append("      COMPANY_ID,ORG_ID,CREATE_USER,CREATE_TIME,UPDATE_USER,UPDATE_TIME,STATUS,OEM_COMPANY_ID,SECRET_LEVEL,OFFICE_ID,START_DATE,END_DATE,TIME_TYPE)");		sql.append("      VALUES\n");		sql.append("        (F_GETID,\n");		sql.append("         N.ORG_CODE,\n");		sql.append("         N.ORG_NAME,\n");		sql.append("          N.BASE_TASK_TIME,\n");		sql.append("          N.TASK_TIME_RATIO,\n");		sql.append("          N.USER_TYPE,\n");		sql.append("          N.UNIT_PRICE,\n");		sql.append("          '',\n");		sql.append("         N.ORG_ID,\n");		sql.append("         N.USER_ACCOUNT,\n");		sql.append("         SYSDATE,\n");		sql.append("         '',\n");		sql.append("         NULL,\n");		sql.append("     N.STATUS,\n");		sql.append("         '',\n");		sql.append("         '',\n");		sql.append("         N.OFFICE_ID,\n");		sql.append("         N.START_DATE,\n");		sql.append("         N.END_DATE,\n");		sql.append("         N.TIME_TYPE\n");		sql.append("         )");		sql.append(" WHERE N.USER_ACCOUNT = '" + user.getAccount() + "'\n");		return factory.update(sql.toString(), null);	}	public QuerySet download(String conditions) throws Exception {		StringBuffer sql = new StringBuffer();		sql.append("SELECT  ROWNUM,T.* FROM(");		sql.append("SELECT \n");		sql.append("          T.ORG_CODE,\n");		sql.append("          T.ORG_NAME,\n");		sql.append("          H.SNAME,\n");		sql.append("          D.DIC_VALUE TIME_TYPE_NA,\n");		sql.append("          T.BASE_TASK_TIME,\n");		sql.append("          T.TASK_TIME_RATIO,\n");		sql.append("          T.UNIT_PRICE,\n");		sql.append(" TO_CHAR(T.START_DATE,'YYYY-MM-DD') START_DATE,");		sql.append(" TO_CHAR(T.END_DATE,'YYYY-MM-DD') END_DATE,");		sql.append(" T.UPDATE_TIME,");		sql.append(" T.UPDATE_USER,");		sql.append(" T.CREATE_TIME,");		sql.append(" T.CREATE_USER,");		sql.append("          G.DIC_VALUE STATUS_NA\n");		sql.append("     FROM SE_BA_CLAIM_CODE T, DIC_TREE D, TM_ORG F, DIC_TREE G,TM_ORG H\n");		sql.append("    WHERE T.TIME_TYPE = D.ID\n");		sql.append("      AND D.PARENT_ID = '302300'\n");		sql.append("      AND T.ORG_ID = F.ORG_ID\n");		sql.append("      AND F.PID = H.ORG_ID\n");		sql.append("      AND T.STATUS = G.ID\n");		sql.append("      AND G.PARENT_ID = '100200'\n");		sql.append(" AND "+conditions+"\n" );		sql.append("    ORDER BY ORG_CODE");		sql.append("    ) T ORDER BY ROWNUM");		// 执行方法，不需要传递conn参数		return factory.select(null, sql.toString());	}	public QuerySet expTmpErrorData(String conditions,User user) throws Exception {		StringBuffer sql = new StringBuffer();		sql.append("SELECT\n");		sql.append("T.TMP_ID,\n");		sql.append("T.ORG_CODE,\n");		sql.append("T.ORG_NAME,\n");		sql.append("T.BASE_TASK_TIME,\n");		sql.append("T.TASK_TIME_RATIO,\n");		sql.append("T.USER_TYPE,\n");		sql.append("T.UNIT_PRICE,\n");		sql.append("T.COMPANY_ID,\n");		sql.append("T.ORG_ID,\n");		sql.append("T.STATUS,\n");		sql.append("T.OEM_COMPANY_ID,\n");		sql.append("T.SECRET_LEVEL,\n");		sql.append("T.OFFICE_ID,\n");		sql.append("T.OFFICE_NA SNAME,\n");/*		sql.append("T.START_DATE,\n");		sql.append("T.END_DATE,\n");*/		sql.append(" TO_CHAR(T.START_DATE,'YYYY-MM-DD') START_DATE,");		sql.append(" TO_CHAR(T.END_DATE,'YYYY-MM-DD') END_DATE,");		sql.append("T.USER_ACCOUNT,\n");		sql.append("T.ROW_NUM,\n");		sql.append("T.TIME_TYPE,\n");		sql.append("T.TIME_TYPE_NA,\n");		sql.append("T.STATUS_NA\n");		sql.append("FROM SE_BA_CLAIM_CODE_TMP T");		sql.append(" WHERE T.ROW_NUM IN ("+ conditions + ") \n");		sql.append(" AND T.USER_ACCOUNT='"+user.getAccount()+"' \n");		sql.append("    ORDER BY ROW_NUM");		//sql.append("    ) T ORDER BY ROWNUM");		// 执行方法，不需要传递conn参数		return factory.select(null, sql.toString());	}	/**	 * 检验临时中间表是否重复	 * @param user	 * @return	 * @throws Exception	 */	public QuerySet searchData(User user) throws Exception {		StringBuffer sql = new StringBuffer();		sql.append("SELECT * FROM SE_BA_CLAIM_CODE_TMP A WHERE\n");		sql.append("EXISTS (\n");		sql.append("SELECT  ORG_CODE FROM SE_BA_CLAIM_CODE_TMP B\n");		sql.append(" WHERE A.ORG_CODE=B.ORG_CODE\n");		sql.append("  AND A.USER_ACCOUNT=B.USER_ACCOUNT\n");		sql.append("   AND B.USER_ACCOUNT = '" + user.getAccount() + "'\n");		sql.append("GROUP BY ORG_CODE HAVING COUNT(*)>1)");		return factory.select(null, sql.toString());	}		  public QuerySet searchData(User user,String orgCode)throws Exception{				    	    						 	StringBuffer sql= new StringBuffer();			if (!orgCode.equals("") ) {		    	sql.append("SELECT C.ROW_NUM,C.ORG_CODE\n" );		    	sql.append("  FROM SE_BA_CLAIM_CODE_TMP C,\n" );		    	sql.append("       (" );	    	}	    	sql.append("SELECT  ORG_CODE FROM SE_BA_CLAIM_CODE_TMP A\n" );	       	sql.append("   WHERE A.USER_ACCOUNT = '"+user.getAccount()+"'\n" );	    	sql.append("GROUP BY ORG_CODE HAVING COUNT(*)>1");	    	if (!orgCode.equals("") ) {		    	sql.append(") B\n" );		    	sql.append(" WHERE C.ORG_CODE = B.ORG_CODE\n" );		    	sql.append("   AND C.ORG_CODE = '"+orgCode+"'\n" );		    	sql.append("   AND C.USER_ACCOUNT ='"+user.getAccount()+"'\n" );		    	sql.append("   ORDER BY C.ROW_NUM\n" );	    	}			return factory.select(null, sql.toString());		}}